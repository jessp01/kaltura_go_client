/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaCondition `abstract`
type KalturaCondition struct {
	Description *string `json:"description,omitempty"`
	Not *bool `json:"not,omitempty"`
	ObjectType *string `json:"objectType,omitempty"`
	// `readOnly`  Enum Type: `KalturaConditionType`  The type of the access control condition
	Type *string `json:"type,omitempty"`
}

// NewKalturaCondition instantiates a new KalturaCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaCondition() *KalturaCondition {
	this := KalturaCondition{}
	return &this
}

// NewKalturaConditionWithDefaults instantiates a new KalturaCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaConditionWithDefaults() *KalturaCondition {
	this := KalturaCondition{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *KalturaCondition) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaCondition) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *KalturaCondition) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *KalturaCondition) SetDescription(v string) {
	o.Description = &v
}

// GetNot returns the Not field value if set, zero value otherwise.
func (o *KalturaCondition) GetNot() bool {
	if o == nil || o.Not == nil {
		var ret bool
		return ret
	}
	return *o.Not
}

// GetNotOk returns a tuple with the Not field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaCondition) GetNotOk() (*bool, bool) {
	if o == nil || o.Not == nil {
		return nil, false
	}
	return o.Not, true
}

// HasNot returns a boolean if a field has been set.
func (o *KalturaCondition) HasNot() bool {
	if o != nil && o.Not != nil {
		return true
	}

	return false
}

// SetNot gets a reference to the given bool and assigns it to the Not field.
func (o *KalturaCondition) SetNot(v bool) {
	o.Not = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *KalturaCondition) GetObjectType() string {
	if o == nil || o.ObjectType == nil {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaCondition) GetObjectTypeOk() (*string, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *KalturaCondition) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *KalturaCondition) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KalturaCondition) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaCondition) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KalturaCondition) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *KalturaCondition) SetType(v string) {
	o.Type = &v
}

func (o KalturaCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Not != nil {
		toSerialize["not"] = o.Not
	}
	if o.ObjectType != nil {
		toSerialize["objectType"] = o.ObjectType
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaCondition struct {
	value *KalturaCondition
	isSet bool
}

func (v NullableKalturaCondition) Get() *KalturaCondition {
	return v.value
}

func (v *NullableKalturaCondition) Set(val *KalturaCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaCondition(val *KalturaCondition) *NullableKalturaCondition {
	return &NullableKalturaCondition{value: val, isSet: true}
}

func (v NullableKalturaCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


