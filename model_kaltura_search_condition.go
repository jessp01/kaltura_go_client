/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaSearchCondition struct for KalturaSearchCondition
type KalturaSearchCondition struct {
	KalturaSearchItem
}

// NewKalturaSearchCondition instantiates a new KalturaSearchCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaSearchCondition() *KalturaSearchCondition {
	this := KalturaSearchCondition{}
	return &this
}

// NewKalturaSearchConditionWithDefaults instantiates a new KalturaSearchCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaSearchConditionWithDefaults() *KalturaSearchCondition {
	this := KalturaSearchCondition{}
	return &this
}

func (o KalturaSearchCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedKalturaSearchItem, errKalturaSearchItem := json.Marshal(o.KalturaSearchItem)
	if errKalturaSearchItem != nil {
		return []byte{}, errKalturaSearchItem
	}
	errKalturaSearchItem = json.Unmarshal([]byte(serializedKalturaSearchItem), &toSerialize)
	if errKalturaSearchItem != nil {
		return []byte{}, errKalturaSearchItem
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaSearchCondition struct {
	value *KalturaSearchCondition
	isSet bool
}

func (v NullableKalturaSearchCondition) Get() *KalturaSearchCondition {
	return v.value
}

func (v *NullableKalturaSearchCondition) Set(val *KalturaSearchCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaSearchCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaSearchCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaSearchCondition(val *KalturaSearchCondition) *NullableKalturaSearchCondition {
	return &NullableKalturaSearchCondition{value: val, isSet: true}
}

func (v NullableKalturaSearchCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaSearchCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


