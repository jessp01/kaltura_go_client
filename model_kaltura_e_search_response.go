/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaESearchResponse `abstract`
type KalturaESearchResponse struct {
	ObjectType *string `json:"objectType,omitempty"`
	// `readOnly`
	TotalCount *int32 `json:"totalCount,omitempty"`
}

// NewKalturaESearchResponse instantiates a new KalturaESearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaESearchResponse() *KalturaESearchResponse {
	this := KalturaESearchResponse{}
	return &this
}

// NewKalturaESearchResponseWithDefaults instantiates a new KalturaESearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaESearchResponseWithDefaults() *KalturaESearchResponse {
	this := KalturaESearchResponse{}
	return &this
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *KalturaESearchResponse) GetObjectType() string {
	if o == nil || o.ObjectType == nil {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchResponse) GetObjectTypeOk() (*string, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *KalturaESearchResponse) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *KalturaESearchResponse) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *KalturaESearchResponse) GetTotalCount() int32 {
	if o == nil || o.TotalCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchResponse) GetTotalCountOk() (*int32, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *KalturaESearchResponse) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *KalturaESearchResponse) SetTotalCount(v int32) {
	o.TotalCount = &v
}

func (o KalturaESearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectType != nil {
		toSerialize["objectType"] = o.ObjectType
	}
	if o.TotalCount != nil {
		toSerialize["totalCount"] = o.TotalCount
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaESearchResponse struct {
	value *KalturaESearchResponse
	isSet bool
}

func (v NullableKalturaESearchResponse) Get() *KalturaESearchResponse {
	return v.value
}

func (v *NullableKalturaESearchResponse) Set(val *KalturaESearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaESearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaESearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaESearchResponse(val *KalturaESearchResponse) *NullableKalturaESearchResponse {
	return &NullableKalturaESearchResponse{value: val, isSet: true}
}

func (v NullableKalturaESearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaESearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


