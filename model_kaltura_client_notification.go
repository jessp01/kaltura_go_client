/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaClientNotification Client notification object to hold the notification url and the data when sending client side notifications
type KalturaClientNotification struct {
	// The serialized notification data to send
	Data *string `json:"data,omitempty"`
	// The URL where the notification should be sent to
	Url *string `json:"url,omitempty"`
}

// NewKalturaClientNotification instantiates a new KalturaClientNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaClientNotification() *KalturaClientNotification {
	this := KalturaClientNotification{}
	return &this
}

// NewKalturaClientNotificationWithDefaults instantiates a new KalturaClientNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaClientNotificationWithDefaults() *KalturaClientNotification {
	this := KalturaClientNotification{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *KalturaClientNotification) GetData() string {
	if o == nil || o.Data == nil {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaClientNotification) GetDataOk() (*string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *KalturaClientNotification) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *KalturaClientNotification) SetData(v string) {
	o.Data = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *KalturaClientNotification) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaClientNotification) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *KalturaClientNotification) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *KalturaClientNotification) SetUrl(v string) {
	o.Url = &v
}

func (o KalturaClientNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaClientNotification struct {
	value *KalturaClientNotification
	isSet bool
}

func (v NullableKalturaClientNotification) Get() *KalturaClientNotification {
	return v.value
}

func (v *NullableKalturaClientNotification) Set(val *KalturaClientNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaClientNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaClientNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaClientNotification(val *KalturaClientNotification) *NullableKalturaClientNotification {
	return &NullableKalturaClientNotification{value: val, isSet: true}
}

func (v NullableKalturaClientNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaClientNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


