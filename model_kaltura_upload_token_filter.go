/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaUploadTokenFilter struct for KalturaUploadTokenFilter
type KalturaUploadTokenFilter struct {
	KalturaUploadTokenBaseFilter
}

// NewKalturaUploadTokenFilter instantiates a new KalturaUploadTokenFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaUploadTokenFilter() *KalturaUploadTokenFilter {
	this := KalturaUploadTokenFilter{}
	return &this
}

// NewKalturaUploadTokenFilterWithDefaults instantiates a new KalturaUploadTokenFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaUploadTokenFilterWithDefaults() *KalturaUploadTokenFilter {
	this := KalturaUploadTokenFilter{}
	return &this
}

func (o KalturaUploadTokenFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedKalturaUploadTokenBaseFilter, errKalturaUploadTokenBaseFilter := json.Marshal(o.KalturaUploadTokenBaseFilter)
	if errKalturaUploadTokenBaseFilter != nil {
		return []byte{}, errKalturaUploadTokenBaseFilter
	}
	errKalturaUploadTokenBaseFilter = json.Unmarshal([]byte(serializedKalturaUploadTokenBaseFilter), &toSerialize)
	if errKalturaUploadTokenBaseFilter != nil {
		return []byte{}, errKalturaUploadTokenBaseFilter
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaUploadTokenFilter struct {
	value *KalturaUploadTokenFilter
	isSet bool
}

func (v NullableKalturaUploadTokenFilter) Get() *KalturaUploadTokenFilter {
	return v.value
}

func (v *NullableKalturaUploadTokenFilter) Set(val *KalturaUploadTokenFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaUploadTokenFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaUploadTokenFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaUploadTokenFilter(val *KalturaUploadTokenFilter) *NullableKalturaUploadTokenFilter {
	return &NullableKalturaUploadTokenFilter{value: val, isSet: true}
}

func (v NullableKalturaUploadTokenFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaUploadTokenFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


