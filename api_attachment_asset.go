/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// AttachmentAssetApiService AttachmentAssetApi service
type AttachmentAssetApiService service

type ApiAttachmentAssetAddRequest struct {
	ctx context.Context
	ApiService *AttachmentAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AttachmentAssetAddRequest
}

func (r ApiAttachmentAssetAddRequest) Ks(ks string) ApiAttachmentAssetAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiAttachmentAssetAddRequest) Format(format int32) ApiAttachmentAssetAddRequest {
	r.format = &format
	return r
}

func (r ApiAttachmentAssetAddRequest) ClientTag(clientTag string) ApiAttachmentAssetAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiAttachmentAssetAddRequest) PartnerId(partnerId int32) ApiAttachmentAssetAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiAttachmentAssetAddRequest) Body(body AttachmentAssetAddRequest) ApiAttachmentAssetAddRequest {
	r.body = &body
	return r
}

func (r ApiAttachmentAssetAddRequest) Execute() (*KalturaAttachmentAsset, *http.Response, error) {
	return r.ApiService.AttachmentAssetAddExecute(r)
}

/*
AttachmentAssetAdd Method for AttachmentAssetAdd

Add attachment asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAttachmentAssetAddRequest
*/
func (a *AttachmentAssetApiService) AttachmentAssetAdd(ctx context.Context) ApiAttachmentAssetAddRequest {
	return ApiAttachmentAssetAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaAttachmentAsset
func (a *AttachmentAssetApiService) AttachmentAssetAddExecute(r ApiAttachmentAssetAddRequest) (*KalturaAttachmentAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaAttachmentAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentAssetApiService.AttachmentAssetAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/attachment_attachmentasset/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAttachmentAssetDeleteRequest struct {
	ctx context.Context
	ApiService *AttachmentAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AttachmentAssetDeleteRequest
}

func (r ApiAttachmentAssetDeleteRequest) Ks(ks string) ApiAttachmentAssetDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiAttachmentAssetDeleteRequest) Format(format int32) ApiAttachmentAssetDeleteRequest {
	r.format = &format
	return r
}

func (r ApiAttachmentAssetDeleteRequest) ClientTag(clientTag string) ApiAttachmentAssetDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiAttachmentAssetDeleteRequest) PartnerId(partnerId int32) ApiAttachmentAssetDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiAttachmentAssetDeleteRequest) Body(body AttachmentAssetDeleteRequest) ApiAttachmentAssetDeleteRequest {
	r.body = &body
	return r
}

func (r ApiAttachmentAssetDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AttachmentAssetDeleteExecute(r)
}

/*
AttachmentAssetDelete Method for AttachmentAssetDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAttachmentAssetDeleteRequest
*/
func (a *AttachmentAssetApiService) AttachmentAssetDelete(ctx context.Context) ApiAttachmentAssetDeleteRequest {
	return ApiAttachmentAssetDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AttachmentAssetApiService) AttachmentAssetDeleteExecute(r ApiAttachmentAssetDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentAssetApiService.AttachmentAssetDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/attachment_attachmentasset/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAttachmentAssetGetRequest struct {
	ctx context.Context
	ApiService *AttachmentAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AttachmentAssetDeleteRequest
}

func (r ApiAttachmentAssetGetRequest) Ks(ks string) ApiAttachmentAssetGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiAttachmentAssetGetRequest) Format(format int32) ApiAttachmentAssetGetRequest {
	r.format = &format
	return r
}

func (r ApiAttachmentAssetGetRequest) ClientTag(clientTag string) ApiAttachmentAssetGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiAttachmentAssetGetRequest) PartnerId(partnerId int32) ApiAttachmentAssetGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiAttachmentAssetGetRequest) Body(body AttachmentAssetDeleteRequest) ApiAttachmentAssetGetRequest {
	r.body = &body
	return r
}

func (r ApiAttachmentAssetGetRequest) Execute() (*KalturaAttachmentAsset, *http.Response, error) {
	return r.ApiService.AttachmentAssetGetExecute(r)
}

/*
AttachmentAssetGet Method for AttachmentAssetGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAttachmentAssetGetRequest
*/
func (a *AttachmentAssetApiService) AttachmentAssetGet(ctx context.Context) ApiAttachmentAssetGetRequest {
	return ApiAttachmentAssetGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaAttachmentAsset
func (a *AttachmentAssetApiService) AttachmentAssetGetExecute(r ApiAttachmentAssetGetRequest) (*KalturaAttachmentAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaAttachmentAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentAssetApiService.AttachmentAssetGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/attachment_attachmentasset/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAttachmentAssetGetRemotePathsRequest struct {
	ctx context.Context
	ApiService *AttachmentAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AnnotationDeleteRequest
}

func (r ApiAttachmentAssetGetRemotePathsRequest) Ks(ks string) ApiAttachmentAssetGetRemotePathsRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiAttachmentAssetGetRemotePathsRequest) Format(format int32) ApiAttachmentAssetGetRemotePathsRequest {
	r.format = &format
	return r
}

func (r ApiAttachmentAssetGetRemotePathsRequest) ClientTag(clientTag string) ApiAttachmentAssetGetRemotePathsRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiAttachmentAssetGetRemotePathsRequest) PartnerId(partnerId int32) ApiAttachmentAssetGetRemotePathsRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiAttachmentAssetGetRemotePathsRequest) Body(body AnnotationDeleteRequest) ApiAttachmentAssetGetRemotePathsRequest {
	r.body = &body
	return r
}

func (r ApiAttachmentAssetGetRemotePathsRequest) Execute() (*KalturaRemotePathListResponse, *http.Response, error) {
	return r.ApiService.AttachmentAssetGetRemotePathsExecute(r)
}

/*
AttachmentAssetGetRemotePaths Method for AttachmentAssetGetRemotePaths

Get remote storage existing paths for the asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAttachmentAssetGetRemotePathsRequest
*/
func (a *AttachmentAssetApiService) AttachmentAssetGetRemotePaths(ctx context.Context) ApiAttachmentAssetGetRemotePathsRequest {
	return ApiAttachmentAssetGetRemotePathsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaRemotePathListResponse
func (a *AttachmentAssetApiService) AttachmentAssetGetRemotePathsExecute(r ApiAttachmentAssetGetRemotePathsRequest) (*KalturaRemotePathListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaRemotePathListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentAssetApiService.AttachmentAssetGetRemotePaths")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/attachment_attachmentasset/action/getRemotePaths"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAttachmentAssetGetUrlRequest struct {
	ctx context.Context
	ApiService *AttachmentAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AttachmentAssetGetUrlRequest
}

func (r ApiAttachmentAssetGetUrlRequest) Ks(ks string) ApiAttachmentAssetGetUrlRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiAttachmentAssetGetUrlRequest) Format(format int32) ApiAttachmentAssetGetUrlRequest {
	r.format = &format
	return r
}

func (r ApiAttachmentAssetGetUrlRequest) ClientTag(clientTag string) ApiAttachmentAssetGetUrlRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiAttachmentAssetGetUrlRequest) PartnerId(partnerId int32) ApiAttachmentAssetGetUrlRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiAttachmentAssetGetUrlRequest) Body(body AttachmentAssetGetUrlRequest) ApiAttachmentAssetGetUrlRequest {
	r.body = &body
	return r
}

func (r ApiAttachmentAssetGetUrlRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.AttachmentAssetGetUrlExecute(r)
}

/*
AttachmentAssetGetUrl Method for AttachmentAssetGetUrl

Get download URL for the asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAttachmentAssetGetUrlRequest
*/
func (a *AttachmentAssetApiService) AttachmentAssetGetUrl(ctx context.Context) ApiAttachmentAssetGetUrlRequest {
	return ApiAttachmentAssetGetUrlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *AttachmentAssetApiService) AttachmentAssetGetUrlExecute(r ApiAttachmentAssetGetUrlRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentAssetApiService.AttachmentAssetGetUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/attachment_attachmentasset/action/getUrl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAttachmentAssetListRequest struct {
	ctx context.Context
	ApiService *AttachmentAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AttachmentAssetListRequest
}

func (r ApiAttachmentAssetListRequest) Ks(ks string) ApiAttachmentAssetListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiAttachmentAssetListRequest) Format(format int32) ApiAttachmentAssetListRequest {
	r.format = &format
	return r
}

func (r ApiAttachmentAssetListRequest) ClientTag(clientTag string) ApiAttachmentAssetListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiAttachmentAssetListRequest) PartnerId(partnerId int32) ApiAttachmentAssetListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiAttachmentAssetListRequest) Body(body AttachmentAssetListRequest) ApiAttachmentAssetListRequest {
	r.body = &body
	return r
}

func (r ApiAttachmentAssetListRequest) Execute() (*KalturaAttachmentAssetListResponse, *http.Response, error) {
	return r.ApiService.AttachmentAssetListExecute(r)
}

/*
AttachmentAssetList Method for AttachmentAssetList

List attachment Assets by filter and pager

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAttachmentAssetListRequest
*/
func (a *AttachmentAssetApiService) AttachmentAssetList(ctx context.Context) ApiAttachmentAssetListRequest {
	return ApiAttachmentAssetListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaAttachmentAssetListResponse
func (a *AttachmentAssetApiService) AttachmentAssetListExecute(r ApiAttachmentAssetListRequest) (*KalturaAttachmentAssetListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaAttachmentAssetListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentAssetApiService.AttachmentAssetList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/attachment_attachmentasset/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAttachmentAssetServeRequest struct {
	ctx context.Context
	ApiService *AttachmentAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AttachmentAssetServeRequest
}

func (r ApiAttachmentAssetServeRequest) Ks(ks string) ApiAttachmentAssetServeRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiAttachmentAssetServeRequest) Format(format int32) ApiAttachmentAssetServeRequest {
	r.format = &format
	return r
}

func (r ApiAttachmentAssetServeRequest) ClientTag(clientTag string) ApiAttachmentAssetServeRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiAttachmentAssetServeRequest) PartnerId(partnerId int32) ApiAttachmentAssetServeRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiAttachmentAssetServeRequest) Body(body AttachmentAssetServeRequest) ApiAttachmentAssetServeRequest {
	r.body = &body
	return r
}

func (r ApiAttachmentAssetServeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.AttachmentAssetServeExecute(r)
}

/*
AttachmentAssetServe Method for AttachmentAssetServe

Serves attachment by its id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAttachmentAssetServeRequest
*/
func (a *AttachmentAssetApiService) AttachmentAssetServe(ctx context.Context) ApiAttachmentAssetServeRequest {
	return ApiAttachmentAssetServeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *AttachmentAssetApiService) AttachmentAssetServeExecute(r ApiAttachmentAssetServeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentAssetApiService.AttachmentAssetServe")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/attachment_attachmentasset/action/serve"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAttachmentAssetSetContentRequest struct {
	ctx context.Context
	ApiService *AttachmentAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AttachmentAssetSetContentRequest
}

func (r ApiAttachmentAssetSetContentRequest) Ks(ks string) ApiAttachmentAssetSetContentRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiAttachmentAssetSetContentRequest) Format(format int32) ApiAttachmentAssetSetContentRequest {
	r.format = &format
	return r
}

func (r ApiAttachmentAssetSetContentRequest) ClientTag(clientTag string) ApiAttachmentAssetSetContentRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiAttachmentAssetSetContentRequest) PartnerId(partnerId int32) ApiAttachmentAssetSetContentRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiAttachmentAssetSetContentRequest) Body(body AttachmentAssetSetContentRequest) ApiAttachmentAssetSetContentRequest {
	r.body = &body
	return r
}

func (r ApiAttachmentAssetSetContentRequest) Execute() (*KalturaAttachmentAsset, *http.Response, error) {
	return r.ApiService.AttachmentAssetSetContentExecute(r)
}

/*
AttachmentAssetSetContent Method for AttachmentAssetSetContent

Update content of attachment asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAttachmentAssetSetContentRequest
*/
func (a *AttachmentAssetApiService) AttachmentAssetSetContent(ctx context.Context) ApiAttachmentAssetSetContentRequest {
	return ApiAttachmentAssetSetContentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaAttachmentAsset
func (a *AttachmentAssetApiService) AttachmentAssetSetContentExecute(r ApiAttachmentAssetSetContentRequest) (*KalturaAttachmentAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaAttachmentAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentAssetApiService.AttachmentAssetSetContent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/attachment_attachmentasset/action/setContent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAttachmentAssetUpdateRequest struct {
	ctx context.Context
	ApiService *AttachmentAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AttachmentAssetUpdateRequest
}

func (r ApiAttachmentAssetUpdateRequest) Ks(ks string) ApiAttachmentAssetUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiAttachmentAssetUpdateRequest) Format(format int32) ApiAttachmentAssetUpdateRequest {
	r.format = &format
	return r
}

func (r ApiAttachmentAssetUpdateRequest) ClientTag(clientTag string) ApiAttachmentAssetUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiAttachmentAssetUpdateRequest) PartnerId(partnerId int32) ApiAttachmentAssetUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiAttachmentAssetUpdateRequest) Body(body AttachmentAssetUpdateRequest) ApiAttachmentAssetUpdateRequest {
	r.body = &body
	return r
}

func (r ApiAttachmentAssetUpdateRequest) Execute() (*KalturaAttachmentAsset, *http.Response, error) {
	return r.ApiService.AttachmentAssetUpdateExecute(r)
}

/*
AttachmentAssetUpdate Method for AttachmentAssetUpdate

Update attachment asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAttachmentAssetUpdateRequest
*/
func (a *AttachmentAssetApiService) AttachmentAssetUpdate(ctx context.Context) ApiAttachmentAssetUpdateRequest {
	return ApiAttachmentAssetUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaAttachmentAsset
func (a *AttachmentAssetApiService) AttachmentAssetUpdateExecute(r ApiAttachmentAssetUpdateRequest) (*KalturaAttachmentAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaAttachmentAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AttachmentAssetApiService.AttachmentAssetUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/attachment_attachmentasset/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
