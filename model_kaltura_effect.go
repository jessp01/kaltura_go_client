/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaEffect Effects attributes
type KalturaEffect struct {
	// Enum Type: `KalturaEffectType`
	EffectType *int32 `json:"effectType,omitempty"`
	// value
	Value *string `json:"value,omitempty"`
}

// NewKalturaEffect instantiates a new KalturaEffect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaEffect() *KalturaEffect {
	this := KalturaEffect{}
	return &this
}

// NewKalturaEffectWithDefaults instantiates a new KalturaEffect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaEffectWithDefaults() *KalturaEffect {
	this := KalturaEffect{}
	return &this
}

// GetEffectType returns the EffectType field value if set, zero value otherwise.
func (o *KalturaEffect) GetEffectType() int32 {
	if o == nil || o.EffectType == nil {
		var ret int32
		return ret
	}
	return *o.EffectType
}

// GetEffectTypeOk returns a tuple with the EffectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaEffect) GetEffectTypeOk() (*int32, bool) {
	if o == nil || o.EffectType == nil {
		return nil, false
	}
	return o.EffectType, true
}

// HasEffectType returns a boolean if a field has been set.
func (o *KalturaEffect) HasEffectType() bool {
	if o != nil && o.EffectType != nil {
		return true
	}

	return false
}

// SetEffectType gets a reference to the given int32 and assigns it to the EffectType field.
func (o *KalturaEffect) SetEffectType(v int32) {
	o.EffectType = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *KalturaEffect) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaEffect) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *KalturaEffect) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *KalturaEffect) SetValue(v string) {
	o.Value = &v
}

func (o KalturaEffect) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EffectType != nil {
		toSerialize["effectType"] = o.EffectType
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaEffect struct {
	value *KalturaEffect
	isSet bool
}

func (v NullableKalturaEffect) Get() *KalturaEffect {
	return v.value
}

func (v *NullableKalturaEffect) Set(val *KalturaEffect) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaEffect) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaEffect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaEffect(val *KalturaEffect) *NullableKalturaEffect {
	return &NullableKalturaEffect{value: val, isSet: true}
}

func (v NullableKalturaEffect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaEffect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


