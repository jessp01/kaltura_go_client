/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// StorageProfileApiService StorageProfileApi service
type StorageProfileApiService service

type ApiStorageProfileAddRequest struct {
	ctx context.Context
	ApiService *StorageProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *StorageProfileAddRequest
}

func (r ApiStorageProfileAddRequest) Ks(ks string) ApiStorageProfileAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiStorageProfileAddRequest) Format(format int32) ApiStorageProfileAddRequest {
	r.format = &format
	return r
}

func (r ApiStorageProfileAddRequest) ClientTag(clientTag string) ApiStorageProfileAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiStorageProfileAddRequest) PartnerId(partnerId int32) ApiStorageProfileAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiStorageProfileAddRequest) Body(body StorageProfileAddRequest) ApiStorageProfileAddRequest {
	r.body = &body
	return r
}

func (r ApiStorageProfileAddRequest) Execute() (*KalturaStorageProfile, *http.Response, error) {
	return r.ApiService.StorageProfileAddExecute(r)
}

/*
StorageProfileAdd Method for StorageProfileAdd

Adds a storage profile to the Kaltura DB.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiStorageProfileAddRequest
*/
func (a *StorageProfileApiService) StorageProfileAdd(ctx context.Context) ApiStorageProfileAddRequest {
	return ApiStorageProfileAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaStorageProfile
func (a *StorageProfileApiService) StorageProfileAddExecute(r ApiStorageProfileAddRequest) (*KalturaStorageProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaStorageProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageProfileApiService.StorageProfileAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/storageprofile/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStorageProfileGetRequest struct {
	ctx context.Context
	ApiService *StorageProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *StorageProfileGetRequest
}

func (r ApiStorageProfileGetRequest) Ks(ks string) ApiStorageProfileGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiStorageProfileGetRequest) Format(format int32) ApiStorageProfileGetRequest {
	r.format = &format
	return r
}

func (r ApiStorageProfileGetRequest) ClientTag(clientTag string) ApiStorageProfileGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiStorageProfileGetRequest) PartnerId(partnerId int32) ApiStorageProfileGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiStorageProfileGetRequest) Body(body StorageProfileGetRequest) ApiStorageProfileGetRequest {
	r.body = &body
	return r
}

func (r ApiStorageProfileGetRequest) Execute() (*KalturaStorageProfile, *http.Response, error) {
	return r.ApiService.StorageProfileGetExecute(r)
}

/*
StorageProfileGet Method for StorageProfileGet

Get storage profile by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiStorageProfileGetRequest
*/
func (a *StorageProfileApiService) StorageProfileGet(ctx context.Context) ApiStorageProfileGetRequest {
	return ApiStorageProfileGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaStorageProfile
func (a *StorageProfileApiService) StorageProfileGetExecute(r ApiStorageProfileGetRequest) (*KalturaStorageProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaStorageProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageProfileApiService.StorageProfileGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/storageprofile/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStorageProfileListRequest struct {
	ctx context.Context
	ApiService *StorageProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *StorageProfileListRequest
}

func (r ApiStorageProfileListRequest) Ks(ks string) ApiStorageProfileListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiStorageProfileListRequest) Format(format int32) ApiStorageProfileListRequest {
	r.format = &format
	return r
}

func (r ApiStorageProfileListRequest) ClientTag(clientTag string) ApiStorageProfileListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiStorageProfileListRequest) PartnerId(partnerId int32) ApiStorageProfileListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiStorageProfileListRequest) Body(body StorageProfileListRequest) ApiStorageProfileListRequest {
	r.body = &body
	return r
}

func (r ApiStorageProfileListRequest) Execute() (*KalturaStorageProfileListResponse, *http.Response, error) {
	return r.ApiService.StorageProfileListExecute(r)
}

/*
StorageProfileList Method for StorageProfileList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiStorageProfileListRequest
*/
func (a *StorageProfileApiService) StorageProfileList(ctx context.Context) ApiStorageProfileListRequest {
	return ApiStorageProfileListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaStorageProfileListResponse
func (a *StorageProfileApiService) StorageProfileListExecute(r ApiStorageProfileListRequest) (*KalturaStorageProfileListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaStorageProfileListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageProfileApiService.StorageProfileList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/storageprofile/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStorageProfileLockPendingFileSyncsRequest struct {
	ctx context.Context
	ApiService *StorageProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *StorageProfileLockPendingFileSyncsRequest
}

func (r ApiStorageProfileLockPendingFileSyncsRequest) Ks(ks string) ApiStorageProfileLockPendingFileSyncsRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiStorageProfileLockPendingFileSyncsRequest) Format(format int32) ApiStorageProfileLockPendingFileSyncsRequest {
	r.format = &format
	return r
}

func (r ApiStorageProfileLockPendingFileSyncsRequest) ClientTag(clientTag string) ApiStorageProfileLockPendingFileSyncsRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiStorageProfileLockPendingFileSyncsRequest) PartnerId(partnerId int32) ApiStorageProfileLockPendingFileSyncsRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiStorageProfileLockPendingFileSyncsRequest) Body(body StorageProfileLockPendingFileSyncsRequest) ApiStorageProfileLockPendingFileSyncsRequest {
	r.body = &body
	return r
}

func (r ApiStorageProfileLockPendingFileSyncsRequest) Execute() (*KalturaLockFileSyncsResponse, *http.Response, error) {
	return r.ApiService.StorageProfileLockPendingFileSyncsExecute(r)
}

/*
StorageProfileLockPendingFileSyncs Method for StorageProfileLockPendingFileSyncs

storage profile lockPendingFileSyncs action locks file syncs for export by the file sync periodic worker

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiStorageProfileLockPendingFileSyncsRequest
*/
func (a *StorageProfileApiService) StorageProfileLockPendingFileSyncs(ctx context.Context) ApiStorageProfileLockPendingFileSyncsRequest {
	return ApiStorageProfileLockPendingFileSyncsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaLockFileSyncsResponse
func (a *StorageProfileApiService) StorageProfileLockPendingFileSyncsExecute(r ApiStorageProfileLockPendingFileSyncsRequest) (*KalturaLockFileSyncsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaLockFileSyncsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageProfileApiService.StorageProfileLockPendingFileSyncs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/storageprofile/action/lockPendingFileSyncs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStorageProfileUpdateRequest struct {
	ctx context.Context
	ApiService *StorageProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *StorageProfileUpdateRequest
}

func (r ApiStorageProfileUpdateRequest) Ks(ks string) ApiStorageProfileUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiStorageProfileUpdateRequest) Format(format int32) ApiStorageProfileUpdateRequest {
	r.format = &format
	return r
}

func (r ApiStorageProfileUpdateRequest) ClientTag(clientTag string) ApiStorageProfileUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiStorageProfileUpdateRequest) PartnerId(partnerId int32) ApiStorageProfileUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiStorageProfileUpdateRequest) Body(body StorageProfileUpdateRequest) ApiStorageProfileUpdateRequest {
	r.body = &body
	return r
}

func (r ApiStorageProfileUpdateRequest) Execute() (*KalturaStorageProfile, *http.Response, error) {
	return r.ApiService.StorageProfileUpdateExecute(r)
}

/*
StorageProfileUpdate Method for StorageProfileUpdate

Update storage profile by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiStorageProfileUpdateRequest
*/
func (a *StorageProfileApiService) StorageProfileUpdate(ctx context.Context) ApiStorageProfileUpdateRequest {
	return ApiStorageProfileUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaStorageProfile
func (a *StorageProfileApiService) StorageProfileUpdateExecute(r ApiStorageProfileUpdateRequest) (*KalturaStorageProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaStorageProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageProfileApiService.StorageProfileUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/storageprofile/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStorageProfileUpdateStatusRequest struct {
	ctx context.Context
	ApiService *StorageProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *StorageProfileUpdateStatusRequest
}

func (r ApiStorageProfileUpdateStatusRequest) Ks(ks string) ApiStorageProfileUpdateStatusRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiStorageProfileUpdateStatusRequest) Format(format int32) ApiStorageProfileUpdateStatusRequest {
	r.format = &format
	return r
}

func (r ApiStorageProfileUpdateStatusRequest) ClientTag(clientTag string) ApiStorageProfileUpdateStatusRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiStorageProfileUpdateStatusRequest) PartnerId(partnerId int32) ApiStorageProfileUpdateStatusRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiStorageProfileUpdateStatusRequest) Body(body StorageProfileUpdateStatusRequest) ApiStorageProfileUpdateStatusRequest {
	r.body = &body
	return r
}

func (r ApiStorageProfileUpdateStatusRequest) Execute() (*http.Response, error) {
	return r.ApiService.StorageProfileUpdateStatusExecute(r)
}

/*
StorageProfileUpdateStatus Method for StorageProfileUpdateStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiStorageProfileUpdateStatusRequest
*/
func (a *StorageProfileApiService) StorageProfileUpdateStatus(ctx context.Context) ApiStorageProfileUpdateStatusRequest {
	return ApiStorageProfileUpdateStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *StorageProfileApiService) StorageProfileUpdateStatusExecute(r ApiStorageProfileUpdateStatusRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageProfileApiService.StorageProfileUpdateStatus")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/storageprofile/action/updateStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
