/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// ScheduledTaskProfileApiService ScheduledTaskProfileApi service
type ScheduledTaskProfileApiService service

type ApiScheduledTaskProfileAddRequest struct {
	ctx context.Context
	ApiService *ScheduledTaskProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ScheduledTaskProfileAddRequest
}

func (r ApiScheduledTaskProfileAddRequest) Ks(ks string) ApiScheduledTaskProfileAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiScheduledTaskProfileAddRequest) Format(format int32) ApiScheduledTaskProfileAddRequest {
	r.format = &format
	return r
}

func (r ApiScheduledTaskProfileAddRequest) ClientTag(clientTag string) ApiScheduledTaskProfileAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiScheduledTaskProfileAddRequest) PartnerId(partnerId int32) ApiScheduledTaskProfileAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiScheduledTaskProfileAddRequest) Body(body ScheduledTaskProfileAddRequest) ApiScheduledTaskProfileAddRequest {
	r.body = &body
	return r
}

func (r ApiScheduledTaskProfileAddRequest) Execute() (*KalturaScheduledTaskProfile, *http.Response, error) {
	return r.ApiService.ScheduledTaskProfileAddExecute(r)
}

/*
ScheduledTaskProfileAdd Method for ScheduledTaskProfileAdd

Add a new scheduled task profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScheduledTaskProfileAddRequest
*/
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileAdd(ctx context.Context) ApiScheduledTaskProfileAddRequest {
	return ApiScheduledTaskProfileAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaScheduledTaskProfile
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileAddExecute(r ApiScheduledTaskProfileAddRequest) (*KalturaScheduledTaskProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaScheduledTaskProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduledTaskProfileApiService.ScheduledTaskProfileAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/scheduledtask_scheduledtaskprofile/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScheduledTaskProfileDeleteRequest struct {
	ctx context.Context
	ApiService *ScheduledTaskProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiScheduledTaskProfileDeleteRequest) Ks(ks string) ApiScheduledTaskProfileDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiScheduledTaskProfileDeleteRequest) Format(format int32) ApiScheduledTaskProfileDeleteRequest {
	r.format = &format
	return r
}

func (r ApiScheduledTaskProfileDeleteRequest) ClientTag(clientTag string) ApiScheduledTaskProfileDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiScheduledTaskProfileDeleteRequest) PartnerId(partnerId int32) ApiScheduledTaskProfileDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiScheduledTaskProfileDeleteRequest) Body(body AccessControlDeleteRequest) ApiScheduledTaskProfileDeleteRequest {
	r.body = &body
	return r
}

func (r ApiScheduledTaskProfileDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ScheduledTaskProfileDeleteExecute(r)
}

/*
ScheduledTaskProfileDelete Method for ScheduledTaskProfileDelete

Delete a scheduled task profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScheduledTaskProfileDeleteRequest
*/
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileDelete(ctx context.Context) ApiScheduledTaskProfileDeleteRequest {
	return ApiScheduledTaskProfileDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileDeleteExecute(r ApiScheduledTaskProfileDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduledTaskProfileApiService.ScheduledTaskProfileDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/scheduledtask_scheduledtaskprofile/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiScheduledTaskProfileGetRequest struct {
	ctx context.Context
	ApiService *ScheduledTaskProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiScheduledTaskProfileGetRequest) Ks(ks string) ApiScheduledTaskProfileGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiScheduledTaskProfileGetRequest) Format(format int32) ApiScheduledTaskProfileGetRequest {
	r.format = &format
	return r
}

func (r ApiScheduledTaskProfileGetRequest) ClientTag(clientTag string) ApiScheduledTaskProfileGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiScheduledTaskProfileGetRequest) PartnerId(partnerId int32) ApiScheduledTaskProfileGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiScheduledTaskProfileGetRequest) Body(body AccessControlDeleteRequest) ApiScheduledTaskProfileGetRequest {
	r.body = &body
	return r
}

func (r ApiScheduledTaskProfileGetRequest) Execute() (*KalturaScheduledTaskProfile, *http.Response, error) {
	return r.ApiService.ScheduledTaskProfileGetExecute(r)
}

/*
ScheduledTaskProfileGet Method for ScheduledTaskProfileGet

Retrieve a scheduled task profile by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScheduledTaskProfileGetRequest
*/
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileGet(ctx context.Context) ApiScheduledTaskProfileGetRequest {
	return ApiScheduledTaskProfileGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaScheduledTaskProfile
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileGetExecute(r ApiScheduledTaskProfileGetRequest) (*KalturaScheduledTaskProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaScheduledTaskProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduledTaskProfileApiService.ScheduledTaskProfileGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/scheduledtask_scheduledtaskprofile/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScheduledTaskProfileGetDryRunResultsRequest struct {
	ctx context.Context
	ApiService *ScheduledTaskProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ScheduledTaskProfileGetDryRunResultsRequest
}

func (r ApiScheduledTaskProfileGetDryRunResultsRequest) Ks(ks string) ApiScheduledTaskProfileGetDryRunResultsRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiScheduledTaskProfileGetDryRunResultsRequest) Format(format int32) ApiScheduledTaskProfileGetDryRunResultsRequest {
	r.format = &format
	return r
}

func (r ApiScheduledTaskProfileGetDryRunResultsRequest) ClientTag(clientTag string) ApiScheduledTaskProfileGetDryRunResultsRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiScheduledTaskProfileGetDryRunResultsRequest) PartnerId(partnerId int32) ApiScheduledTaskProfileGetDryRunResultsRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiScheduledTaskProfileGetDryRunResultsRequest) Body(body ScheduledTaskProfileGetDryRunResultsRequest) ApiScheduledTaskProfileGetDryRunResultsRequest {
	r.body = &body
	return r
}

func (r ApiScheduledTaskProfileGetDryRunResultsRequest) Execute() (*KalturaObjectListResponse, *http.Response, error) {
	return r.ApiService.ScheduledTaskProfileGetDryRunResultsExecute(r)
}

/*
ScheduledTaskProfileGetDryRunResults Method for ScheduledTaskProfileGetDryRunResults

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScheduledTaskProfileGetDryRunResultsRequest
*/
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileGetDryRunResults(ctx context.Context) ApiScheduledTaskProfileGetDryRunResultsRequest {
	return ApiScheduledTaskProfileGetDryRunResultsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaObjectListResponse
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileGetDryRunResultsExecute(r ApiScheduledTaskProfileGetDryRunResultsRequest) (*KalturaObjectListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaObjectListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduledTaskProfileApiService.ScheduledTaskProfileGetDryRunResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/scheduledtask_scheduledtaskprofile/action/getDryRunResults"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScheduledTaskProfileListRequest struct {
	ctx context.Context
	ApiService *ScheduledTaskProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ScheduledTaskProfileListRequest
}

func (r ApiScheduledTaskProfileListRequest) Ks(ks string) ApiScheduledTaskProfileListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiScheduledTaskProfileListRequest) Format(format int32) ApiScheduledTaskProfileListRequest {
	r.format = &format
	return r
}

func (r ApiScheduledTaskProfileListRequest) ClientTag(clientTag string) ApiScheduledTaskProfileListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiScheduledTaskProfileListRequest) PartnerId(partnerId int32) ApiScheduledTaskProfileListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiScheduledTaskProfileListRequest) Body(body ScheduledTaskProfileListRequest) ApiScheduledTaskProfileListRequest {
	r.body = &body
	return r
}

func (r ApiScheduledTaskProfileListRequest) Execute() (*KalturaScheduledTaskProfileListResponse, *http.Response, error) {
	return r.ApiService.ScheduledTaskProfileListExecute(r)
}

/*
ScheduledTaskProfileList Method for ScheduledTaskProfileList

List scheduled task profiles

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScheduledTaskProfileListRequest
*/
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileList(ctx context.Context) ApiScheduledTaskProfileListRequest {
	return ApiScheduledTaskProfileListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaScheduledTaskProfileListResponse
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileListExecute(r ApiScheduledTaskProfileListRequest) (*KalturaScheduledTaskProfileListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaScheduledTaskProfileListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduledTaskProfileApiService.ScheduledTaskProfileList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/scheduledtask_scheduledtaskprofile/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScheduledTaskProfileRequestDryRunRequest struct {
	ctx context.Context
	ApiService *ScheduledTaskProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ScheduledTaskProfileRequestDryRunRequest
}

func (r ApiScheduledTaskProfileRequestDryRunRequest) Ks(ks string) ApiScheduledTaskProfileRequestDryRunRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiScheduledTaskProfileRequestDryRunRequest) Format(format int32) ApiScheduledTaskProfileRequestDryRunRequest {
	r.format = &format
	return r
}

func (r ApiScheduledTaskProfileRequestDryRunRequest) ClientTag(clientTag string) ApiScheduledTaskProfileRequestDryRunRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiScheduledTaskProfileRequestDryRunRequest) PartnerId(partnerId int32) ApiScheduledTaskProfileRequestDryRunRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiScheduledTaskProfileRequestDryRunRequest) Body(body ScheduledTaskProfileRequestDryRunRequest) ApiScheduledTaskProfileRequestDryRunRequest {
	r.body = &body
	return r
}

func (r ApiScheduledTaskProfileRequestDryRunRequest) Execute() (int32, *http.Response, error) {
	return r.ApiService.ScheduledTaskProfileRequestDryRunExecute(r)
}

/*
ScheduledTaskProfileRequestDryRun Method for ScheduledTaskProfileRequestDryRun

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScheduledTaskProfileRequestDryRunRequest
*/
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileRequestDryRun(ctx context.Context) ApiScheduledTaskProfileRequestDryRunRequest {
	return ApiScheduledTaskProfileRequestDryRunRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return int32
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileRequestDryRunExecute(r ApiScheduledTaskProfileRequestDryRunRequest) (int32, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduledTaskProfileApiService.ScheduledTaskProfileRequestDryRun")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/scheduledtask_scheduledtaskprofile/action/requestDryRun"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScheduledTaskProfileServeDryRunResultsRequest struct {
	ctx context.Context
	ApiService *ScheduledTaskProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ScheduledTaskProfileGetDryRunResultsRequest
}

func (r ApiScheduledTaskProfileServeDryRunResultsRequest) Ks(ks string) ApiScheduledTaskProfileServeDryRunResultsRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiScheduledTaskProfileServeDryRunResultsRequest) Format(format int32) ApiScheduledTaskProfileServeDryRunResultsRequest {
	r.format = &format
	return r
}

func (r ApiScheduledTaskProfileServeDryRunResultsRequest) ClientTag(clientTag string) ApiScheduledTaskProfileServeDryRunResultsRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiScheduledTaskProfileServeDryRunResultsRequest) PartnerId(partnerId int32) ApiScheduledTaskProfileServeDryRunResultsRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiScheduledTaskProfileServeDryRunResultsRequest) Body(body ScheduledTaskProfileGetDryRunResultsRequest) ApiScheduledTaskProfileServeDryRunResultsRequest {
	r.body = &body
	return r
}

func (r ApiScheduledTaskProfileServeDryRunResultsRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ScheduledTaskProfileServeDryRunResultsExecute(r)
}

/*
ScheduledTaskProfileServeDryRunResults Method for ScheduledTaskProfileServeDryRunResults

Serves dry run results by its request id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScheduledTaskProfileServeDryRunResultsRequest
*/
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileServeDryRunResults(ctx context.Context) ApiScheduledTaskProfileServeDryRunResultsRequest {
	return ApiScheduledTaskProfileServeDryRunResultsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileServeDryRunResultsExecute(r ApiScheduledTaskProfileServeDryRunResultsRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduledTaskProfileApiService.ScheduledTaskProfileServeDryRunResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/scheduledtask_scheduledtaskprofile/action/serveDryRunResults"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScheduledTaskProfileUpdateRequest struct {
	ctx context.Context
	ApiService *ScheduledTaskProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ScheduledTaskProfileUpdateRequest
}

func (r ApiScheduledTaskProfileUpdateRequest) Ks(ks string) ApiScheduledTaskProfileUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiScheduledTaskProfileUpdateRequest) Format(format int32) ApiScheduledTaskProfileUpdateRequest {
	r.format = &format
	return r
}

func (r ApiScheduledTaskProfileUpdateRequest) ClientTag(clientTag string) ApiScheduledTaskProfileUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiScheduledTaskProfileUpdateRequest) PartnerId(partnerId int32) ApiScheduledTaskProfileUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiScheduledTaskProfileUpdateRequest) Body(body ScheduledTaskProfileUpdateRequest) ApiScheduledTaskProfileUpdateRequest {
	r.body = &body
	return r
}

func (r ApiScheduledTaskProfileUpdateRequest) Execute() (*KalturaScheduledTaskProfile, *http.Response, error) {
	return r.ApiService.ScheduledTaskProfileUpdateExecute(r)
}

/*
ScheduledTaskProfileUpdate Method for ScheduledTaskProfileUpdate

Update an existing scheduled task profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScheduledTaskProfileUpdateRequest
*/
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileUpdate(ctx context.Context) ApiScheduledTaskProfileUpdateRequest {
	return ApiScheduledTaskProfileUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaScheduledTaskProfile
func (a *ScheduledTaskProfileApiService) ScheduledTaskProfileUpdateExecute(r ApiScheduledTaskProfileUpdateRequest) (*KalturaScheduledTaskProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaScheduledTaskProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduledTaskProfileApiService.ScheduledTaskProfileUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/scheduledtask_scheduledtaskprofile/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
