/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SharepointExtensionIsVersionSupportedRequest struct for SharepointExtensionIsVersionSupportedRequest
type SharepointExtensionIsVersionSupportedRequest struct {
	ServerBuild int32 `json:"serverBuild"`
	ServerMajor int32 `json:"serverMajor"`
	ServerMinor int32 `json:"serverMinor"`
}

// NewSharepointExtensionIsVersionSupportedRequest instantiates a new SharepointExtensionIsVersionSupportedRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharepointExtensionIsVersionSupportedRequest(serverBuild int32, serverMajor int32, serverMinor int32) *SharepointExtensionIsVersionSupportedRequest {
	this := SharepointExtensionIsVersionSupportedRequest{}
	this.ServerBuild = serverBuild
	this.ServerMajor = serverMajor
	this.ServerMinor = serverMinor
	return &this
}

// NewSharepointExtensionIsVersionSupportedRequestWithDefaults instantiates a new SharepointExtensionIsVersionSupportedRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharepointExtensionIsVersionSupportedRequestWithDefaults() *SharepointExtensionIsVersionSupportedRequest {
	this := SharepointExtensionIsVersionSupportedRequest{}
	return &this
}

// GetServerBuild returns the ServerBuild field value
func (o *SharepointExtensionIsVersionSupportedRequest) GetServerBuild() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ServerBuild
}

// GetServerBuildOk returns a tuple with the ServerBuild field value
// and a boolean to check if the value has been set.
func (o *SharepointExtensionIsVersionSupportedRequest) GetServerBuildOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerBuild, true
}

// SetServerBuild sets field value
func (o *SharepointExtensionIsVersionSupportedRequest) SetServerBuild(v int32) {
	o.ServerBuild = v
}

// GetServerMajor returns the ServerMajor field value
func (o *SharepointExtensionIsVersionSupportedRequest) GetServerMajor() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ServerMajor
}

// GetServerMajorOk returns a tuple with the ServerMajor field value
// and a boolean to check if the value has been set.
func (o *SharepointExtensionIsVersionSupportedRequest) GetServerMajorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerMajor, true
}

// SetServerMajor sets field value
func (o *SharepointExtensionIsVersionSupportedRequest) SetServerMajor(v int32) {
	o.ServerMajor = v
}

// GetServerMinor returns the ServerMinor field value
func (o *SharepointExtensionIsVersionSupportedRequest) GetServerMinor() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ServerMinor
}

// GetServerMinorOk returns a tuple with the ServerMinor field value
// and a boolean to check if the value has been set.
func (o *SharepointExtensionIsVersionSupportedRequest) GetServerMinorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerMinor, true
}

// SetServerMinor sets field value
func (o *SharepointExtensionIsVersionSupportedRequest) SetServerMinor(v int32) {
	o.ServerMinor = v
}

func (o SharepointExtensionIsVersionSupportedRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["serverBuild"] = o.ServerBuild
	}
	if true {
		toSerialize["serverMajor"] = o.ServerMajor
	}
	if true {
		toSerialize["serverMinor"] = o.ServerMinor
	}
	return json.Marshal(toSerialize)
}

type NullableSharepointExtensionIsVersionSupportedRequest struct {
	value *SharepointExtensionIsVersionSupportedRequest
	isSet bool
}

func (v NullableSharepointExtensionIsVersionSupportedRequest) Get() *SharepointExtensionIsVersionSupportedRequest {
	return v.value
}

func (v *NullableSharepointExtensionIsVersionSupportedRequest) Set(val *SharepointExtensionIsVersionSupportedRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSharepointExtensionIsVersionSupportedRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSharepointExtensionIsVersionSupportedRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharepointExtensionIsVersionSupportedRequest(val *SharepointExtensionIsVersionSupportedRequest) *NullableSharepointExtensionIsVersionSupportedRequest {
	return &NullableSharepointExtensionIsVersionSupportedRequest{value: val, isSet: true}
}

func (v NullableSharepointExtensionIsVersionSupportedRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharepointExtensionIsVersionSupportedRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


