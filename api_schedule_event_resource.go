/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// ScheduleEventResourceApiService ScheduleEventResourceApi service
type ScheduleEventResourceApiService service

type ApiScheduleEventResourceAddRequest struct {
	ctx context.Context
	ApiService *ScheduleEventResourceApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ScheduleEventResourceAddRequest
}

func (r ApiScheduleEventResourceAddRequest) Ks(ks string) ApiScheduleEventResourceAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiScheduleEventResourceAddRequest) Format(format int32) ApiScheduleEventResourceAddRequest {
	r.format = &format
	return r
}

func (r ApiScheduleEventResourceAddRequest) ClientTag(clientTag string) ApiScheduleEventResourceAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiScheduleEventResourceAddRequest) PartnerId(partnerId int32) ApiScheduleEventResourceAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiScheduleEventResourceAddRequest) Body(body ScheduleEventResourceAddRequest) ApiScheduleEventResourceAddRequest {
	r.body = &body
	return r
}

func (r ApiScheduleEventResourceAddRequest) Execute() (*KalturaScheduleEventResource, *http.Response, error) {
	return r.ApiService.ScheduleEventResourceAddExecute(r)
}

/*
ScheduleEventResourceAdd Method for ScheduleEventResourceAdd

Allows you to add a new KalturaScheduleEventResource object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScheduleEventResourceAddRequest
*/
func (a *ScheduleEventResourceApiService) ScheduleEventResourceAdd(ctx context.Context) ApiScheduleEventResourceAddRequest {
	return ApiScheduleEventResourceAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaScheduleEventResource
func (a *ScheduleEventResourceApiService) ScheduleEventResourceAddExecute(r ApiScheduleEventResourceAddRequest) (*KalturaScheduleEventResource, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaScheduleEventResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleEventResourceApiService.ScheduleEventResourceAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/schedule_scheduleeventresource/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScheduleEventResourceDeleteRequest struct {
	ctx context.Context
	ApiService *ScheduleEventResourceApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ScheduleEventResourceDeleteRequest
}

func (r ApiScheduleEventResourceDeleteRequest) Ks(ks string) ApiScheduleEventResourceDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiScheduleEventResourceDeleteRequest) Format(format int32) ApiScheduleEventResourceDeleteRequest {
	r.format = &format
	return r
}

func (r ApiScheduleEventResourceDeleteRequest) ClientTag(clientTag string) ApiScheduleEventResourceDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiScheduleEventResourceDeleteRequest) PartnerId(partnerId int32) ApiScheduleEventResourceDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiScheduleEventResourceDeleteRequest) Body(body ScheduleEventResourceDeleteRequest) ApiScheduleEventResourceDeleteRequest {
	r.body = &body
	return r
}

func (r ApiScheduleEventResourceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ScheduleEventResourceDeleteExecute(r)
}

/*
ScheduleEventResourceDelete Method for ScheduleEventResourceDelete

Mark the KalturaScheduleEventResource object as deleted

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScheduleEventResourceDeleteRequest
*/
func (a *ScheduleEventResourceApiService) ScheduleEventResourceDelete(ctx context.Context) ApiScheduleEventResourceDeleteRequest {
	return ApiScheduleEventResourceDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ScheduleEventResourceApiService) ScheduleEventResourceDeleteExecute(r ApiScheduleEventResourceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleEventResourceApiService.ScheduleEventResourceDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/schedule_scheduleeventresource/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiScheduleEventResourceGetRequest struct {
	ctx context.Context
	ApiService *ScheduleEventResourceApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ScheduleEventResourceDeleteRequest
}

func (r ApiScheduleEventResourceGetRequest) Ks(ks string) ApiScheduleEventResourceGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiScheduleEventResourceGetRequest) Format(format int32) ApiScheduleEventResourceGetRequest {
	r.format = &format
	return r
}

func (r ApiScheduleEventResourceGetRequest) ClientTag(clientTag string) ApiScheduleEventResourceGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiScheduleEventResourceGetRequest) PartnerId(partnerId int32) ApiScheduleEventResourceGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiScheduleEventResourceGetRequest) Body(body ScheduleEventResourceDeleteRequest) ApiScheduleEventResourceGetRequest {
	r.body = &body
	return r
}

func (r ApiScheduleEventResourceGetRequest) Execute() (*KalturaScheduleEventResource, *http.Response, error) {
	return r.ApiService.ScheduleEventResourceGetExecute(r)
}

/*
ScheduleEventResourceGet Method for ScheduleEventResourceGet

Retrieve a KalturaScheduleEventResource object by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScheduleEventResourceGetRequest
*/
func (a *ScheduleEventResourceApiService) ScheduleEventResourceGet(ctx context.Context) ApiScheduleEventResourceGetRequest {
	return ApiScheduleEventResourceGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaScheduleEventResource
func (a *ScheduleEventResourceApiService) ScheduleEventResourceGetExecute(r ApiScheduleEventResourceGetRequest) (*KalturaScheduleEventResource, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaScheduleEventResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleEventResourceApiService.ScheduleEventResourceGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/schedule_scheduleeventresource/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScheduleEventResourceListRequest struct {
	ctx context.Context
	ApiService *ScheduleEventResourceApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ScheduleEventResourceListRequest
}

func (r ApiScheduleEventResourceListRequest) Ks(ks string) ApiScheduleEventResourceListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiScheduleEventResourceListRequest) Format(format int32) ApiScheduleEventResourceListRequest {
	r.format = &format
	return r
}

func (r ApiScheduleEventResourceListRequest) ClientTag(clientTag string) ApiScheduleEventResourceListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiScheduleEventResourceListRequest) PartnerId(partnerId int32) ApiScheduleEventResourceListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiScheduleEventResourceListRequest) Body(body ScheduleEventResourceListRequest) ApiScheduleEventResourceListRequest {
	r.body = &body
	return r
}

func (r ApiScheduleEventResourceListRequest) Execute() (*KalturaScheduleEventResourceListResponse, *http.Response, error) {
	return r.ApiService.ScheduleEventResourceListExecute(r)
}

/*
ScheduleEventResourceList Method for ScheduleEventResourceList

List KalturaScheduleEventResource objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScheduleEventResourceListRequest
*/
func (a *ScheduleEventResourceApiService) ScheduleEventResourceList(ctx context.Context) ApiScheduleEventResourceListRequest {
	return ApiScheduleEventResourceListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaScheduleEventResourceListResponse
func (a *ScheduleEventResourceApiService) ScheduleEventResourceListExecute(r ApiScheduleEventResourceListRequest) (*KalturaScheduleEventResourceListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaScheduleEventResourceListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleEventResourceApiService.ScheduleEventResourceList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/schedule_scheduleeventresource/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScheduleEventResourceUpdateRequest struct {
	ctx context.Context
	ApiService *ScheduleEventResourceApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ScheduleEventResourceUpdateRequest
}

func (r ApiScheduleEventResourceUpdateRequest) Ks(ks string) ApiScheduleEventResourceUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiScheduleEventResourceUpdateRequest) Format(format int32) ApiScheduleEventResourceUpdateRequest {
	r.format = &format
	return r
}

func (r ApiScheduleEventResourceUpdateRequest) ClientTag(clientTag string) ApiScheduleEventResourceUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiScheduleEventResourceUpdateRequest) PartnerId(partnerId int32) ApiScheduleEventResourceUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiScheduleEventResourceUpdateRequest) Body(body ScheduleEventResourceUpdateRequest) ApiScheduleEventResourceUpdateRequest {
	r.body = &body
	return r
}

func (r ApiScheduleEventResourceUpdateRequest) Execute() (*KalturaScheduleEventResource, *http.Response, error) {
	return r.ApiService.ScheduleEventResourceUpdateExecute(r)
}

/*
ScheduleEventResourceUpdate Method for ScheduleEventResourceUpdate

Update an existing KalturaScheduleEventResource object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiScheduleEventResourceUpdateRequest
*/
func (a *ScheduleEventResourceApiService) ScheduleEventResourceUpdate(ctx context.Context) ApiScheduleEventResourceUpdateRequest {
	return ApiScheduleEventResourceUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaScheduleEventResource
func (a *ScheduleEventResourceApiService) ScheduleEventResourceUpdateExecute(r ApiScheduleEventResourceUpdateRequest) (*KalturaScheduleEventResource, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaScheduleEventResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleEventResourceApiService.ScheduleEventResourceUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/schedule_scheduleeventresource/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
