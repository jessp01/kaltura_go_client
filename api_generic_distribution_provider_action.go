/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
)


// GenericDistributionProviderActionApiService GenericDistributionProviderActionApi service
type GenericDistributionProviderActionApiService service

type ApiGenericDistributionProviderActionAddRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderActionApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *GenericDistributionProviderActionAddRequest
}

func (r ApiGenericDistributionProviderActionAddRequest) Ks(ks string) ApiGenericDistributionProviderActionAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderActionAddRequest) Format(format int32) ApiGenericDistributionProviderActionAddRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderActionAddRequest) ClientTag(clientTag string) ApiGenericDistributionProviderActionAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderActionAddRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderActionAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderActionAddRequest) Body(body GenericDistributionProviderActionAddRequest) ApiGenericDistributionProviderActionAddRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderActionAddRequest) Execute() (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderActionAddExecute(r)
}

/*
GenericDistributionProviderActionAdd Method for GenericDistributionProviderActionAdd

Add new Generic Distribution Provider Action

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderActionAddRequest
*/
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionAdd(ctx context.Context) ApiGenericDistributionProviderActionAddRequest {
	return ApiGenericDistributionProviderActionAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProviderAction
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionAddExecute(r ApiGenericDistributionProviderActionAddRequest) (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProviderAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderActionApiService.GenericDistributionProviderActionAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovideraction/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderActionAddMrssTransformRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderActionApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *GenericDistributionProviderActionAddMrssTransformRequest
}

func (r ApiGenericDistributionProviderActionAddMrssTransformRequest) Ks(ks string) ApiGenericDistributionProviderActionAddMrssTransformRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderActionAddMrssTransformRequest) Format(format int32) ApiGenericDistributionProviderActionAddMrssTransformRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderActionAddMrssTransformRequest) ClientTag(clientTag string) ApiGenericDistributionProviderActionAddMrssTransformRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderActionAddMrssTransformRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderActionAddMrssTransformRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderActionAddMrssTransformRequest) Body(body GenericDistributionProviderActionAddMrssTransformRequest) ApiGenericDistributionProviderActionAddMrssTransformRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderActionAddMrssTransformRequest) Execute() (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderActionAddMrssTransformExecute(r)
}

/*
GenericDistributionProviderActionAddMrssTransform Method for GenericDistributionProviderActionAddMrssTransform

Add MRSS transform file to generic distribution provider action

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderActionAddMrssTransformRequest
*/
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionAddMrssTransform(ctx context.Context) ApiGenericDistributionProviderActionAddMrssTransformRequest {
	return ApiGenericDistributionProviderActionAddMrssTransformRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProviderAction
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionAddMrssTransformExecute(r ApiGenericDistributionProviderActionAddMrssTransformRequest) (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProviderAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderActionApiService.GenericDistributionProviderActionAddMrssTransform")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovideraction/action/addMrssTransform"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderActionAddMrssTransformFromFileRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderActionApiService
	id *int32
	xslFile **os.File
	ks *string
	format *int32
}

// the id of the generic distribution provider action
func (r ApiGenericDistributionProviderActionAddMrssTransformFromFileRequest) Id(id int32) ApiGenericDistributionProviderActionAddMrssTransformFromFileRequest {
	r.id = &id
	return r
}

// XSL MRSS transformation file
func (r ApiGenericDistributionProviderActionAddMrssTransformFromFileRequest) XslFile(xslFile *os.File) ApiGenericDistributionProviderActionAddMrssTransformFromFileRequest {
	r.xslFile = &xslFile
	return r
}

func (r ApiGenericDistributionProviderActionAddMrssTransformFromFileRequest) Ks(ks string) ApiGenericDistributionProviderActionAddMrssTransformFromFileRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderActionAddMrssTransformFromFileRequest) Format(format int32) ApiGenericDistributionProviderActionAddMrssTransformFromFileRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderActionAddMrssTransformFromFileRequest) Execute() (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderActionAddMrssTransformFromFileExecute(r)
}

/*
GenericDistributionProviderActionAddMrssTransformFromFile Method for GenericDistributionProviderActionAddMrssTransformFromFile

Add MRSS transform file to generic distribution provider action

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderActionAddMrssTransformFromFileRequest
*/
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionAddMrssTransformFromFile(ctx context.Context) ApiGenericDistributionProviderActionAddMrssTransformFromFileRequest {
	return ApiGenericDistributionProviderActionAddMrssTransformFromFileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProviderAction
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionAddMrssTransformFromFileExecute(r ApiGenericDistributionProviderActionAddMrssTransformFromFileRequest) (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProviderAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderActionApiService.GenericDistributionProviderActionAddMrssTransformFromFile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovideraction/action/addMrssTransformFromFile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}
	if r.xslFile == nil {
		return localVarReturnValue, nil, reportError("xslFile is required and must be specified")
	}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var xslFileLocalVarFormFileName string
	var xslFileLocalVarFileName     string
	var xslFileLocalVarFileBytes    []byte

	xslFileLocalVarFormFileName = "xslFile"

	xslFileLocalVarFile := *r.xslFile
	if xslFileLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(xslFileLocalVarFile)
		xslFileLocalVarFileBytes = fbs
		xslFileLocalVarFileName = xslFileLocalVarFile.Name()
		xslFileLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: xslFileLocalVarFileBytes, fileName: xslFileLocalVarFileName, formFileName: xslFileLocalVarFormFileName})
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderActionAddMrssValidateRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderActionApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *GenericDistributionProviderActionAddMrssValidateRequest
}

func (r ApiGenericDistributionProviderActionAddMrssValidateRequest) Ks(ks string) ApiGenericDistributionProviderActionAddMrssValidateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderActionAddMrssValidateRequest) Format(format int32) ApiGenericDistributionProviderActionAddMrssValidateRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderActionAddMrssValidateRequest) ClientTag(clientTag string) ApiGenericDistributionProviderActionAddMrssValidateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderActionAddMrssValidateRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderActionAddMrssValidateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderActionAddMrssValidateRequest) Body(body GenericDistributionProviderActionAddMrssValidateRequest) ApiGenericDistributionProviderActionAddMrssValidateRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderActionAddMrssValidateRequest) Execute() (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderActionAddMrssValidateExecute(r)
}

/*
GenericDistributionProviderActionAddMrssValidate Method for GenericDistributionProviderActionAddMrssValidate

Add MRSS validate file to generic distribution provider action

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderActionAddMrssValidateRequest
*/
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionAddMrssValidate(ctx context.Context) ApiGenericDistributionProviderActionAddMrssValidateRequest {
	return ApiGenericDistributionProviderActionAddMrssValidateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProviderAction
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionAddMrssValidateExecute(r ApiGenericDistributionProviderActionAddMrssValidateRequest) (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProviderAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderActionApiService.GenericDistributionProviderActionAddMrssValidate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovideraction/action/addMrssValidate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderActionAddMrssValidateFromFileRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderActionApiService
	id *int32
	xsdFile **os.File
	ks *string
	format *int32
}

// the id of the generic distribution provider action
func (r ApiGenericDistributionProviderActionAddMrssValidateFromFileRequest) Id(id int32) ApiGenericDistributionProviderActionAddMrssValidateFromFileRequest {
	r.id = &id
	return r
}

// XSD MRSS validatation file
func (r ApiGenericDistributionProviderActionAddMrssValidateFromFileRequest) XsdFile(xsdFile *os.File) ApiGenericDistributionProviderActionAddMrssValidateFromFileRequest {
	r.xsdFile = &xsdFile
	return r
}

func (r ApiGenericDistributionProviderActionAddMrssValidateFromFileRequest) Ks(ks string) ApiGenericDistributionProviderActionAddMrssValidateFromFileRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderActionAddMrssValidateFromFileRequest) Format(format int32) ApiGenericDistributionProviderActionAddMrssValidateFromFileRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderActionAddMrssValidateFromFileRequest) Execute() (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderActionAddMrssValidateFromFileExecute(r)
}

/*
GenericDistributionProviderActionAddMrssValidateFromFile Method for GenericDistributionProviderActionAddMrssValidateFromFile

Add MRSS validate file to generic distribution provider action

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderActionAddMrssValidateFromFileRequest
*/
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionAddMrssValidateFromFile(ctx context.Context) ApiGenericDistributionProviderActionAddMrssValidateFromFileRequest {
	return ApiGenericDistributionProviderActionAddMrssValidateFromFileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProviderAction
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionAddMrssValidateFromFileExecute(r ApiGenericDistributionProviderActionAddMrssValidateFromFileRequest) (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProviderAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderActionApiService.GenericDistributionProviderActionAddMrssValidateFromFile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovideraction/action/addMrssValidateFromFile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}
	if r.xsdFile == nil {
		return localVarReturnValue, nil, reportError("xsdFile is required and must be specified")
	}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var xsdFileLocalVarFormFileName string
	var xsdFileLocalVarFileName     string
	var xsdFileLocalVarFileBytes    []byte

	xsdFileLocalVarFormFileName = "xsdFile"

	xsdFileLocalVarFile := *r.xsdFile
	if xsdFileLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(xsdFileLocalVarFile)
		xsdFileLocalVarFileBytes = fbs
		xsdFileLocalVarFileName = xsdFileLocalVarFile.Name()
		xsdFileLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: xsdFileLocalVarFileBytes, fileName: xsdFileLocalVarFileName, formFileName: xsdFileLocalVarFormFileName})
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderActionAddResultsTransformRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderActionApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *GenericDistributionProviderActionAddResultsTransformRequest
}

func (r ApiGenericDistributionProviderActionAddResultsTransformRequest) Ks(ks string) ApiGenericDistributionProviderActionAddResultsTransformRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderActionAddResultsTransformRequest) Format(format int32) ApiGenericDistributionProviderActionAddResultsTransformRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderActionAddResultsTransformRequest) ClientTag(clientTag string) ApiGenericDistributionProviderActionAddResultsTransformRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderActionAddResultsTransformRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderActionAddResultsTransformRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderActionAddResultsTransformRequest) Body(body GenericDistributionProviderActionAddResultsTransformRequest) ApiGenericDistributionProviderActionAddResultsTransformRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderActionAddResultsTransformRequest) Execute() (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderActionAddResultsTransformExecute(r)
}

/*
GenericDistributionProviderActionAddResultsTransform Method for GenericDistributionProviderActionAddResultsTransform

Add results transform file to generic distribution provider action

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderActionAddResultsTransformRequest
*/
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionAddResultsTransform(ctx context.Context) ApiGenericDistributionProviderActionAddResultsTransformRequest {
	return ApiGenericDistributionProviderActionAddResultsTransformRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProviderAction
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionAddResultsTransformExecute(r ApiGenericDistributionProviderActionAddResultsTransformRequest) (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProviderAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderActionApiService.GenericDistributionProviderActionAddResultsTransform")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovideraction/action/addResultsTransform"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderActionAddResultsTransformFromFileRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderActionApiService
	id *int32
	transformFile **os.File
	ks *string
	format *int32
}

// the id of the generic distribution provider action
func (r ApiGenericDistributionProviderActionAddResultsTransformFromFileRequest) Id(id int32) ApiGenericDistributionProviderActionAddResultsTransformFromFileRequest {
	r.id = &id
	return r
}

// transformation file xsl, xPath or regex
func (r ApiGenericDistributionProviderActionAddResultsTransformFromFileRequest) TransformFile(transformFile *os.File) ApiGenericDistributionProviderActionAddResultsTransformFromFileRequest {
	r.transformFile = &transformFile
	return r
}

func (r ApiGenericDistributionProviderActionAddResultsTransformFromFileRequest) Ks(ks string) ApiGenericDistributionProviderActionAddResultsTransformFromFileRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderActionAddResultsTransformFromFileRequest) Format(format int32) ApiGenericDistributionProviderActionAddResultsTransformFromFileRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderActionAddResultsTransformFromFileRequest) Execute() (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderActionAddResultsTransformFromFileExecute(r)
}

/*
GenericDistributionProviderActionAddResultsTransformFromFile Method for GenericDistributionProviderActionAddResultsTransformFromFile

Add MRSS transform file to generic distribution provider action

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderActionAddResultsTransformFromFileRequest
*/
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionAddResultsTransformFromFile(ctx context.Context) ApiGenericDistributionProviderActionAddResultsTransformFromFileRequest {
	return ApiGenericDistributionProviderActionAddResultsTransformFromFileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProviderAction
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionAddResultsTransformFromFileExecute(r ApiGenericDistributionProviderActionAddResultsTransformFromFileRequest) (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProviderAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderActionApiService.GenericDistributionProviderActionAddResultsTransformFromFile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovideraction/action/addResultsTransformFromFile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}
	if r.transformFile == nil {
		return localVarReturnValue, nil, reportError("transformFile is required and must be specified")
	}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var transformFileLocalVarFormFileName string
	var transformFileLocalVarFileName     string
	var transformFileLocalVarFileBytes    []byte

	transformFileLocalVarFormFileName = "transformFile"

	transformFileLocalVarFile := *r.transformFile
	if transformFileLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(transformFileLocalVarFile)
		transformFileLocalVarFileBytes = fbs
		transformFileLocalVarFileName = transformFileLocalVarFile.Name()
		transformFileLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: transformFileLocalVarFileBytes, fileName: transformFileLocalVarFileName, formFileName: transformFileLocalVarFormFileName})
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderActionDeleteRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderActionApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiGenericDistributionProviderActionDeleteRequest) Ks(ks string) ApiGenericDistributionProviderActionDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderActionDeleteRequest) Format(format int32) ApiGenericDistributionProviderActionDeleteRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderActionDeleteRequest) ClientTag(clientTag string) ApiGenericDistributionProviderActionDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderActionDeleteRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderActionDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderActionDeleteRequest) Body(body AccessControlDeleteRequest) ApiGenericDistributionProviderActionDeleteRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderActionDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.GenericDistributionProviderActionDeleteExecute(r)
}

/*
GenericDistributionProviderActionDelete Method for GenericDistributionProviderActionDelete

Delete Generic Distribution Provider Action by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderActionDeleteRequest
*/
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionDelete(ctx context.Context) ApiGenericDistributionProviderActionDeleteRequest {
	return ApiGenericDistributionProviderActionDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionDeleteExecute(r ApiGenericDistributionProviderActionDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderActionApiService.GenericDistributionProviderActionDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovideraction/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderActionDeleteByProviderIdRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderActionApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *GenericDistributionProviderActionDeleteByProviderIdRequest
}

func (r ApiGenericDistributionProviderActionDeleteByProviderIdRequest) Ks(ks string) ApiGenericDistributionProviderActionDeleteByProviderIdRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderActionDeleteByProviderIdRequest) Format(format int32) ApiGenericDistributionProviderActionDeleteByProviderIdRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderActionDeleteByProviderIdRequest) ClientTag(clientTag string) ApiGenericDistributionProviderActionDeleteByProviderIdRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderActionDeleteByProviderIdRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderActionDeleteByProviderIdRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderActionDeleteByProviderIdRequest) Body(body GenericDistributionProviderActionDeleteByProviderIdRequest) ApiGenericDistributionProviderActionDeleteByProviderIdRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderActionDeleteByProviderIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.GenericDistributionProviderActionDeleteByProviderIdExecute(r)
}

/*
GenericDistributionProviderActionDeleteByProviderId Method for GenericDistributionProviderActionDeleteByProviderId

Delete Generic Distribution Provider Action by provider id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderActionDeleteByProviderIdRequest
*/
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionDeleteByProviderId(ctx context.Context) ApiGenericDistributionProviderActionDeleteByProviderIdRequest {
	return ApiGenericDistributionProviderActionDeleteByProviderIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionDeleteByProviderIdExecute(r ApiGenericDistributionProviderActionDeleteByProviderIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderActionApiService.GenericDistributionProviderActionDeleteByProviderId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovideraction/action/deleteByProviderId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderActionGetRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderActionApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiGenericDistributionProviderActionGetRequest) Ks(ks string) ApiGenericDistributionProviderActionGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderActionGetRequest) Format(format int32) ApiGenericDistributionProviderActionGetRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderActionGetRequest) ClientTag(clientTag string) ApiGenericDistributionProviderActionGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderActionGetRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderActionGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderActionGetRequest) Body(body AccessControlDeleteRequest) ApiGenericDistributionProviderActionGetRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderActionGetRequest) Execute() (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderActionGetExecute(r)
}

/*
GenericDistributionProviderActionGet Method for GenericDistributionProviderActionGet

Get Generic Distribution Provider Action by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderActionGetRequest
*/
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionGet(ctx context.Context) ApiGenericDistributionProviderActionGetRequest {
	return ApiGenericDistributionProviderActionGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProviderAction
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionGetExecute(r ApiGenericDistributionProviderActionGetRequest) (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProviderAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderActionApiService.GenericDistributionProviderActionGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovideraction/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderActionGetByProviderIdRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderActionApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *GenericDistributionProviderActionDeleteByProviderIdRequest
}

func (r ApiGenericDistributionProviderActionGetByProviderIdRequest) Ks(ks string) ApiGenericDistributionProviderActionGetByProviderIdRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderActionGetByProviderIdRequest) Format(format int32) ApiGenericDistributionProviderActionGetByProviderIdRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderActionGetByProviderIdRequest) ClientTag(clientTag string) ApiGenericDistributionProviderActionGetByProviderIdRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderActionGetByProviderIdRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderActionGetByProviderIdRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderActionGetByProviderIdRequest) Body(body GenericDistributionProviderActionDeleteByProviderIdRequest) ApiGenericDistributionProviderActionGetByProviderIdRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderActionGetByProviderIdRequest) Execute() (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderActionGetByProviderIdExecute(r)
}

/*
GenericDistributionProviderActionGetByProviderId Method for GenericDistributionProviderActionGetByProviderId

Get Generic Distribution Provider Action by provider id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderActionGetByProviderIdRequest
*/
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionGetByProviderId(ctx context.Context) ApiGenericDistributionProviderActionGetByProviderIdRequest {
	return ApiGenericDistributionProviderActionGetByProviderIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProviderAction
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionGetByProviderIdExecute(r ApiGenericDistributionProviderActionGetByProviderIdRequest) (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProviderAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderActionApiService.GenericDistributionProviderActionGetByProviderId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovideraction/action/getByProviderId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderActionListRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderActionApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *GenericDistributionProviderActionListRequest
}

func (r ApiGenericDistributionProviderActionListRequest) Ks(ks string) ApiGenericDistributionProviderActionListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderActionListRequest) Format(format int32) ApiGenericDistributionProviderActionListRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderActionListRequest) ClientTag(clientTag string) ApiGenericDistributionProviderActionListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderActionListRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderActionListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderActionListRequest) Body(body GenericDistributionProviderActionListRequest) ApiGenericDistributionProviderActionListRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderActionListRequest) Execute() (*KalturaGenericDistributionProviderActionListResponse, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderActionListExecute(r)
}

/*
GenericDistributionProviderActionList Method for GenericDistributionProviderActionList

List all distribution providers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderActionListRequest
*/
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionList(ctx context.Context) ApiGenericDistributionProviderActionListRequest {
	return ApiGenericDistributionProviderActionListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProviderActionListResponse
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionListExecute(r ApiGenericDistributionProviderActionListRequest) (*KalturaGenericDistributionProviderActionListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProviderActionListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderActionApiService.GenericDistributionProviderActionList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovideraction/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderActionUpdateRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderActionApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *GenericDistributionProviderActionUpdateRequest
}

func (r ApiGenericDistributionProviderActionUpdateRequest) Ks(ks string) ApiGenericDistributionProviderActionUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderActionUpdateRequest) Format(format int32) ApiGenericDistributionProviderActionUpdateRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderActionUpdateRequest) ClientTag(clientTag string) ApiGenericDistributionProviderActionUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderActionUpdateRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderActionUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderActionUpdateRequest) Body(body GenericDistributionProviderActionUpdateRequest) ApiGenericDistributionProviderActionUpdateRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderActionUpdateRequest) Execute() (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderActionUpdateExecute(r)
}

/*
GenericDistributionProviderActionUpdate Method for GenericDistributionProviderActionUpdate

Update Generic Distribution Provider Action by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderActionUpdateRequest
*/
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionUpdate(ctx context.Context) ApiGenericDistributionProviderActionUpdateRequest {
	return ApiGenericDistributionProviderActionUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProviderAction
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionUpdateExecute(r ApiGenericDistributionProviderActionUpdateRequest) (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProviderAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderActionApiService.GenericDistributionProviderActionUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovideraction/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderActionUpdateByProviderIdRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderActionApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *GenericDistributionProviderActionUpdateByProviderIdRequest
}

func (r ApiGenericDistributionProviderActionUpdateByProviderIdRequest) Ks(ks string) ApiGenericDistributionProviderActionUpdateByProviderIdRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderActionUpdateByProviderIdRequest) Format(format int32) ApiGenericDistributionProviderActionUpdateByProviderIdRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderActionUpdateByProviderIdRequest) ClientTag(clientTag string) ApiGenericDistributionProviderActionUpdateByProviderIdRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderActionUpdateByProviderIdRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderActionUpdateByProviderIdRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderActionUpdateByProviderIdRequest) Body(body GenericDistributionProviderActionUpdateByProviderIdRequest) ApiGenericDistributionProviderActionUpdateByProviderIdRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderActionUpdateByProviderIdRequest) Execute() (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderActionUpdateByProviderIdExecute(r)
}

/*
GenericDistributionProviderActionUpdateByProviderId Method for GenericDistributionProviderActionUpdateByProviderId

Update Generic Distribution Provider Action by provider id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderActionUpdateByProviderIdRequest
*/
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionUpdateByProviderId(ctx context.Context) ApiGenericDistributionProviderActionUpdateByProviderIdRequest {
	return ApiGenericDistributionProviderActionUpdateByProviderIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProviderAction
func (a *GenericDistributionProviderActionApiService) GenericDistributionProviderActionUpdateByProviderIdExecute(r ApiGenericDistributionProviderActionUpdateByProviderIdRequest) (*KalturaGenericDistributionProviderAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProviderAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderActionApiService.GenericDistributionProviderActionUpdateByProviderId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovideraction/action/updateByProviderId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
