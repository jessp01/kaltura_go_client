/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// BeaconApiService BeaconApi service
type BeaconApiService service

type ApiBeaconAddRequest struct {
	ctx context.Context
	ApiService *BeaconApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BeaconAddRequest
}

func (r ApiBeaconAddRequest) Ks(ks string) ApiBeaconAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBeaconAddRequest) Format(format int32) ApiBeaconAddRequest {
	r.format = &format
	return r
}

func (r ApiBeaconAddRequest) ClientTag(clientTag string) ApiBeaconAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBeaconAddRequest) PartnerId(partnerId int32) ApiBeaconAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBeaconAddRequest) Body(body BeaconAddRequest) ApiBeaconAddRequest {
	r.body = &body
	return r
}

func (r ApiBeaconAddRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.BeaconAddExecute(r)
}

/*
BeaconAdd Method for BeaconAdd

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBeaconAddRequest
*/
func (a *BeaconApiService) BeaconAdd(ctx context.Context) ApiBeaconAddRequest {
	return ApiBeaconAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return bool
func (a *BeaconApiService) BeaconAddExecute(r ApiBeaconAddRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BeaconApiService.BeaconAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/beacon_beacon/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBeaconEnhanceSearchRequest struct {
	ctx context.Context
	ApiService *BeaconApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BeaconEnhanceSearchRequest
}

func (r ApiBeaconEnhanceSearchRequest) Ks(ks string) ApiBeaconEnhanceSearchRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBeaconEnhanceSearchRequest) Format(format int32) ApiBeaconEnhanceSearchRequest {
	r.format = &format
	return r
}

func (r ApiBeaconEnhanceSearchRequest) ClientTag(clientTag string) ApiBeaconEnhanceSearchRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBeaconEnhanceSearchRequest) PartnerId(partnerId int32) ApiBeaconEnhanceSearchRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBeaconEnhanceSearchRequest) Body(body BeaconEnhanceSearchRequest) ApiBeaconEnhanceSearchRequest {
	r.body = &body
	return r
}

func (r ApiBeaconEnhanceSearchRequest) Execute() (*KalturaBeaconListResponse, *http.Response, error) {
	return r.ApiService.BeaconEnhanceSearchExecute(r)
}

/*
BeaconEnhanceSearch Method for BeaconEnhanceSearch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBeaconEnhanceSearchRequest
*/
func (a *BeaconApiService) BeaconEnhanceSearch(ctx context.Context) ApiBeaconEnhanceSearchRequest {
	return ApiBeaconEnhanceSearchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaBeaconListResponse
func (a *BeaconApiService) BeaconEnhanceSearchExecute(r ApiBeaconEnhanceSearchRequest) (*KalturaBeaconListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaBeaconListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BeaconApiService.BeaconEnhanceSearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/beacon_beacon/action/enhanceSearch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBeaconListRequest struct {
	ctx context.Context
	ApiService *BeaconApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BeaconListRequest
}

func (r ApiBeaconListRequest) Ks(ks string) ApiBeaconListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBeaconListRequest) Format(format int32) ApiBeaconListRequest {
	r.format = &format
	return r
}

func (r ApiBeaconListRequest) ClientTag(clientTag string) ApiBeaconListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBeaconListRequest) PartnerId(partnerId int32) ApiBeaconListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBeaconListRequest) Body(body BeaconListRequest) ApiBeaconListRequest {
	r.body = &body
	return r
}

func (r ApiBeaconListRequest) Execute() (*KalturaBeaconListResponse, *http.Response, error) {
	return r.ApiService.BeaconListExecute(r)
}

/*
BeaconList Method for BeaconList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBeaconListRequest
*/
func (a *BeaconApiService) BeaconList(ctx context.Context) ApiBeaconListRequest {
	return ApiBeaconListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaBeaconListResponse
func (a *BeaconApiService) BeaconListExecute(r ApiBeaconListRequest) (*KalturaBeaconListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaBeaconListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BeaconApiService.BeaconList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/beacon_beacon/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBeaconSearchScheduledResourceRequest struct {
	ctx context.Context
	ApiService *BeaconApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BeaconSearchScheduledResourceRequest
}

func (r ApiBeaconSearchScheduledResourceRequest) Ks(ks string) ApiBeaconSearchScheduledResourceRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBeaconSearchScheduledResourceRequest) Format(format int32) ApiBeaconSearchScheduledResourceRequest {
	r.format = &format
	return r
}

func (r ApiBeaconSearchScheduledResourceRequest) ClientTag(clientTag string) ApiBeaconSearchScheduledResourceRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBeaconSearchScheduledResourceRequest) PartnerId(partnerId int32) ApiBeaconSearchScheduledResourceRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBeaconSearchScheduledResourceRequest) Body(body BeaconSearchScheduledResourceRequest) ApiBeaconSearchScheduledResourceRequest {
	r.body = &body
	return r
}

func (r ApiBeaconSearchScheduledResourceRequest) Execute() (*KalturaBeaconListResponse, *http.Response, error) {
	return r.ApiService.BeaconSearchScheduledResourceExecute(r)
}

/*
BeaconSearchScheduledResource Method for BeaconSearchScheduledResource

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBeaconSearchScheduledResourceRequest
*/
func (a *BeaconApiService) BeaconSearchScheduledResource(ctx context.Context) ApiBeaconSearchScheduledResourceRequest {
	return ApiBeaconSearchScheduledResourceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaBeaconListResponse
func (a *BeaconApiService) BeaconSearchScheduledResourceExecute(r ApiBeaconSearchScheduledResourceRequest) (*KalturaBeaconListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaBeaconListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BeaconApiService.BeaconSearchScheduledResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/beacon_beacon/action/searchScheduledResource"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
