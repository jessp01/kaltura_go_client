/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// DropFolderApiService DropFolderApi service
type DropFolderApiService service

type ApiDropFolderAddRequest struct {
	ctx context.Context
	ApiService *DropFolderApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderAddRequest
}

func (r ApiDropFolderAddRequest) Ks(ks string) ApiDropFolderAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderAddRequest) Format(format int32) ApiDropFolderAddRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderAddRequest) ClientTag(clientTag string) ApiDropFolderAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderAddRequest) PartnerId(partnerId int32) ApiDropFolderAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderAddRequest) Body(body DropFolderAddRequest) ApiDropFolderAddRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderAddRequest) Execute() (*KalturaDropFolder, *http.Response, error) {
	return r.ApiService.DropFolderAddExecute(r)
}

/*
DropFolderAdd Method for DropFolderAdd

Allows you to add a new KalturaDropFolder object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderAddRequest
*/
func (a *DropFolderApiService) DropFolderAdd(ctx context.Context) ApiDropFolderAddRequest {
	return ApiDropFolderAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDropFolder
func (a *DropFolderApiService) DropFolderAddExecute(r ApiDropFolderAddRequest) (*KalturaDropFolder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDropFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderApiService.DropFolderAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolder/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDropFolderDeleteRequest struct {
	ctx context.Context
	ApiService *DropFolderApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderDeleteRequest
}

func (r ApiDropFolderDeleteRequest) Ks(ks string) ApiDropFolderDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderDeleteRequest) Format(format int32) ApiDropFolderDeleteRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderDeleteRequest) ClientTag(clientTag string) ApiDropFolderDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderDeleteRequest) PartnerId(partnerId int32) ApiDropFolderDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderDeleteRequest) Body(body DropFolderDeleteRequest) ApiDropFolderDeleteRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderDeleteRequest) Execute() (*KalturaDropFolder, *http.Response, error) {
	return r.ApiService.DropFolderDeleteExecute(r)
}

/*
DropFolderDelete Method for DropFolderDelete

Mark the KalturaDropFolder object as deleted

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderDeleteRequest
*/
func (a *DropFolderApiService) DropFolderDelete(ctx context.Context) ApiDropFolderDeleteRequest {
	return ApiDropFolderDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDropFolder
func (a *DropFolderApiService) DropFolderDeleteExecute(r ApiDropFolderDeleteRequest) (*KalturaDropFolder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDropFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderApiService.DropFolderDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolder/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDropFolderFreeExclusiveDropFolderRequest struct {
	ctx context.Context
	ApiService *DropFolderApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderFreeExclusiveDropFolderRequest
}

func (r ApiDropFolderFreeExclusiveDropFolderRequest) Ks(ks string) ApiDropFolderFreeExclusiveDropFolderRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderFreeExclusiveDropFolderRequest) Format(format int32) ApiDropFolderFreeExclusiveDropFolderRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderFreeExclusiveDropFolderRequest) ClientTag(clientTag string) ApiDropFolderFreeExclusiveDropFolderRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderFreeExclusiveDropFolderRequest) PartnerId(partnerId int32) ApiDropFolderFreeExclusiveDropFolderRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderFreeExclusiveDropFolderRequest) Body(body DropFolderFreeExclusiveDropFolderRequest) ApiDropFolderFreeExclusiveDropFolderRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderFreeExclusiveDropFolderRequest) Execute() (*KalturaDropFolder, *http.Response, error) {
	return r.ApiService.DropFolderFreeExclusiveDropFolderExecute(r)
}

/*
DropFolderFreeExclusiveDropFolder Method for DropFolderFreeExclusiveDropFolder

freeExclusive KalturaDropFolder object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderFreeExclusiveDropFolderRequest
*/
func (a *DropFolderApiService) DropFolderFreeExclusiveDropFolder(ctx context.Context) ApiDropFolderFreeExclusiveDropFolderRequest {
	return ApiDropFolderFreeExclusiveDropFolderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDropFolder
func (a *DropFolderApiService) DropFolderFreeExclusiveDropFolderExecute(r ApiDropFolderFreeExclusiveDropFolderRequest) (*KalturaDropFolder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDropFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderApiService.DropFolderFreeExclusiveDropFolder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolder/action/freeExclusiveDropFolder"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDropFolderGetRequest struct {
	ctx context.Context
	ApiService *DropFolderApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderDeleteRequest
}

func (r ApiDropFolderGetRequest) Ks(ks string) ApiDropFolderGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderGetRequest) Format(format int32) ApiDropFolderGetRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderGetRequest) ClientTag(clientTag string) ApiDropFolderGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderGetRequest) PartnerId(partnerId int32) ApiDropFolderGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderGetRequest) Body(body DropFolderDeleteRequest) ApiDropFolderGetRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderGetRequest) Execute() (*KalturaDropFolder, *http.Response, error) {
	return r.ApiService.DropFolderGetExecute(r)
}

/*
DropFolderGet Method for DropFolderGet

Retrieve a KalturaDropFolder object by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderGetRequest
*/
func (a *DropFolderApiService) DropFolderGet(ctx context.Context) ApiDropFolderGetRequest {
	return ApiDropFolderGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDropFolder
func (a *DropFolderApiService) DropFolderGetExecute(r ApiDropFolderGetRequest) (*KalturaDropFolder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDropFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderApiService.DropFolderGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolder/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDropFolderGetExclusiveDropFolderRequest struct {
	ctx context.Context
	ApiService *DropFolderApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderGetExclusiveDropFolderRequest
}

func (r ApiDropFolderGetExclusiveDropFolderRequest) Ks(ks string) ApiDropFolderGetExclusiveDropFolderRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderGetExclusiveDropFolderRequest) Format(format int32) ApiDropFolderGetExclusiveDropFolderRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderGetExclusiveDropFolderRequest) ClientTag(clientTag string) ApiDropFolderGetExclusiveDropFolderRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderGetExclusiveDropFolderRequest) PartnerId(partnerId int32) ApiDropFolderGetExclusiveDropFolderRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderGetExclusiveDropFolderRequest) Body(body DropFolderGetExclusiveDropFolderRequest) ApiDropFolderGetExclusiveDropFolderRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderGetExclusiveDropFolderRequest) Execute() (*KalturaDropFolder, *http.Response, error) {
	return r.ApiService.DropFolderGetExclusiveDropFolderExecute(r)
}

/*
DropFolderGetExclusiveDropFolder Method for DropFolderGetExclusiveDropFolder

getExclusive KalturaDropFolder object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderGetExclusiveDropFolderRequest
*/
func (a *DropFolderApiService) DropFolderGetExclusiveDropFolder(ctx context.Context) ApiDropFolderGetExclusiveDropFolderRequest {
	return ApiDropFolderGetExclusiveDropFolderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDropFolder
func (a *DropFolderApiService) DropFolderGetExclusiveDropFolderExecute(r ApiDropFolderGetExclusiveDropFolderRequest) (*KalturaDropFolder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDropFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderApiService.DropFolderGetExclusiveDropFolder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolder/action/getExclusiveDropFolder"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDropFolderListRequest struct {
	ctx context.Context
	ApiService *DropFolderApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderListRequest
}

func (r ApiDropFolderListRequest) Ks(ks string) ApiDropFolderListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderListRequest) Format(format int32) ApiDropFolderListRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderListRequest) ClientTag(clientTag string) ApiDropFolderListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderListRequest) PartnerId(partnerId int32) ApiDropFolderListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderListRequest) Body(body DropFolderListRequest) ApiDropFolderListRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderListRequest) Execute() (*KalturaDropFolderListResponse, *http.Response, error) {
	return r.ApiService.DropFolderListExecute(r)
}

/*
DropFolderList Method for DropFolderList

List KalturaDropFolder objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderListRequest
*/
func (a *DropFolderApiService) DropFolderList(ctx context.Context) ApiDropFolderListRequest {
	return ApiDropFolderListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDropFolderListResponse
func (a *DropFolderApiService) DropFolderListExecute(r ApiDropFolderListRequest) (*KalturaDropFolderListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDropFolderListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderApiService.DropFolderList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolder/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDropFolderUpdateRequest struct {
	ctx context.Context
	ApiService *DropFolderApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderUpdateRequest
}

func (r ApiDropFolderUpdateRequest) Ks(ks string) ApiDropFolderUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderUpdateRequest) Format(format int32) ApiDropFolderUpdateRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderUpdateRequest) ClientTag(clientTag string) ApiDropFolderUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderUpdateRequest) PartnerId(partnerId int32) ApiDropFolderUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderUpdateRequest) Body(body DropFolderUpdateRequest) ApiDropFolderUpdateRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderUpdateRequest) Execute() (*KalturaDropFolder, *http.Response, error) {
	return r.ApiService.DropFolderUpdateExecute(r)
}

/*
DropFolderUpdate Method for DropFolderUpdate

Update an existing KalturaDropFolder object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderUpdateRequest
*/
func (a *DropFolderApiService) DropFolderUpdate(ctx context.Context) ApiDropFolderUpdateRequest {
	return ApiDropFolderUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDropFolder
func (a *DropFolderApiService) DropFolderUpdateExecute(r ApiDropFolderUpdateRequest) (*KalturaDropFolder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDropFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderApiService.DropFolderUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolder/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDropFolderUpdateBasicFieldsRequest struct {
	ctx context.Context
	ApiService *DropFolderApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderUpdateBasicFieldsRequest
}

func (r ApiDropFolderUpdateBasicFieldsRequest) Ks(ks string) ApiDropFolderUpdateBasicFieldsRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderUpdateBasicFieldsRequest) Format(format int32) ApiDropFolderUpdateBasicFieldsRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderUpdateBasicFieldsRequest) ClientTag(clientTag string) ApiDropFolderUpdateBasicFieldsRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderUpdateBasicFieldsRequest) PartnerId(partnerId int32) ApiDropFolderUpdateBasicFieldsRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderUpdateBasicFieldsRequest) Body(body DropFolderUpdateBasicFieldsRequest) ApiDropFolderUpdateBasicFieldsRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderUpdateBasicFieldsRequest) Execute() (*KalturaDropFolder, *http.Response, error) {
	return r.ApiService.DropFolderUpdateBasicFieldsExecute(r)
}

/*
DropFolderUpdateBasicFields Method for DropFolderUpdateBasicFields

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderUpdateBasicFieldsRequest
*/
func (a *DropFolderApiService) DropFolderUpdateBasicFields(ctx context.Context) ApiDropFolderUpdateBasicFieldsRequest {
	return ApiDropFolderUpdateBasicFieldsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDropFolder
func (a *DropFolderApiService) DropFolderUpdateBasicFieldsExecute(r ApiDropFolderUpdateBasicFieldsRequest) (*KalturaDropFolder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDropFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderApiService.DropFolderUpdateBasicFields")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolder/action/updateBasicFields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDropFolderUpdateStatusRequest struct {
	ctx context.Context
	ApiService *DropFolderApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderUpdateStatusRequest
}

func (r ApiDropFolderUpdateStatusRequest) Ks(ks string) ApiDropFolderUpdateStatusRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderUpdateStatusRequest) Format(format int32) ApiDropFolderUpdateStatusRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderUpdateStatusRequest) ClientTag(clientTag string) ApiDropFolderUpdateStatusRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderUpdateStatusRequest) PartnerId(partnerId int32) ApiDropFolderUpdateStatusRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderUpdateStatusRequest) Body(body DropFolderUpdateStatusRequest) ApiDropFolderUpdateStatusRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderUpdateStatusRequest) Execute() (*http.Response, error) {
	return r.ApiService.DropFolderUpdateStatusExecute(r)
}

/*
DropFolderUpdateStatus Method for DropFolderUpdateStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderUpdateStatusRequest
*/
func (a *DropFolderApiService) DropFolderUpdateStatus(ctx context.Context) ApiDropFolderUpdateStatusRequest {
	return ApiDropFolderUpdateStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DropFolderApiService) DropFolderUpdateStatusExecute(r ApiDropFolderUpdateStatusRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderApiService.DropFolderUpdateStatus")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolder/action/updateStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
