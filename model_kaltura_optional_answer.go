/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaOptionalAnswer A representation of an optional answer for question cue point
type KalturaOptionalAnswer struct {
	// Enum Type: `KalturaNullableBoolean`
	IsCorrect *int32 `json:"isCorrect,omitempty"`
	Key *string `json:"key,omitempty"`
	Text *string `json:"text,omitempty"`
	Weight *float32 `json:"weight,omitempty"`
}

// NewKalturaOptionalAnswer instantiates a new KalturaOptionalAnswer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaOptionalAnswer() *KalturaOptionalAnswer {
	this := KalturaOptionalAnswer{}
	return &this
}

// NewKalturaOptionalAnswerWithDefaults instantiates a new KalturaOptionalAnswer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaOptionalAnswerWithDefaults() *KalturaOptionalAnswer {
	this := KalturaOptionalAnswer{}
	return &this
}

// GetIsCorrect returns the IsCorrect field value if set, zero value otherwise.
func (o *KalturaOptionalAnswer) GetIsCorrect() int32 {
	if o == nil || o.IsCorrect == nil {
		var ret int32
		return ret
	}
	return *o.IsCorrect
}

// GetIsCorrectOk returns a tuple with the IsCorrect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaOptionalAnswer) GetIsCorrectOk() (*int32, bool) {
	if o == nil || o.IsCorrect == nil {
		return nil, false
	}
	return o.IsCorrect, true
}

// HasIsCorrect returns a boolean if a field has been set.
func (o *KalturaOptionalAnswer) HasIsCorrect() bool {
	if o != nil && o.IsCorrect != nil {
		return true
	}

	return false
}

// SetIsCorrect gets a reference to the given int32 and assigns it to the IsCorrect field.
func (o *KalturaOptionalAnswer) SetIsCorrect(v int32) {
	o.IsCorrect = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *KalturaOptionalAnswer) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaOptionalAnswer) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *KalturaOptionalAnswer) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *KalturaOptionalAnswer) SetKey(v string) {
	o.Key = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *KalturaOptionalAnswer) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaOptionalAnswer) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *KalturaOptionalAnswer) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *KalturaOptionalAnswer) SetText(v string) {
	o.Text = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *KalturaOptionalAnswer) GetWeight() float32 {
	if o == nil || o.Weight == nil {
		var ret float32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaOptionalAnswer) GetWeightOk() (*float32, bool) {
	if o == nil || o.Weight == nil {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *KalturaOptionalAnswer) HasWeight() bool {
	if o != nil && o.Weight != nil {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float32 and assigns it to the Weight field.
func (o *KalturaOptionalAnswer) SetWeight(v float32) {
	o.Weight = &v
}

func (o KalturaOptionalAnswer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsCorrect != nil {
		toSerialize["isCorrect"] = o.IsCorrect
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.Weight != nil {
		toSerialize["weight"] = o.Weight
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaOptionalAnswer struct {
	value *KalturaOptionalAnswer
	isSet bool
}

func (v NullableKalturaOptionalAnswer) Get() *KalturaOptionalAnswer {
	return v.value
}

func (v *NullableKalturaOptionalAnswer) Set(val *KalturaOptionalAnswer) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaOptionalAnswer) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaOptionalAnswer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaOptionalAnswer(val *KalturaOptionalAnswer) *NullableKalturaOptionalAnswer {
	return &NullableKalturaOptionalAnswer{value: val, isSet: true}
}

func (v NullableKalturaOptionalAnswer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaOptionalAnswer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


