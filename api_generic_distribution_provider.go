/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// GenericDistributionProviderApiService GenericDistributionProviderApi service
type GenericDistributionProviderApiService service

type ApiGenericDistributionProviderAddRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *GenericDistributionProviderAddRequest
}

func (r ApiGenericDistributionProviderAddRequest) Ks(ks string) ApiGenericDistributionProviderAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderAddRequest) Format(format int32) ApiGenericDistributionProviderAddRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderAddRequest) ClientTag(clientTag string) ApiGenericDistributionProviderAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderAddRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderAddRequest) Body(body GenericDistributionProviderAddRequest) ApiGenericDistributionProviderAddRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderAddRequest) Execute() (*KalturaGenericDistributionProvider, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderAddExecute(r)
}

/*
GenericDistributionProviderAdd Method for GenericDistributionProviderAdd

Add new Generic Distribution Provider

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderAddRequest
*/
func (a *GenericDistributionProviderApiService) GenericDistributionProviderAdd(ctx context.Context) ApiGenericDistributionProviderAddRequest {
	return ApiGenericDistributionProviderAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProvider
func (a *GenericDistributionProviderApiService) GenericDistributionProviderAddExecute(r ApiGenericDistributionProviderAddRequest) (*KalturaGenericDistributionProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderApiService.GenericDistributionProviderAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovider/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderDeleteRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiGenericDistributionProviderDeleteRequest) Ks(ks string) ApiGenericDistributionProviderDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderDeleteRequest) Format(format int32) ApiGenericDistributionProviderDeleteRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderDeleteRequest) ClientTag(clientTag string) ApiGenericDistributionProviderDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderDeleteRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderDeleteRequest) Body(body AccessControlDeleteRequest) ApiGenericDistributionProviderDeleteRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.GenericDistributionProviderDeleteExecute(r)
}

/*
GenericDistributionProviderDelete Method for GenericDistributionProviderDelete

Delete Generic Distribution Provider by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderDeleteRequest
*/
func (a *GenericDistributionProviderApiService) GenericDistributionProviderDelete(ctx context.Context) ApiGenericDistributionProviderDeleteRequest {
	return ApiGenericDistributionProviderDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *GenericDistributionProviderApiService) GenericDistributionProviderDeleteExecute(r ApiGenericDistributionProviderDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderApiService.GenericDistributionProviderDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovider/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderGetRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiGenericDistributionProviderGetRequest) Ks(ks string) ApiGenericDistributionProviderGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderGetRequest) Format(format int32) ApiGenericDistributionProviderGetRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderGetRequest) ClientTag(clientTag string) ApiGenericDistributionProviderGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderGetRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderGetRequest) Body(body AccessControlDeleteRequest) ApiGenericDistributionProviderGetRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderGetRequest) Execute() (*KalturaGenericDistributionProvider, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderGetExecute(r)
}

/*
GenericDistributionProviderGet Method for GenericDistributionProviderGet

Get Generic Distribution Provider by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderGetRequest
*/
func (a *GenericDistributionProviderApiService) GenericDistributionProviderGet(ctx context.Context) ApiGenericDistributionProviderGetRequest {
	return ApiGenericDistributionProviderGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProvider
func (a *GenericDistributionProviderApiService) GenericDistributionProviderGetExecute(r ApiGenericDistributionProviderGetRequest) (*KalturaGenericDistributionProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderApiService.GenericDistributionProviderGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovider/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderListRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *GenericDistributionProviderListRequest
}

func (r ApiGenericDistributionProviderListRequest) Ks(ks string) ApiGenericDistributionProviderListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderListRequest) Format(format int32) ApiGenericDistributionProviderListRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderListRequest) ClientTag(clientTag string) ApiGenericDistributionProviderListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderListRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderListRequest) Body(body GenericDistributionProviderListRequest) ApiGenericDistributionProviderListRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderListRequest) Execute() (*KalturaGenericDistributionProviderListResponse, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderListExecute(r)
}

/*
GenericDistributionProviderList Method for GenericDistributionProviderList

List all distribution providers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderListRequest
*/
func (a *GenericDistributionProviderApiService) GenericDistributionProviderList(ctx context.Context) ApiGenericDistributionProviderListRequest {
	return ApiGenericDistributionProviderListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProviderListResponse
func (a *GenericDistributionProviderApiService) GenericDistributionProviderListExecute(r ApiGenericDistributionProviderListRequest) (*KalturaGenericDistributionProviderListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProviderListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderApiService.GenericDistributionProviderList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovider/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenericDistributionProviderUpdateRequest struct {
	ctx context.Context
	ApiService *GenericDistributionProviderApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *GenericDistributionProviderUpdateRequest
}

func (r ApiGenericDistributionProviderUpdateRequest) Ks(ks string) ApiGenericDistributionProviderUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiGenericDistributionProviderUpdateRequest) Format(format int32) ApiGenericDistributionProviderUpdateRequest {
	r.format = &format
	return r
}

func (r ApiGenericDistributionProviderUpdateRequest) ClientTag(clientTag string) ApiGenericDistributionProviderUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiGenericDistributionProviderUpdateRequest) PartnerId(partnerId int32) ApiGenericDistributionProviderUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiGenericDistributionProviderUpdateRequest) Body(body GenericDistributionProviderUpdateRequest) ApiGenericDistributionProviderUpdateRequest {
	r.body = &body
	return r
}

func (r ApiGenericDistributionProviderUpdateRequest) Execute() (*KalturaGenericDistributionProvider, *http.Response, error) {
	return r.ApiService.GenericDistributionProviderUpdateExecute(r)
}

/*
GenericDistributionProviderUpdate Method for GenericDistributionProviderUpdate

Update Generic Distribution Provider by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenericDistributionProviderUpdateRequest
*/
func (a *GenericDistributionProviderApiService) GenericDistributionProviderUpdate(ctx context.Context) ApiGenericDistributionProviderUpdateRequest {
	return ApiGenericDistributionProviderUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaGenericDistributionProvider
func (a *GenericDistributionProviderApiService) GenericDistributionProviderUpdateExecute(r ApiGenericDistributionProviderUpdateRequest) (*KalturaGenericDistributionProvider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaGenericDistributionProvider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericDistributionProviderApiService.GenericDistributionProviderUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_genericdistributionprovider/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
