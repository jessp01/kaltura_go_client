/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaExportToCsvOptions struct for KalturaExportToCsvOptions
type KalturaExportToCsvOptions struct {
	// Enum Type: `KalturaNullableBoolean`
	DefaultHeader *int32 `json:"defaultHeader,omitempty"`
	// The format of the outputted date string. There are also several predefined date constants that may be used instead, so for example DATE_RSS contains the format string 'D, d M Y H:i:s'.  https://www.php.net/manual/en/function.date.php
	Format *string `json:"format,omitempty"`
	// Enum Type: `KalturaEntryType`  Setting this property will cause additional columns to be added to the final report. The columns will be related to the specific object type passed (currently only MEDIA_CLIP is supported).  Please note that this property will NOT change the result filter in any way (i.e passing MEDIA_CLIP here will not force the report to return only media items).
	TypeEqual *string `json:"typeEqual,omitempty"`
}

// NewKalturaExportToCsvOptions instantiates a new KalturaExportToCsvOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaExportToCsvOptions() *KalturaExportToCsvOptions {
	this := KalturaExportToCsvOptions{}
	return &this
}

// NewKalturaExportToCsvOptionsWithDefaults instantiates a new KalturaExportToCsvOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaExportToCsvOptionsWithDefaults() *KalturaExportToCsvOptions {
	this := KalturaExportToCsvOptions{}
	return &this
}

// GetDefaultHeader returns the DefaultHeader field value if set, zero value otherwise.
func (o *KalturaExportToCsvOptions) GetDefaultHeader() int32 {
	if o == nil || o.DefaultHeader == nil {
		var ret int32
		return ret
	}
	return *o.DefaultHeader
}

// GetDefaultHeaderOk returns a tuple with the DefaultHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaExportToCsvOptions) GetDefaultHeaderOk() (*int32, bool) {
	if o == nil || o.DefaultHeader == nil {
		return nil, false
	}
	return o.DefaultHeader, true
}

// HasDefaultHeader returns a boolean if a field has been set.
func (o *KalturaExportToCsvOptions) HasDefaultHeader() bool {
	if o != nil && o.DefaultHeader != nil {
		return true
	}

	return false
}

// SetDefaultHeader gets a reference to the given int32 and assigns it to the DefaultHeader field.
func (o *KalturaExportToCsvOptions) SetDefaultHeader(v int32) {
	o.DefaultHeader = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *KalturaExportToCsvOptions) GetFormat() string {
	if o == nil || o.Format == nil {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaExportToCsvOptions) GetFormatOk() (*string, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *KalturaExportToCsvOptions) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *KalturaExportToCsvOptions) SetFormat(v string) {
	o.Format = &v
}

// GetTypeEqual returns the TypeEqual field value if set, zero value otherwise.
func (o *KalturaExportToCsvOptions) GetTypeEqual() string {
	if o == nil || o.TypeEqual == nil {
		var ret string
		return ret
	}
	return *o.TypeEqual
}

// GetTypeEqualOk returns a tuple with the TypeEqual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaExportToCsvOptions) GetTypeEqualOk() (*string, bool) {
	if o == nil || o.TypeEqual == nil {
		return nil, false
	}
	return o.TypeEqual, true
}

// HasTypeEqual returns a boolean if a field has been set.
func (o *KalturaExportToCsvOptions) HasTypeEqual() bool {
	if o != nil && o.TypeEqual != nil {
		return true
	}

	return false
}

// SetTypeEqual gets a reference to the given string and assigns it to the TypeEqual field.
func (o *KalturaExportToCsvOptions) SetTypeEqual(v string) {
	o.TypeEqual = &v
}

func (o KalturaExportToCsvOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultHeader != nil {
		toSerialize["defaultHeader"] = o.DefaultHeader
	}
	if o.Format != nil {
		toSerialize["format"] = o.Format
	}
	if o.TypeEqual != nil {
		toSerialize["typeEqual"] = o.TypeEqual
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaExportToCsvOptions struct {
	value *KalturaExportToCsvOptions
	isSet bool
}

func (v NullableKalturaExportToCsvOptions) Get() *KalturaExportToCsvOptions {
	return v.value
}

func (v *NullableKalturaExportToCsvOptions) Set(val *KalturaExportToCsvOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaExportToCsvOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaExportToCsvOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaExportToCsvOptions(val *KalturaExportToCsvOptions) *NullableKalturaExportToCsvOptions {
	return &NullableKalturaExportToCsvOptions{value: val, isSet: true}
}

func (v NullableKalturaExportToCsvOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaExportToCsvOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


