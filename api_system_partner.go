/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// SystemPartnerApiService SystemPartnerApi service
type SystemPartnerApiService service

type ApiSystemPartnerGetRequest struct {
	ctx context.Context
	ApiService *SystemPartnerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *SystemPartnerGetRequest
}

func (r ApiSystemPartnerGetRequest) Ks(ks string) ApiSystemPartnerGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiSystemPartnerGetRequest) Format(format int32) ApiSystemPartnerGetRequest {
	r.format = &format
	return r
}

func (r ApiSystemPartnerGetRequest) ClientTag(clientTag string) ApiSystemPartnerGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiSystemPartnerGetRequest) PartnerId(partnerId int32) ApiSystemPartnerGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiSystemPartnerGetRequest) Body(body SystemPartnerGetRequest) ApiSystemPartnerGetRequest {
	r.body = &body
	return r
}

func (r ApiSystemPartnerGetRequest) Execute() (*KalturaPartner, *http.Response, error) {
	return r.ApiService.SystemPartnerGetExecute(r)
}

/*
SystemPartnerGet Method for SystemPartnerGet

Retrieve all info about partner

This service gets partner id as parameter and accessable to the admin console partner only

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSystemPartnerGetRequest
*/
func (a *SystemPartnerApiService) SystemPartnerGet(ctx context.Context) ApiSystemPartnerGetRequest {
	return ApiSystemPartnerGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaPartner
func (a *SystemPartnerApiService) SystemPartnerGetExecute(r ApiSystemPartnerGetRequest) (*KalturaPartner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaPartner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemPartnerApiService.SystemPartnerGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/systempartner_systempartner/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSystemPartnerGetAdminSessionRequest struct {
	ctx context.Context
	ApiService *SystemPartnerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *SystemPartnerGetAdminSessionRequest
}

func (r ApiSystemPartnerGetAdminSessionRequest) Ks(ks string) ApiSystemPartnerGetAdminSessionRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiSystemPartnerGetAdminSessionRequest) Format(format int32) ApiSystemPartnerGetAdminSessionRequest {
	r.format = &format
	return r
}

func (r ApiSystemPartnerGetAdminSessionRequest) ClientTag(clientTag string) ApiSystemPartnerGetAdminSessionRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiSystemPartnerGetAdminSessionRequest) PartnerId(partnerId int32) ApiSystemPartnerGetAdminSessionRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiSystemPartnerGetAdminSessionRequest) Body(body SystemPartnerGetAdminSessionRequest) ApiSystemPartnerGetAdminSessionRequest {
	r.body = &body
	return r
}

func (r ApiSystemPartnerGetAdminSessionRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.SystemPartnerGetAdminSessionExecute(r)
}

/*
SystemPartnerGetAdminSession Method for SystemPartnerGetAdminSession

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSystemPartnerGetAdminSessionRequest
*/
func (a *SystemPartnerApiService) SystemPartnerGetAdminSession(ctx context.Context) ApiSystemPartnerGetAdminSessionRequest {
	return ApiSystemPartnerGetAdminSessionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *SystemPartnerApiService) SystemPartnerGetAdminSessionExecute(r ApiSystemPartnerGetAdminSessionRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemPartnerApiService.SystemPartnerGetAdminSession")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/systempartner_systempartner/action/getAdminSession"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSystemPartnerGetConfigurationRequest struct {
	ctx context.Context
	ApiService *SystemPartnerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *SystemPartnerGetRequest
}

func (r ApiSystemPartnerGetConfigurationRequest) Ks(ks string) ApiSystemPartnerGetConfigurationRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiSystemPartnerGetConfigurationRequest) Format(format int32) ApiSystemPartnerGetConfigurationRequest {
	r.format = &format
	return r
}

func (r ApiSystemPartnerGetConfigurationRequest) ClientTag(clientTag string) ApiSystemPartnerGetConfigurationRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiSystemPartnerGetConfigurationRequest) PartnerId(partnerId int32) ApiSystemPartnerGetConfigurationRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiSystemPartnerGetConfigurationRequest) Body(body SystemPartnerGetRequest) ApiSystemPartnerGetConfigurationRequest {
	r.body = &body
	return r
}

func (r ApiSystemPartnerGetConfigurationRequest) Execute() (*KalturaSystemPartnerConfiguration, *http.Response, error) {
	return r.ApiService.SystemPartnerGetConfigurationExecute(r)
}

/*
SystemPartnerGetConfiguration Method for SystemPartnerGetConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSystemPartnerGetConfigurationRequest
*/
func (a *SystemPartnerApiService) SystemPartnerGetConfiguration(ctx context.Context) ApiSystemPartnerGetConfigurationRequest {
	return ApiSystemPartnerGetConfigurationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaSystemPartnerConfiguration
func (a *SystemPartnerApiService) SystemPartnerGetConfigurationExecute(r ApiSystemPartnerGetConfigurationRequest) (*KalturaSystemPartnerConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaSystemPartnerConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemPartnerApiService.SystemPartnerGetConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/systempartner_systempartner/action/getConfiguration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSystemPartnerGetPackagesRequest struct {
	ctx context.Context
	ApiService *SystemPartnerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	batchCleanExclusiveJobsRequest *BatchCleanExclusiveJobsRequest
}

func (r ApiSystemPartnerGetPackagesRequest) Ks(ks string) ApiSystemPartnerGetPackagesRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiSystemPartnerGetPackagesRequest) Format(format int32) ApiSystemPartnerGetPackagesRequest {
	r.format = &format
	return r
}

func (r ApiSystemPartnerGetPackagesRequest) ClientTag(clientTag string) ApiSystemPartnerGetPackagesRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiSystemPartnerGetPackagesRequest) PartnerId(partnerId int32) ApiSystemPartnerGetPackagesRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiSystemPartnerGetPackagesRequest) BatchCleanExclusiveJobsRequest(batchCleanExclusiveJobsRequest BatchCleanExclusiveJobsRequest) ApiSystemPartnerGetPackagesRequest {
	r.batchCleanExclusiveJobsRequest = &batchCleanExclusiveJobsRequest
	return r
}

func (r ApiSystemPartnerGetPackagesRequest) Execute() ([]KalturaSystemPartnerPackage, *http.Response, error) {
	return r.ApiService.SystemPartnerGetPackagesExecute(r)
}

/*
SystemPartnerGetPackages Method for SystemPartnerGetPackages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSystemPartnerGetPackagesRequest
*/
func (a *SystemPartnerApiService) SystemPartnerGetPackages(ctx context.Context) ApiSystemPartnerGetPackagesRequest {
	return ApiSystemPartnerGetPackagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KalturaSystemPartnerPackage
func (a *SystemPartnerApiService) SystemPartnerGetPackagesExecute(r ApiSystemPartnerGetPackagesRequest) ([]KalturaSystemPartnerPackage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KalturaSystemPartnerPackage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemPartnerApiService.SystemPartnerGetPackages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/systempartner_systempartner/action/getPackages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchCleanExclusiveJobsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSystemPartnerGetPackagesClassOfServiceRequest struct {
	ctx context.Context
	ApiService *SystemPartnerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	batchCleanExclusiveJobsRequest *BatchCleanExclusiveJobsRequest
}

func (r ApiSystemPartnerGetPackagesClassOfServiceRequest) Ks(ks string) ApiSystemPartnerGetPackagesClassOfServiceRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiSystemPartnerGetPackagesClassOfServiceRequest) Format(format int32) ApiSystemPartnerGetPackagesClassOfServiceRequest {
	r.format = &format
	return r
}

func (r ApiSystemPartnerGetPackagesClassOfServiceRequest) ClientTag(clientTag string) ApiSystemPartnerGetPackagesClassOfServiceRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiSystemPartnerGetPackagesClassOfServiceRequest) PartnerId(partnerId int32) ApiSystemPartnerGetPackagesClassOfServiceRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiSystemPartnerGetPackagesClassOfServiceRequest) BatchCleanExclusiveJobsRequest(batchCleanExclusiveJobsRequest BatchCleanExclusiveJobsRequest) ApiSystemPartnerGetPackagesClassOfServiceRequest {
	r.batchCleanExclusiveJobsRequest = &batchCleanExclusiveJobsRequest
	return r
}

func (r ApiSystemPartnerGetPackagesClassOfServiceRequest) Execute() ([]KalturaSystemPartnerPackage, *http.Response, error) {
	return r.ApiService.SystemPartnerGetPackagesClassOfServiceExecute(r)
}

/*
SystemPartnerGetPackagesClassOfService Method for SystemPartnerGetPackagesClassOfService

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSystemPartnerGetPackagesClassOfServiceRequest
*/
func (a *SystemPartnerApiService) SystemPartnerGetPackagesClassOfService(ctx context.Context) ApiSystemPartnerGetPackagesClassOfServiceRequest {
	return ApiSystemPartnerGetPackagesClassOfServiceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KalturaSystemPartnerPackage
func (a *SystemPartnerApiService) SystemPartnerGetPackagesClassOfServiceExecute(r ApiSystemPartnerGetPackagesClassOfServiceRequest) ([]KalturaSystemPartnerPackage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KalturaSystemPartnerPackage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemPartnerApiService.SystemPartnerGetPackagesClassOfService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/systempartner_systempartner/action/getPackagesClassOfService"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchCleanExclusiveJobsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSystemPartnerGetPackagesVerticalRequest struct {
	ctx context.Context
	ApiService *SystemPartnerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	batchCleanExclusiveJobsRequest *BatchCleanExclusiveJobsRequest
}

func (r ApiSystemPartnerGetPackagesVerticalRequest) Ks(ks string) ApiSystemPartnerGetPackagesVerticalRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiSystemPartnerGetPackagesVerticalRequest) Format(format int32) ApiSystemPartnerGetPackagesVerticalRequest {
	r.format = &format
	return r
}

func (r ApiSystemPartnerGetPackagesVerticalRequest) ClientTag(clientTag string) ApiSystemPartnerGetPackagesVerticalRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiSystemPartnerGetPackagesVerticalRequest) PartnerId(partnerId int32) ApiSystemPartnerGetPackagesVerticalRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiSystemPartnerGetPackagesVerticalRequest) BatchCleanExclusiveJobsRequest(batchCleanExclusiveJobsRequest BatchCleanExclusiveJobsRequest) ApiSystemPartnerGetPackagesVerticalRequest {
	r.batchCleanExclusiveJobsRequest = &batchCleanExclusiveJobsRequest
	return r
}

func (r ApiSystemPartnerGetPackagesVerticalRequest) Execute() ([]KalturaSystemPartnerPackage, *http.Response, error) {
	return r.ApiService.SystemPartnerGetPackagesVerticalExecute(r)
}

/*
SystemPartnerGetPackagesVertical Method for SystemPartnerGetPackagesVertical

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSystemPartnerGetPackagesVerticalRequest
*/
func (a *SystemPartnerApiService) SystemPartnerGetPackagesVertical(ctx context.Context) ApiSystemPartnerGetPackagesVerticalRequest {
	return ApiSystemPartnerGetPackagesVerticalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KalturaSystemPartnerPackage
func (a *SystemPartnerApiService) SystemPartnerGetPackagesVerticalExecute(r ApiSystemPartnerGetPackagesVerticalRequest) ([]KalturaSystemPartnerPackage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KalturaSystemPartnerPackage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemPartnerApiService.SystemPartnerGetPackagesVertical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/systempartner_systempartner/action/getPackagesVertical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchCleanExclusiveJobsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSystemPartnerGetPlayerDeliveryTypesRequest struct {
	ctx context.Context
	ApiService *SystemPartnerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	batchCleanExclusiveJobsRequest *BatchCleanExclusiveJobsRequest
}

func (r ApiSystemPartnerGetPlayerDeliveryTypesRequest) Ks(ks string) ApiSystemPartnerGetPlayerDeliveryTypesRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiSystemPartnerGetPlayerDeliveryTypesRequest) Format(format int32) ApiSystemPartnerGetPlayerDeliveryTypesRequest {
	r.format = &format
	return r
}

func (r ApiSystemPartnerGetPlayerDeliveryTypesRequest) ClientTag(clientTag string) ApiSystemPartnerGetPlayerDeliveryTypesRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiSystemPartnerGetPlayerDeliveryTypesRequest) PartnerId(partnerId int32) ApiSystemPartnerGetPlayerDeliveryTypesRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiSystemPartnerGetPlayerDeliveryTypesRequest) BatchCleanExclusiveJobsRequest(batchCleanExclusiveJobsRequest BatchCleanExclusiveJobsRequest) ApiSystemPartnerGetPlayerDeliveryTypesRequest {
	r.batchCleanExclusiveJobsRequest = &batchCleanExclusiveJobsRequest
	return r
}

func (r ApiSystemPartnerGetPlayerDeliveryTypesRequest) Execute() ([]KalturaPlayerDeliveryType, *http.Response, error) {
	return r.ApiService.SystemPartnerGetPlayerDeliveryTypesExecute(r)
}

/*
SystemPartnerGetPlayerDeliveryTypes Method for SystemPartnerGetPlayerDeliveryTypes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSystemPartnerGetPlayerDeliveryTypesRequest
*/
func (a *SystemPartnerApiService) SystemPartnerGetPlayerDeliveryTypes(ctx context.Context) ApiSystemPartnerGetPlayerDeliveryTypesRequest {
	return ApiSystemPartnerGetPlayerDeliveryTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KalturaPlayerDeliveryType
func (a *SystemPartnerApiService) SystemPartnerGetPlayerDeliveryTypesExecute(r ApiSystemPartnerGetPlayerDeliveryTypesRequest) ([]KalturaPlayerDeliveryType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KalturaPlayerDeliveryType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemPartnerApiService.SystemPartnerGetPlayerDeliveryTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/systempartner_systempartner/action/getPlayerDeliveryTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchCleanExclusiveJobsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSystemPartnerGetPlayerEmbedCodeTypesRequest struct {
	ctx context.Context
	ApiService *SystemPartnerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	batchCleanExclusiveJobsRequest *BatchCleanExclusiveJobsRequest
}

func (r ApiSystemPartnerGetPlayerEmbedCodeTypesRequest) Ks(ks string) ApiSystemPartnerGetPlayerEmbedCodeTypesRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiSystemPartnerGetPlayerEmbedCodeTypesRequest) Format(format int32) ApiSystemPartnerGetPlayerEmbedCodeTypesRequest {
	r.format = &format
	return r
}

func (r ApiSystemPartnerGetPlayerEmbedCodeTypesRequest) ClientTag(clientTag string) ApiSystemPartnerGetPlayerEmbedCodeTypesRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiSystemPartnerGetPlayerEmbedCodeTypesRequest) PartnerId(partnerId int32) ApiSystemPartnerGetPlayerEmbedCodeTypesRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiSystemPartnerGetPlayerEmbedCodeTypesRequest) BatchCleanExclusiveJobsRequest(batchCleanExclusiveJobsRequest BatchCleanExclusiveJobsRequest) ApiSystemPartnerGetPlayerEmbedCodeTypesRequest {
	r.batchCleanExclusiveJobsRequest = &batchCleanExclusiveJobsRequest
	return r
}

func (r ApiSystemPartnerGetPlayerEmbedCodeTypesRequest) Execute() ([]KalturaPlayerEmbedCodeType, *http.Response, error) {
	return r.ApiService.SystemPartnerGetPlayerEmbedCodeTypesExecute(r)
}

/*
SystemPartnerGetPlayerEmbedCodeTypes Method for SystemPartnerGetPlayerEmbedCodeTypes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSystemPartnerGetPlayerEmbedCodeTypesRequest
*/
func (a *SystemPartnerApiService) SystemPartnerGetPlayerEmbedCodeTypes(ctx context.Context) ApiSystemPartnerGetPlayerEmbedCodeTypesRequest {
	return ApiSystemPartnerGetPlayerEmbedCodeTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KalturaPlayerEmbedCodeType
func (a *SystemPartnerApiService) SystemPartnerGetPlayerEmbedCodeTypesExecute(r ApiSystemPartnerGetPlayerEmbedCodeTypesRequest) ([]KalturaPlayerEmbedCodeType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KalturaPlayerEmbedCodeType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemPartnerApiService.SystemPartnerGetPlayerEmbedCodeTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/systempartner_systempartner/action/getPlayerEmbedCodeTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchCleanExclusiveJobsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSystemPartnerGetUsageRequest struct {
	ctx context.Context
	ApiService *SystemPartnerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *SystemPartnerGetUsageRequest
}

func (r ApiSystemPartnerGetUsageRequest) Ks(ks string) ApiSystemPartnerGetUsageRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiSystemPartnerGetUsageRequest) Format(format int32) ApiSystemPartnerGetUsageRequest {
	r.format = &format
	return r
}

func (r ApiSystemPartnerGetUsageRequest) ClientTag(clientTag string) ApiSystemPartnerGetUsageRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiSystemPartnerGetUsageRequest) PartnerId(partnerId int32) ApiSystemPartnerGetUsageRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiSystemPartnerGetUsageRequest) Body(body SystemPartnerGetUsageRequest) ApiSystemPartnerGetUsageRequest {
	r.body = &body
	return r
}

func (r ApiSystemPartnerGetUsageRequest) Execute() (*KalturaSystemPartnerUsageListResponse, *http.Response, error) {
	return r.ApiService.SystemPartnerGetUsageExecute(r)
}

/*
SystemPartnerGetUsage Method for SystemPartnerGetUsage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSystemPartnerGetUsageRequest
*/
func (a *SystemPartnerApiService) SystemPartnerGetUsage(ctx context.Context) ApiSystemPartnerGetUsageRequest {
	return ApiSystemPartnerGetUsageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaSystemPartnerUsageListResponse
func (a *SystemPartnerApiService) SystemPartnerGetUsageExecute(r ApiSystemPartnerGetUsageRequest) (*KalturaSystemPartnerUsageListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaSystemPartnerUsageListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemPartnerApiService.SystemPartnerGetUsage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/systempartner_systempartner/action/getUsage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSystemPartnerListRequest struct {
	ctx context.Context
	ApiService *SystemPartnerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DistributionProfileListByPartnerRequest
}

func (r ApiSystemPartnerListRequest) Ks(ks string) ApiSystemPartnerListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiSystemPartnerListRequest) Format(format int32) ApiSystemPartnerListRequest {
	r.format = &format
	return r
}

func (r ApiSystemPartnerListRequest) ClientTag(clientTag string) ApiSystemPartnerListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiSystemPartnerListRequest) PartnerId(partnerId int32) ApiSystemPartnerListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiSystemPartnerListRequest) Body(body DistributionProfileListByPartnerRequest) ApiSystemPartnerListRequest {
	r.body = &body
	return r
}

func (r ApiSystemPartnerListRequest) Execute() (*KalturaPartnerListResponse, *http.Response, error) {
	return r.ApiService.SystemPartnerListExecute(r)
}

/*
SystemPartnerList Method for SystemPartnerList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSystemPartnerListRequest
*/
func (a *SystemPartnerApiService) SystemPartnerList(ctx context.Context) ApiSystemPartnerListRequest {
	return ApiSystemPartnerListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaPartnerListResponse
func (a *SystemPartnerApiService) SystemPartnerListExecute(r ApiSystemPartnerListRequest) (*KalturaPartnerListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaPartnerListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemPartnerApiService.SystemPartnerList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/systempartner_systempartner/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSystemPartnerListUserLoginDataRequest struct {
	ctx context.Context
	ApiService *SystemPartnerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *SystemPartnerListUserLoginDataRequest
}

func (r ApiSystemPartnerListUserLoginDataRequest) Ks(ks string) ApiSystemPartnerListUserLoginDataRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiSystemPartnerListUserLoginDataRequest) Format(format int32) ApiSystemPartnerListUserLoginDataRequest {
	r.format = &format
	return r
}

func (r ApiSystemPartnerListUserLoginDataRequest) ClientTag(clientTag string) ApiSystemPartnerListUserLoginDataRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiSystemPartnerListUserLoginDataRequest) PartnerId(partnerId int32) ApiSystemPartnerListUserLoginDataRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiSystemPartnerListUserLoginDataRequest) Body(body SystemPartnerListUserLoginDataRequest) ApiSystemPartnerListUserLoginDataRequest {
	r.body = &body
	return r
}

func (r ApiSystemPartnerListUserLoginDataRequest) Execute() (*KalturaUserLoginDataListResponse, *http.Response, error) {
	return r.ApiService.SystemPartnerListUserLoginDataExecute(r)
}

/*
SystemPartnerListUserLoginData Method for SystemPartnerListUserLoginData

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSystemPartnerListUserLoginDataRequest
*/
func (a *SystemPartnerApiService) SystemPartnerListUserLoginData(ctx context.Context) ApiSystemPartnerListUserLoginDataRequest {
	return ApiSystemPartnerListUserLoginDataRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaUserLoginDataListResponse
func (a *SystemPartnerApiService) SystemPartnerListUserLoginDataExecute(r ApiSystemPartnerListUserLoginDataRequest) (*KalturaUserLoginDataListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaUserLoginDataListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemPartnerApiService.SystemPartnerListUserLoginData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/systempartner_systempartner/action/listUserLoginData"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSystemPartnerResetUserPasswordRequest struct {
	ctx context.Context
	ApiService *SystemPartnerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *SystemPartnerResetUserPasswordRequest
}

func (r ApiSystemPartnerResetUserPasswordRequest) Ks(ks string) ApiSystemPartnerResetUserPasswordRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiSystemPartnerResetUserPasswordRequest) Format(format int32) ApiSystemPartnerResetUserPasswordRequest {
	r.format = &format
	return r
}

func (r ApiSystemPartnerResetUserPasswordRequest) ClientTag(clientTag string) ApiSystemPartnerResetUserPasswordRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiSystemPartnerResetUserPasswordRequest) PartnerId(partnerId int32) ApiSystemPartnerResetUserPasswordRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiSystemPartnerResetUserPasswordRequest) Body(body SystemPartnerResetUserPasswordRequest) ApiSystemPartnerResetUserPasswordRequest {
	r.body = &body
	return r
}

func (r ApiSystemPartnerResetUserPasswordRequest) Execute() (*http.Response, error) {
	return r.ApiService.SystemPartnerResetUserPasswordExecute(r)
}

/*
SystemPartnerResetUserPassword Method for SystemPartnerResetUserPassword

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSystemPartnerResetUserPasswordRequest
*/
func (a *SystemPartnerApiService) SystemPartnerResetUserPassword(ctx context.Context) ApiSystemPartnerResetUserPasswordRequest {
	return ApiSystemPartnerResetUserPasswordRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SystemPartnerApiService) SystemPartnerResetUserPasswordExecute(r ApiSystemPartnerResetUserPasswordRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemPartnerApiService.SystemPartnerResetUserPassword")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/systempartner_systempartner/action/resetUserPassword"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemPartnerUpdateConfigurationRequest struct {
	ctx context.Context
	ApiService *SystemPartnerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *SystemPartnerUpdateConfigurationRequest
}

func (r ApiSystemPartnerUpdateConfigurationRequest) Ks(ks string) ApiSystemPartnerUpdateConfigurationRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiSystemPartnerUpdateConfigurationRequest) Format(format int32) ApiSystemPartnerUpdateConfigurationRequest {
	r.format = &format
	return r
}

func (r ApiSystemPartnerUpdateConfigurationRequest) ClientTag(clientTag string) ApiSystemPartnerUpdateConfigurationRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiSystemPartnerUpdateConfigurationRequest) PartnerId(partnerId int32) ApiSystemPartnerUpdateConfigurationRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiSystemPartnerUpdateConfigurationRequest) Body(body SystemPartnerUpdateConfigurationRequest) ApiSystemPartnerUpdateConfigurationRequest {
	r.body = &body
	return r
}

func (r ApiSystemPartnerUpdateConfigurationRequest) Execute() (*http.Response, error) {
	return r.ApiService.SystemPartnerUpdateConfigurationExecute(r)
}

/*
SystemPartnerUpdateConfiguration Method for SystemPartnerUpdateConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSystemPartnerUpdateConfigurationRequest
*/
func (a *SystemPartnerApiService) SystemPartnerUpdateConfiguration(ctx context.Context) ApiSystemPartnerUpdateConfigurationRequest {
	return ApiSystemPartnerUpdateConfigurationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SystemPartnerApiService) SystemPartnerUpdateConfigurationExecute(r ApiSystemPartnerUpdateConfigurationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemPartnerApiService.SystemPartnerUpdateConfiguration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/systempartner_systempartner/action/updateConfiguration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemPartnerUpdateStatusRequest struct {
	ctx context.Context
	ApiService *SystemPartnerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *SystemPartnerUpdateStatusRequest
}

func (r ApiSystemPartnerUpdateStatusRequest) Ks(ks string) ApiSystemPartnerUpdateStatusRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiSystemPartnerUpdateStatusRequest) Format(format int32) ApiSystemPartnerUpdateStatusRequest {
	r.format = &format
	return r
}

func (r ApiSystemPartnerUpdateStatusRequest) ClientTag(clientTag string) ApiSystemPartnerUpdateStatusRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiSystemPartnerUpdateStatusRequest) PartnerId(partnerId int32) ApiSystemPartnerUpdateStatusRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiSystemPartnerUpdateStatusRequest) Body(body SystemPartnerUpdateStatusRequest) ApiSystemPartnerUpdateStatusRequest {
	r.body = &body
	return r
}

func (r ApiSystemPartnerUpdateStatusRequest) Execute() (*http.Response, error) {
	return r.ApiService.SystemPartnerUpdateStatusExecute(r)
}

/*
SystemPartnerUpdateStatus Method for SystemPartnerUpdateStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSystemPartnerUpdateStatusRequest
*/
func (a *SystemPartnerApiService) SystemPartnerUpdateStatus(ctx context.Context) ApiSystemPartnerUpdateStatusRequest {
	return ApiSystemPartnerUpdateStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SystemPartnerApiService) SystemPartnerUpdateStatusExecute(r ApiSystemPartnerUpdateStatusRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemPartnerApiService.SystemPartnerUpdateStatus")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/systempartner_systempartner/action/updateStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
