/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// BusinessProcessCaseApiService BusinessProcessCaseApi service
type BusinessProcessCaseApiService service

type ApiBusinessProcessCaseAbortRequest struct {
	ctx context.Context
	ApiService *BusinessProcessCaseApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BusinessProcessCaseAbortRequest
}

func (r ApiBusinessProcessCaseAbortRequest) Ks(ks string) ApiBusinessProcessCaseAbortRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBusinessProcessCaseAbortRequest) Format(format int32) ApiBusinessProcessCaseAbortRequest {
	r.format = &format
	return r
}

func (r ApiBusinessProcessCaseAbortRequest) ClientTag(clientTag string) ApiBusinessProcessCaseAbortRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBusinessProcessCaseAbortRequest) PartnerId(partnerId int32) ApiBusinessProcessCaseAbortRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBusinessProcessCaseAbortRequest) Body(body BusinessProcessCaseAbortRequest) ApiBusinessProcessCaseAbortRequest {
	r.body = &body
	return r
}

func (r ApiBusinessProcessCaseAbortRequest) Execute() (*http.Response, error) {
	return r.ApiService.BusinessProcessCaseAbortExecute(r)
}

/*
BusinessProcessCaseAbort Method for BusinessProcessCaseAbort

Abort business-process case

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBusinessProcessCaseAbortRequest
*/
func (a *BusinessProcessCaseApiService) BusinessProcessCaseAbort(ctx context.Context) ApiBusinessProcessCaseAbortRequest {
	return ApiBusinessProcessCaseAbortRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *BusinessProcessCaseApiService) BusinessProcessCaseAbortExecute(r ApiBusinessProcessCaseAbortRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessProcessCaseApiService.BusinessProcessCaseAbort")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/businessprocessnotification_businessprocesscase/action/abort"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBusinessProcessCaseListRequest struct {
	ctx context.Context
	ApiService *BusinessProcessCaseApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BusinessProcessCaseListRequest
}

func (r ApiBusinessProcessCaseListRequest) Ks(ks string) ApiBusinessProcessCaseListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBusinessProcessCaseListRequest) Format(format int32) ApiBusinessProcessCaseListRequest {
	r.format = &format
	return r
}

func (r ApiBusinessProcessCaseListRequest) ClientTag(clientTag string) ApiBusinessProcessCaseListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBusinessProcessCaseListRequest) PartnerId(partnerId int32) ApiBusinessProcessCaseListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBusinessProcessCaseListRequest) Body(body BusinessProcessCaseListRequest) ApiBusinessProcessCaseListRequest {
	r.body = &body
	return r
}

func (r ApiBusinessProcessCaseListRequest) Execute() ([]KalturaBusinessProcessCase, *http.Response, error) {
	return r.ApiService.BusinessProcessCaseListExecute(r)
}

/*
BusinessProcessCaseList Method for BusinessProcessCaseList

list business-process cases

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBusinessProcessCaseListRequest
*/
func (a *BusinessProcessCaseApiService) BusinessProcessCaseList(ctx context.Context) ApiBusinessProcessCaseListRequest {
	return ApiBusinessProcessCaseListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KalturaBusinessProcessCase
func (a *BusinessProcessCaseApiService) BusinessProcessCaseListExecute(r ApiBusinessProcessCaseListRequest) ([]KalturaBusinessProcessCase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KalturaBusinessProcessCase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessProcessCaseApiService.BusinessProcessCaseList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/businessprocessnotification_businessprocesscase/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessProcessCaseServeDiagramRequest struct {
	ctx context.Context
	ApiService *BusinessProcessCaseApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BusinessProcessCaseAbortRequest
}

func (r ApiBusinessProcessCaseServeDiagramRequest) Ks(ks string) ApiBusinessProcessCaseServeDiagramRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBusinessProcessCaseServeDiagramRequest) Format(format int32) ApiBusinessProcessCaseServeDiagramRequest {
	r.format = &format
	return r
}

func (r ApiBusinessProcessCaseServeDiagramRequest) ClientTag(clientTag string) ApiBusinessProcessCaseServeDiagramRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBusinessProcessCaseServeDiagramRequest) PartnerId(partnerId int32) ApiBusinessProcessCaseServeDiagramRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBusinessProcessCaseServeDiagramRequest) Body(body BusinessProcessCaseAbortRequest) ApiBusinessProcessCaseServeDiagramRequest {
	r.body = &body
	return r
}

func (r ApiBusinessProcessCaseServeDiagramRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.BusinessProcessCaseServeDiagramExecute(r)
}

/*
BusinessProcessCaseServeDiagram Method for BusinessProcessCaseServeDiagram

Server business-process case diagram

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBusinessProcessCaseServeDiagramRequest
*/
func (a *BusinessProcessCaseApiService) BusinessProcessCaseServeDiagram(ctx context.Context) ApiBusinessProcessCaseServeDiagramRequest {
	return ApiBusinessProcessCaseServeDiagramRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *BusinessProcessCaseApiService) BusinessProcessCaseServeDiagramExecute(r ApiBusinessProcessCaseServeDiagramRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessProcessCaseApiService.BusinessProcessCaseServeDiagram")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/businessprocessnotification_businessprocesscase/action/serveDiagram"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
