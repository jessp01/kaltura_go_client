/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaCategoryUser struct for KalturaCategoryUser
type KalturaCategoryUser struct {
	// `readOnly`  The full ids of the Category
	CategoryFullIds *string `json:"categoryFullIds,omitempty"`
	// `insertOnly`
	CategoryId *int32 `json:"categoryId,omitempty"`
	// `readOnly`  CategoryUser creation date as Unix timestamp (In seconds)
	CreatedAt *int32 `json:"createdAt,omitempty"`
	// `readOnly`  Partner id
	PartnerId *int32 `json:"partnerId,omitempty"`
	// Enum Type: `KalturaCategoryUserPermissionLevel`  Permission level
	PermissionLevel *int32 `json:"permissionLevel,omitempty"`
	// Set of category-related permissions for the current category user.
	PermissionNames *string `json:"permissionNames,omitempty"`
	// `readOnly`  Enum Type: `KalturaCategoryUserStatus`  Status
	Status *int32 `json:"status,omitempty"`
	// Enum Type: `KalturaUpdateMethodType`  Update method can be either manual or automatic to distinguish between manual operations (for example in KMC) on automatic - using bulk upload
	UpdateMethod *int32 `json:"updateMethod,omitempty"`
	// `readOnly`  CategoryUser update date as Unix timestamp (In seconds)
	UpdatedAt *int32 `json:"updatedAt,omitempty"`
	// `insertOnly`  User id
	UserId *string `json:"userId,omitempty"`
}

// NewKalturaCategoryUser instantiates a new KalturaCategoryUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaCategoryUser() *KalturaCategoryUser {
	this := KalturaCategoryUser{}
	return &this
}

// NewKalturaCategoryUserWithDefaults instantiates a new KalturaCategoryUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaCategoryUserWithDefaults() *KalturaCategoryUser {
	this := KalturaCategoryUser{}
	return &this
}

// GetCategoryFullIds returns the CategoryFullIds field value if set, zero value otherwise.
func (o *KalturaCategoryUser) GetCategoryFullIds() string {
	if o == nil || o.CategoryFullIds == nil {
		var ret string
		return ret
	}
	return *o.CategoryFullIds
}

// GetCategoryFullIdsOk returns a tuple with the CategoryFullIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaCategoryUser) GetCategoryFullIdsOk() (*string, bool) {
	if o == nil || o.CategoryFullIds == nil {
		return nil, false
	}
	return o.CategoryFullIds, true
}

// HasCategoryFullIds returns a boolean if a field has been set.
func (o *KalturaCategoryUser) HasCategoryFullIds() bool {
	if o != nil && o.CategoryFullIds != nil {
		return true
	}

	return false
}

// SetCategoryFullIds gets a reference to the given string and assigns it to the CategoryFullIds field.
func (o *KalturaCategoryUser) SetCategoryFullIds(v string) {
	o.CategoryFullIds = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *KalturaCategoryUser) GetCategoryId() int32 {
	if o == nil || o.CategoryId == nil {
		var ret int32
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaCategoryUser) GetCategoryIdOk() (*int32, bool) {
	if o == nil || o.CategoryId == nil {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *KalturaCategoryUser) HasCategoryId() bool {
	if o != nil && o.CategoryId != nil {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given int32 and assigns it to the CategoryId field.
func (o *KalturaCategoryUser) SetCategoryId(v int32) {
	o.CategoryId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *KalturaCategoryUser) GetCreatedAt() int32 {
	if o == nil || o.CreatedAt == nil {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaCategoryUser) GetCreatedAtOk() (*int32, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *KalturaCategoryUser) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *KalturaCategoryUser) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

// GetPartnerId returns the PartnerId field value if set, zero value otherwise.
func (o *KalturaCategoryUser) GetPartnerId() int32 {
	if o == nil || o.PartnerId == nil {
		var ret int32
		return ret
	}
	return *o.PartnerId
}

// GetPartnerIdOk returns a tuple with the PartnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaCategoryUser) GetPartnerIdOk() (*int32, bool) {
	if o == nil || o.PartnerId == nil {
		return nil, false
	}
	return o.PartnerId, true
}

// HasPartnerId returns a boolean if a field has been set.
func (o *KalturaCategoryUser) HasPartnerId() bool {
	if o != nil && o.PartnerId != nil {
		return true
	}

	return false
}

// SetPartnerId gets a reference to the given int32 and assigns it to the PartnerId field.
func (o *KalturaCategoryUser) SetPartnerId(v int32) {
	o.PartnerId = &v
}

// GetPermissionLevel returns the PermissionLevel field value if set, zero value otherwise.
func (o *KalturaCategoryUser) GetPermissionLevel() int32 {
	if o == nil || o.PermissionLevel == nil {
		var ret int32
		return ret
	}
	return *o.PermissionLevel
}

// GetPermissionLevelOk returns a tuple with the PermissionLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaCategoryUser) GetPermissionLevelOk() (*int32, bool) {
	if o == nil || o.PermissionLevel == nil {
		return nil, false
	}
	return o.PermissionLevel, true
}

// HasPermissionLevel returns a boolean if a field has been set.
func (o *KalturaCategoryUser) HasPermissionLevel() bool {
	if o != nil && o.PermissionLevel != nil {
		return true
	}

	return false
}

// SetPermissionLevel gets a reference to the given int32 and assigns it to the PermissionLevel field.
func (o *KalturaCategoryUser) SetPermissionLevel(v int32) {
	o.PermissionLevel = &v
}

// GetPermissionNames returns the PermissionNames field value if set, zero value otherwise.
func (o *KalturaCategoryUser) GetPermissionNames() string {
	if o == nil || o.PermissionNames == nil {
		var ret string
		return ret
	}
	return *o.PermissionNames
}

// GetPermissionNamesOk returns a tuple with the PermissionNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaCategoryUser) GetPermissionNamesOk() (*string, bool) {
	if o == nil || o.PermissionNames == nil {
		return nil, false
	}
	return o.PermissionNames, true
}

// HasPermissionNames returns a boolean if a field has been set.
func (o *KalturaCategoryUser) HasPermissionNames() bool {
	if o != nil && o.PermissionNames != nil {
		return true
	}

	return false
}

// SetPermissionNames gets a reference to the given string and assigns it to the PermissionNames field.
func (o *KalturaCategoryUser) SetPermissionNames(v string) {
	o.PermissionNames = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *KalturaCategoryUser) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaCategoryUser) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *KalturaCategoryUser) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *KalturaCategoryUser) SetStatus(v int32) {
	o.Status = &v
}

// GetUpdateMethod returns the UpdateMethod field value if set, zero value otherwise.
func (o *KalturaCategoryUser) GetUpdateMethod() int32 {
	if o == nil || o.UpdateMethod == nil {
		var ret int32
		return ret
	}
	return *o.UpdateMethod
}

// GetUpdateMethodOk returns a tuple with the UpdateMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaCategoryUser) GetUpdateMethodOk() (*int32, bool) {
	if o == nil || o.UpdateMethod == nil {
		return nil, false
	}
	return o.UpdateMethod, true
}

// HasUpdateMethod returns a boolean if a field has been set.
func (o *KalturaCategoryUser) HasUpdateMethod() bool {
	if o != nil && o.UpdateMethod != nil {
		return true
	}

	return false
}

// SetUpdateMethod gets a reference to the given int32 and assigns it to the UpdateMethod field.
func (o *KalturaCategoryUser) SetUpdateMethod(v int32) {
	o.UpdateMethod = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *KalturaCategoryUser) GetUpdatedAt() int32 {
	if o == nil || o.UpdatedAt == nil {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaCategoryUser) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *KalturaCategoryUser) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *KalturaCategoryUser) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *KalturaCategoryUser) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaCategoryUser) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *KalturaCategoryUser) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *KalturaCategoryUser) SetUserId(v string) {
	o.UserId = &v
}

func (o KalturaCategoryUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CategoryFullIds != nil {
		toSerialize["categoryFullIds"] = o.CategoryFullIds
	}
	if o.CategoryId != nil {
		toSerialize["categoryId"] = o.CategoryId
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.PartnerId != nil {
		toSerialize["partnerId"] = o.PartnerId
	}
	if o.PermissionLevel != nil {
		toSerialize["permissionLevel"] = o.PermissionLevel
	}
	if o.PermissionNames != nil {
		toSerialize["permissionNames"] = o.PermissionNames
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.UpdateMethod != nil {
		toSerialize["updateMethod"] = o.UpdateMethod
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaCategoryUser struct {
	value *KalturaCategoryUser
	isSet bool
}

func (v NullableKalturaCategoryUser) Get() *KalturaCategoryUser {
	return v.value
}

func (v *NullableKalturaCategoryUser) Set(val *KalturaCategoryUser) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaCategoryUser) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaCategoryUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaCategoryUser(val *KalturaCategoryUser) *NullableKalturaCategoryUser {
	return &NullableKalturaCategoryUser{value: val, isSet: true}
}

func (v NullableKalturaCategoryUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaCategoryUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


