/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaWorkerQueueFilter struct for KalturaWorkerQueueFilter
type KalturaWorkerQueueFilter struct {
	Filter *KalturaBatchJobFilter `json:"filter,omitempty"`
	// Enum Type: `KalturaBatchJobType`
	JobType *string `json:"jobType,omitempty"`
	SchedulerId *int32 `json:"schedulerId,omitempty"`
	WorkerId *int32 `json:"workerId,omitempty"`
}

// NewKalturaWorkerQueueFilter instantiates a new KalturaWorkerQueueFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaWorkerQueueFilter() *KalturaWorkerQueueFilter {
	this := KalturaWorkerQueueFilter{}
	return &this
}

// NewKalturaWorkerQueueFilterWithDefaults instantiates a new KalturaWorkerQueueFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaWorkerQueueFilterWithDefaults() *KalturaWorkerQueueFilter {
	this := KalturaWorkerQueueFilter{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *KalturaWorkerQueueFilter) GetFilter() KalturaBatchJobFilter {
	if o == nil || o.Filter == nil {
		var ret KalturaBatchJobFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaWorkerQueueFilter) GetFilterOk() (*KalturaBatchJobFilter, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *KalturaWorkerQueueFilter) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given KalturaBatchJobFilter and assigns it to the Filter field.
func (o *KalturaWorkerQueueFilter) SetFilter(v KalturaBatchJobFilter) {
	o.Filter = &v
}

// GetJobType returns the JobType field value if set, zero value otherwise.
func (o *KalturaWorkerQueueFilter) GetJobType() string {
	if o == nil || o.JobType == nil {
		var ret string
		return ret
	}
	return *o.JobType
}

// GetJobTypeOk returns a tuple with the JobType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaWorkerQueueFilter) GetJobTypeOk() (*string, bool) {
	if o == nil || o.JobType == nil {
		return nil, false
	}
	return o.JobType, true
}

// HasJobType returns a boolean if a field has been set.
func (o *KalturaWorkerQueueFilter) HasJobType() bool {
	if o != nil && o.JobType != nil {
		return true
	}

	return false
}

// SetJobType gets a reference to the given string and assigns it to the JobType field.
func (o *KalturaWorkerQueueFilter) SetJobType(v string) {
	o.JobType = &v
}

// GetSchedulerId returns the SchedulerId field value if set, zero value otherwise.
func (o *KalturaWorkerQueueFilter) GetSchedulerId() int32 {
	if o == nil || o.SchedulerId == nil {
		var ret int32
		return ret
	}
	return *o.SchedulerId
}

// GetSchedulerIdOk returns a tuple with the SchedulerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaWorkerQueueFilter) GetSchedulerIdOk() (*int32, bool) {
	if o == nil || o.SchedulerId == nil {
		return nil, false
	}
	return o.SchedulerId, true
}

// HasSchedulerId returns a boolean if a field has been set.
func (o *KalturaWorkerQueueFilter) HasSchedulerId() bool {
	if o != nil && o.SchedulerId != nil {
		return true
	}

	return false
}

// SetSchedulerId gets a reference to the given int32 and assigns it to the SchedulerId field.
func (o *KalturaWorkerQueueFilter) SetSchedulerId(v int32) {
	o.SchedulerId = &v
}

// GetWorkerId returns the WorkerId field value if set, zero value otherwise.
func (o *KalturaWorkerQueueFilter) GetWorkerId() int32 {
	if o == nil || o.WorkerId == nil {
		var ret int32
		return ret
	}
	return *o.WorkerId
}

// GetWorkerIdOk returns a tuple with the WorkerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaWorkerQueueFilter) GetWorkerIdOk() (*int32, bool) {
	if o == nil || o.WorkerId == nil {
		return nil, false
	}
	return o.WorkerId, true
}

// HasWorkerId returns a boolean if a field has been set.
func (o *KalturaWorkerQueueFilter) HasWorkerId() bool {
	if o != nil && o.WorkerId != nil {
		return true
	}

	return false
}

// SetWorkerId gets a reference to the given int32 and assigns it to the WorkerId field.
func (o *KalturaWorkerQueueFilter) SetWorkerId(v int32) {
	o.WorkerId = &v
}

func (o KalturaWorkerQueueFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.JobType != nil {
		toSerialize["jobType"] = o.JobType
	}
	if o.SchedulerId != nil {
		toSerialize["schedulerId"] = o.SchedulerId
	}
	if o.WorkerId != nil {
		toSerialize["workerId"] = o.WorkerId
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaWorkerQueueFilter struct {
	value *KalturaWorkerQueueFilter
	isSet bool
}

func (v NullableKalturaWorkerQueueFilter) Get() *KalturaWorkerQueueFilter {
	return v.value
}

func (v *NullableKalturaWorkerQueueFilter) Set(val *KalturaWorkerQueueFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaWorkerQueueFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaWorkerQueueFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaWorkerQueueFilter(val *KalturaWorkerQueueFilter) *NullableKalturaWorkerQueueFilter {
	return &NullableKalturaWorkerQueueFilter{value: val, isSet: true}
}

func (v NullableKalturaWorkerQueueFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaWorkerQueueFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


