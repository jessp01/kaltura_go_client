/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// DistributionProfileApiService DistributionProfileApi service
type DistributionProfileApiService service

type ApiDistributionProfileAddRequest struct {
	ctx context.Context
	ApiService *DistributionProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DistributionProfileAddRequest
}

func (r ApiDistributionProfileAddRequest) Ks(ks string) ApiDistributionProfileAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDistributionProfileAddRequest) Format(format int32) ApiDistributionProfileAddRequest {
	r.format = &format
	return r
}

func (r ApiDistributionProfileAddRequest) ClientTag(clientTag string) ApiDistributionProfileAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDistributionProfileAddRequest) PartnerId(partnerId int32) ApiDistributionProfileAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDistributionProfileAddRequest) Body(body DistributionProfileAddRequest) ApiDistributionProfileAddRequest {
	r.body = &body
	return r
}

func (r ApiDistributionProfileAddRequest) Execute() (*KalturaDistributionProfile, *http.Response, error) {
	return r.ApiService.DistributionProfileAddExecute(r)
}

/*
DistributionProfileAdd Method for DistributionProfileAdd

Add new Distribution Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDistributionProfileAddRequest
*/
func (a *DistributionProfileApiService) DistributionProfileAdd(ctx context.Context) ApiDistributionProfileAddRequest {
	return ApiDistributionProfileAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDistributionProfile
func (a *DistributionProfileApiService) DistributionProfileAddExecute(r ApiDistributionProfileAddRequest) (*KalturaDistributionProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDistributionProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionProfileApiService.DistributionProfileAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_distributionprofile/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDistributionProfileDeleteRequest struct {
	ctx context.Context
	ApiService *DistributionProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiDistributionProfileDeleteRequest) Ks(ks string) ApiDistributionProfileDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDistributionProfileDeleteRequest) Format(format int32) ApiDistributionProfileDeleteRequest {
	r.format = &format
	return r
}

func (r ApiDistributionProfileDeleteRequest) ClientTag(clientTag string) ApiDistributionProfileDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDistributionProfileDeleteRequest) PartnerId(partnerId int32) ApiDistributionProfileDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDistributionProfileDeleteRequest) Body(body AccessControlDeleteRequest) ApiDistributionProfileDeleteRequest {
	r.body = &body
	return r
}

func (r ApiDistributionProfileDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DistributionProfileDeleteExecute(r)
}

/*
DistributionProfileDelete Method for DistributionProfileDelete

Delete Distribution Profile by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDistributionProfileDeleteRequest
*/
func (a *DistributionProfileApiService) DistributionProfileDelete(ctx context.Context) ApiDistributionProfileDeleteRequest {
	return ApiDistributionProfileDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DistributionProfileApiService) DistributionProfileDeleteExecute(r ApiDistributionProfileDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionProfileApiService.DistributionProfileDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_distributionprofile/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDistributionProfileGetRequest struct {
	ctx context.Context
	ApiService *DistributionProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiDistributionProfileGetRequest) Ks(ks string) ApiDistributionProfileGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDistributionProfileGetRequest) Format(format int32) ApiDistributionProfileGetRequest {
	r.format = &format
	return r
}

func (r ApiDistributionProfileGetRequest) ClientTag(clientTag string) ApiDistributionProfileGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDistributionProfileGetRequest) PartnerId(partnerId int32) ApiDistributionProfileGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDistributionProfileGetRequest) Body(body AccessControlDeleteRequest) ApiDistributionProfileGetRequest {
	r.body = &body
	return r
}

func (r ApiDistributionProfileGetRequest) Execute() (*KalturaDistributionProfile, *http.Response, error) {
	return r.ApiService.DistributionProfileGetExecute(r)
}

/*
DistributionProfileGet Method for DistributionProfileGet

Get Distribution Profile by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDistributionProfileGetRequest
*/
func (a *DistributionProfileApiService) DistributionProfileGet(ctx context.Context) ApiDistributionProfileGetRequest {
	return ApiDistributionProfileGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDistributionProfile
func (a *DistributionProfileApiService) DistributionProfileGetExecute(r ApiDistributionProfileGetRequest) (*KalturaDistributionProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDistributionProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionProfileApiService.DistributionProfileGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_distributionprofile/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDistributionProfileListRequest struct {
	ctx context.Context
	ApiService *DistributionProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DistributionProfileListRequest
}

func (r ApiDistributionProfileListRequest) Ks(ks string) ApiDistributionProfileListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDistributionProfileListRequest) Format(format int32) ApiDistributionProfileListRequest {
	r.format = &format
	return r
}

func (r ApiDistributionProfileListRequest) ClientTag(clientTag string) ApiDistributionProfileListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDistributionProfileListRequest) PartnerId(partnerId int32) ApiDistributionProfileListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDistributionProfileListRequest) Body(body DistributionProfileListRequest) ApiDistributionProfileListRequest {
	r.body = &body
	return r
}

func (r ApiDistributionProfileListRequest) Execute() (*KalturaDistributionProfileListResponse, *http.Response, error) {
	return r.ApiService.DistributionProfileListExecute(r)
}

/*
DistributionProfileList Method for DistributionProfileList

List all distribution providers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDistributionProfileListRequest
*/
func (a *DistributionProfileApiService) DistributionProfileList(ctx context.Context) ApiDistributionProfileListRequest {
	return ApiDistributionProfileListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDistributionProfileListResponse
func (a *DistributionProfileApiService) DistributionProfileListExecute(r ApiDistributionProfileListRequest) (*KalturaDistributionProfileListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDistributionProfileListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionProfileApiService.DistributionProfileList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_distributionprofile/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDistributionProfileListByPartnerRequest struct {
	ctx context.Context
	ApiService *DistributionProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DistributionProfileListByPartnerRequest
}

func (r ApiDistributionProfileListByPartnerRequest) Ks(ks string) ApiDistributionProfileListByPartnerRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDistributionProfileListByPartnerRequest) Format(format int32) ApiDistributionProfileListByPartnerRequest {
	r.format = &format
	return r
}

func (r ApiDistributionProfileListByPartnerRequest) ClientTag(clientTag string) ApiDistributionProfileListByPartnerRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDistributionProfileListByPartnerRequest) PartnerId(partnerId int32) ApiDistributionProfileListByPartnerRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDistributionProfileListByPartnerRequest) Body(body DistributionProfileListByPartnerRequest) ApiDistributionProfileListByPartnerRequest {
	r.body = &body
	return r
}

func (r ApiDistributionProfileListByPartnerRequest) Execute() (*KalturaDistributionProfileListResponse, *http.Response, error) {
	return r.ApiService.DistributionProfileListByPartnerExecute(r)
}

/*
DistributionProfileListByPartner Method for DistributionProfileListByPartner

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDistributionProfileListByPartnerRequest
*/
func (a *DistributionProfileApiService) DistributionProfileListByPartner(ctx context.Context) ApiDistributionProfileListByPartnerRequest {
	return ApiDistributionProfileListByPartnerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDistributionProfileListResponse
func (a *DistributionProfileApiService) DistributionProfileListByPartnerExecute(r ApiDistributionProfileListByPartnerRequest) (*KalturaDistributionProfileListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDistributionProfileListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionProfileApiService.DistributionProfileListByPartner")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_distributionprofile/action/listByPartner"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDistributionProfileUpdateRequest struct {
	ctx context.Context
	ApiService *DistributionProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DistributionProfileUpdateRequest
}

func (r ApiDistributionProfileUpdateRequest) Ks(ks string) ApiDistributionProfileUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDistributionProfileUpdateRequest) Format(format int32) ApiDistributionProfileUpdateRequest {
	r.format = &format
	return r
}

func (r ApiDistributionProfileUpdateRequest) ClientTag(clientTag string) ApiDistributionProfileUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDistributionProfileUpdateRequest) PartnerId(partnerId int32) ApiDistributionProfileUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDistributionProfileUpdateRequest) Body(body DistributionProfileUpdateRequest) ApiDistributionProfileUpdateRequest {
	r.body = &body
	return r
}

func (r ApiDistributionProfileUpdateRequest) Execute() (*KalturaDistributionProfile, *http.Response, error) {
	return r.ApiService.DistributionProfileUpdateExecute(r)
}

/*
DistributionProfileUpdate Method for DistributionProfileUpdate

Update Distribution Profile by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDistributionProfileUpdateRequest
*/
func (a *DistributionProfileApiService) DistributionProfileUpdate(ctx context.Context) ApiDistributionProfileUpdateRequest {
	return ApiDistributionProfileUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDistributionProfile
func (a *DistributionProfileApiService) DistributionProfileUpdateExecute(r ApiDistributionProfileUpdateRequest) (*KalturaDistributionProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDistributionProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionProfileApiService.DistributionProfileUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_distributionprofile/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDistributionProfileUpdateStatusRequest struct {
	ctx context.Context
	ApiService *DistributionProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DistributionProfileUpdateStatusRequest
}

func (r ApiDistributionProfileUpdateStatusRequest) Ks(ks string) ApiDistributionProfileUpdateStatusRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDistributionProfileUpdateStatusRequest) Format(format int32) ApiDistributionProfileUpdateStatusRequest {
	r.format = &format
	return r
}

func (r ApiDistributionProfileUpdateStatusRequest) ClientTag(clientTag string) ApiDistributionProfileUpdateStatusRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDistributionProfileUpdateStatusRequest) PartnerId(partnerId int32) ApiDistributionProfileUpdateStatusRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDistributionProfileUpdateStatusRequest) Body(body DistributionProfileUpdateStatusRequest) ApiDistributionProfileUpdateStatusRequest {
	r.body = &body
	return r
}

func (r ApiDistributionProfileUpdateStatusRequest) Execute() (*KalturaDistributionProfile, *http.Response, error) {
	return r.ApiService.DistributionProfileUpdateStatusExecute(r)
}

/*
DistributionProfileUpdateStatus Method for DistributionProfileUpdateStatus

Update Distribution Profile status by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDistributionProfileUpdateStatusRequest
*/
func (a *DistributionProfileApiService) DistributionProfileUpdateStatus(ctx context.Context) ApiDistributionProfileUpdateStatusRequest {
	return ApiDistributionProfileUpdateStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDistributionProfile
func (a *DistributionProfileApiService) DistributionProfileUpdateStatusExecute(r ApiDistributionProfileUpdateStatusRequest) (*KalturaDistributionProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDistributionProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DistributionProfileApiService.DistributionProfileUpdateStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/contentdistribution_distributionprofile/action/updateStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
