/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// FlavorParamsApiService FlavorParamsApi service
type FlavorParamsApiService service

type ApiFlavorParamsAddRequest struct {
	ctx context.Context
	ApiService *FlavorParamsApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *FlavorParamsAddRequest
}

func (r ApiFlavorParamsAddRequest) Ks(ks string) ApiFlavorParamsAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiFlavorParamsAddRequest) Format(format int32) ApiFlavorParamsAddRequest {
	r.format = &format
	return r
}

func (r ApiFlavorParamsAddRequest) ClientTag(clientTag string) ApiFlavorParamsAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiFlavorParamsAddRequest) PartnerId(partnerId int32) ApiFlavorParamsAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiFlavorParamsAddRequest) Body(body FlavorParamsAddRequest) ApiFlavorParamsAddRequest {
	r.body = &body
	return r
}

func (r ApiFlavorParamsAddRequest) Execute() (*KalturaFlavorParams, *http.Response, error) {
	return r.ApiService.FlavorParamsAddExecute(r)
}

/*
FlavorParamsAdd Method for FlavorParamsAdd

Add new Flavor Params

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFlavorParamsAddRequest
*/
func (a *FlavorParamsApiService) FlavorParamsAdd(ctx context.Context) ApiFlavorParamsAddRequest {
	return ApiFlavorParamsAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaFlavorParams
func (a *FlavorParamsApiService) FlavorParamsAddExecute(r ApiFlavorParamsAddRequest) (*KalturaFlavorParams, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaFlavorParams
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorParamsApiService.FlavorParamsAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/flavorparams/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorParamsDeleteRequest struct {
	ctx context.Context
	ApiService *FlavorParamsApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiFlavorParamsDeleteRequest) Ks(ks string) ApiFlavorParamsDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiFlavorParamsDeleteRequest) Format(format int32) ApiFlavorParamsDeleteRequest {
	r.format = &format
	return r
}

func (r ApiFlavorParamsDeleteRequest) ClientTag(clientTag string) ApiFlavorParamsDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiFlavorParamsDeleteRequest) PartnerId(partnerId int32) ApiFlavorParamsDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiFlavorParamsDeleteRequest) Body(body AccessControlDeleteRequest) ApiFlavorParamsDeleteRequest {
	r.body = &body
	return r
}

func (r ApiFlavorParamsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.FlavorParamsDeleteExecute(r)
}

/*
FlavorParamsDelete Method for FlavorParamsDelete

Delete Flavor Params by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFlavorParamsDeleteRequest
*/
func (a *FlavorParamsApiService) FlavorParamsDelete(ctx context.Context) ApiFlavorParamsDeleteRequest {
	return ApiFlavorParamsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *FlavorParamsApiService) FlavorParamsDeleteExecute(r ApiFlavorParamsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorParamsApiService.FlavorParamsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/flavorparams/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFlavorParamsGetRequest struct {
	ctx context.Context
	ApiService *FlavorParamsApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiFlavorParamsGetRequest) Ks(ks string) ApiFlavorParamsGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiFlavorParamsGetRequest) Format(format int32) ApiFlavorParamsGetRequest {
	r.format = &format
	return r
}

func (r ApiFlavorParamsGetRequest) ClientTag(clientTag string) ApiFlavorParamsGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiFlavorParamsGetRequest) PartnerId(partnerId int32) ApiFlavorParamsGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiFlavorParamsGetRequest) Body(body AccessControlDeleteRequest) ApiFlavorParamsGetRequest {
	r.body = &body
	return r
}

func (r ApiFlavorParamsGetRequest) Execute() (*KalturaFlavorParams, *http.Response, error) {
	return r.ApiService.FlavorParamsGetExecute(r)
}

/*
FlavorParamsGet Method for FlavorParamsGet

Get Flavor Params by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFlavorParamsGetRequest
*/
func (a *FlavorParamsApiService) FlavorParamsGet(ctx context.Context) ApiFlavorParamsGetRequest {
	return ApiFlavorParamsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaFlavorParams
func (a *FlavorParamsApiService) FlavorParamsGetExecute(r ApiFlavorParamsGetRequest) (*KalturaFlavorParams, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaFlavorParams
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorParamsApiService.FlavorParamsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/flavorparams/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorParamsGetByConversionProfileIdRequest struct {
	ctx context.Context
	ApiService *FlavorParamsApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *FlavorParamsGetByConversionProfileIdRequest
}

func (r ApiFlavorParamsGetByConversionProfileIdRequest) Ks(ks string) ApiFlavorParamsGetByConversionProfileIdRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiFlavorParamsGetByConversionProfileIdRequest) Format(format int32) ApiFlavorParamsGetByConversionProfileIdRequest {
	r.format = &format
	return r
}

func (r ApiFlavorParamsGetByConversionProfileIdRequest) ClientTag(clientTag string) ApiFlavorParamsGetByConversionProfileIdRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiFlavorParamsGetByConversionProfileIdRequest) PartnerId(partnerId int32) ApiFlavorParamsGetByConversionProfileIdRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiFlavorParamsGetByConversionProfileIdRequest) Body(body FlavorParamsGetByConversionProfileIdRequest) ApiFlavorParamsGetByConversionProfileIdRequest {
	r.body = &body
	return r
}

func (r ApiFlavorParamsGetByConversionProfileIdRequest) Execute() ([]KalturaFlavorParams, *http.Response, error) {
	return r.ApiService.FlavorParamsGetByConversionProfileIdExecute(r)
}

/*
FlavorParamsGetByConversionProfileId Method for FlavorParamsGetByConversionProfileId

Get Flavor Params by Conversion Profile ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFlavorParamsGetByConversionProfileIdRequest
*/
func (a *FlavorParamsApiService) FlavorParamsGetByConversionProfileId(ctx context.Context) ApiFlavorParamsGetByConversionProfileIdRequest {
	return ApiFlavorParamsGetByConversionProfileIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KalturaFlavorParams
func (a *FlavorParamsApiService) FlavorParamsGetByConversionProfileIdExecute(r ApiFlavorParamsGetByConversionProfileIdRequest) ([]KalturaFlavorParams, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KalturaFlavorParams
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorParamsApiService.FlavorParamsGetByConversionProfileId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/flavorparams/action/getByConversionProfileId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorParamsListRequest struct {
	ctx context.Context
	ApiService *FlavorParamsApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *FlavorParamsListRequest
}

func (r ApiFlavorParamsListRequest) Ks(ks string) ApiFlavorParamsListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiFlavorParamsListRequest) Format(format int32) ApiFlavorParamsListRequest {
	r.format = &format
	return r
}

func (r ApiFlavorParamsListRequest) ClientTag(clientTag string) ApiFlavorParamsListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiFlavorParamsListRequest) PartnerId(partnerId int32) ApiFlavorParamsListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiFlavorParamsListRequest) Body(body FlavorParamsListRequest) ApiFlavorParamsListRequest {
	r.body = &body
	return r
}

func (r ApiFlavorParamsListRequest) Execute() (*KalturaFlavorParamsListResponse, *http.Response, error) {
	return r.ApiService.FlavorParamsListExecute(r)
}

/*
FlavorParamsList Method for FlavorParamsList

List Flavor Params by filter with paging support (By default - all system default params will be listed too)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFlavorParamsListRequest
*/
func (a *FlavorParamsApiService) FlavorParamsList(ctx context.Context) ApiFlavorParamsListRequest {
	return ApiFlavorParamsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaFlavorParamsListResponse
func (a *FlavorParamsApiService) FlavorParamsListExecute(r ApiFlavorParamsListRequest) (*KalturaFlavorParamsListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaFlavorParamsListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorParamsApiService.FlavorParamsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/flavorparams/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorParamsUpdateRequest struct {
	ctx context.Context
	ApiService *FlavorParamsApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *FlavorParamsUpdateRequest
}

func (r ApiFlavorParamsUpdateRequest) Ks(ks string) ApiFlavorParamsUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiFlavorParamsUpdateRequest) Format(format int32) ApiFlavorParamsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiFlavorParamsUpdateRequest) ClientTag(clientTag string) ApiFlavorParamsUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiFlavorParamsUpdateRequest) PartnerId(partnerId int32) ApiFlavorParamsUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiFlavorParamsUpdateRequest) Body(body FlavorParamsUpdateRequest) ApiFlavorParamsUpdateRequest {
	r.body = &body
	return r
}

func (r ApiFlavorParamsUpdateRequest) Execute() (*KalturaFlavorParams, *http.Response, error) {
	return r.ApiService.FlavorParamsUpdateExecute(r)
}

/*
FlavorParamsUpdate Method for FlavorParamsUpdate

Update Flavor Params by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFlavorParamsUpdateRequest
*/
func (a *FlavorParamsApiService) FlavorParamsUpdate(ctx context.Context) ApiFlavorParamsUpdateRequest {
	return ApiFlavorParamsUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaFlavorParams
func (a *FlavorParamsApiService) FlavorParamsUpdateExecute(r ApiFlavorParamsUpdateRequest) (*KalturaFlavorParams, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaFlavorParams
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorParamsApiService.FlavorParamsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/flavorparams/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
