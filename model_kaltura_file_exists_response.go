/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaFileExistsResponse struct for KalturaFileExistsResponse
type KalturaFileExistsResponse struct {
	// Indicates if the file exists
	Exists *bool `json:"exists,omitempty"`
	// Indicates if the file size is right
	SizeOk *bool `json:"sizeOk,omitempty"`
}

// NewKalturaFileExistsResponse instantiates a new KalturaFileExistsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaFileExistsResponse() *KalturaFileExistsResponse {
	this := KalturaFileExistsResponse{}
	return &this
}

// NewKalturaFileExistsResponseWithDefaults instantiates a new KalturaFileExistsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaFileExistsResponseWithDefaults() *KalturaFileExistsResponse {
	this := KalturaFileExistsResponse{}
	return &this
}

// GetExists returns the Exists field value if set, zero value otherwise.
func (o *KalturaFileExistsResponse) GetExists() bool {
	if o == nil || o.Exists == nil {
		var ret bool
		return ret
	}
	return *o.Exists
}

// GetExistsOk returns a tuple with the Exists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaFileExistsResponse) GetExistsOk() (*bool, bool) {
	if o == nil || o.Exists == nil {
		return nil, false
	}
	return o.Exists, true
}

// HasExists returns a boolean if a field has been set.
func (o *KalturaFileExistsResponse) HasExists() bool {
	if o != nil && o.Exists != nil {
		return true
	}

	return false
}

// SetExists gets a reference to the given bool and assigns it to the Exists field.
func (o *KalturaFileExistsResponse) SetExists(v bool) {
	o.Exists = &v
}

// GetSizeOk returns the SizeOk field value if set, zero value otherwise.
func (o *KalturaFileExistsResponse) GetSizeOk() bool {
	if o == nil || o.SizeOk == nil {
		var ret bool
		return ret
	}
	return *o.SizeOk
}

// GetSizeOkOk returns a tuple with the SizeOk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaFileExistsResponse) GetSizeOkOk() (*bool, bool) {
	if o == nil || o.SizeOk == nil {
		return nil, false
	}
	return o.SizeOk, true
}

// HasSizeOk returns a boolean if a field has been set.
func (o *KalturaFileExistsResponse) HasSizeOk() bool {
	if o != nil && o.SizeOk != nil {
		return true
	}

	return false
}

// SetSizeOk gets a reference to the given bool and assigns it to the SizeOk field.
func (o *KalturaFileExistsResponse) SetSizeOk(v bool) {
	o.SizeOk = &v
}

func (o KalturaFileExistsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Exists != nil {
		toSerialize["exists"] = o.Exists
	}
	if o.SizeOk != nil {
		toSerialize["sizeOk"] = o.SizeOk
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaFileExistsResponse struct {
	value *KalturaFileExistsResponse
	isSet bool
}

func (v NullableKalturaFileExistsResponse) Get() *KalturaFileExistsResponse {
	return v.value
}

func (v *NullableKalturaFileExistsResponse) Set(val *KalturaFileExistsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaFileExistsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaFileExistsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaFileExistsResponse(val *KalturaFileExistsResponse) *NullableKalturaFileExistsResponse {
	return &NullableKalturaFileExistsResponse{value: val, isSet: true}
}

func (v NullableKalturaFileExistsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaFileExistsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


