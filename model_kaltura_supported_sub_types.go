/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaSupportedSubTypes struct for KalturaSupportedSubTypes
type KalturaSupportedSubTypes struct {
	// list of comma separated supported sub types
	SupportedSubTypes *string `json:"supportedSubTypes,omitempty"`
}

// NewKalturaSupportedSubTypes instantiates a new KalturaSupportedSubTypes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaSupportedSubTypes() *KalturaSupportedSubTypes {
	this := KalturaSupportedSubTypes{}
	return &this
}

// NewKalturaSupportedSubTypesWithDefaults instantiates a new KalturaSupportedSubTypes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaSupportedSubTypesWithDefaults() *KalturaSupportedSubTypes {
	this := KalturaSupportedSubTypes{}
	return &this
}

// GetSupportedSubTypes returns the SupportedSubTypes field value if set, zero value otherwise.
func (o *KalturaSupportedSubTypes) GetSupportedSubTypes() string {
	if o == nil || o.SupportedSubTypes == nil {
		var ret string
		return ret
	}
	return *o.SupportedSubTypes
}

// GetSupportedSubTypesOk returns a tuple with the SupportedSubTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaSupportedSubTypes) GetSupportedSubTypesOk() (*string, bool) {
	if o == nil || o.SupportedSubTypes == nil {
		return nil, false
	}
	return o.SupportedSubTypes, true
}

// HasSupportedSubTypes returns a boolean if a field has been set.
func (o *KalturaSupportedSubTypes) HasSupportedSubTypes() bool {
	if o != nil && o.SupportedSubTypes != nil {
		return true
	}

	return false
}

// SetSupportedSubTypes gets a reference to the given string and assigns it to the SupportedSubTypes field.
func (o *KalturaSupportedSubTypes) SetSupportedSubTypes(v string) {
	o.SupportedSubTypes = &v
}

func (o KalturaSupportedSubTypes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SupportedSubTypes != nil {
		toSerialize["supportedSubTypes"] = o.SupportedSubTypes
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaSupportedSubTypes struct {
	value *KalturaSupportedSubTypes
	isSet bool
}

func (v NullableKalturaSupportedSubTypes) Get() *KalturaSupportedSubTypes {
	return v.value
}

func (v *NullableKalturaSupportedSubTypes) Set(val *KalturaSupportedSubTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaSupportedSubTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaSupportedSubTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaSupportedSubTypes(val *KalturaSupportedSubTypes) *NullableKalturaSupportedSubTypes {
	return &NullableKalturaSupportedSubTypes{value: val, isSet: true}
}

func (v NullableKalturaSupportedSubTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaSupportedSubTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


