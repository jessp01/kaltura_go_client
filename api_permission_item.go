/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// PermissionItemApiService PermissionItemApi service
type PermissionItemApiService service

type ApiPermissionItemAddRequest struct {
	ctx context.Context
	ApiService *PermissionItemApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *PermissionItemAddRequest
}

func (r ApiPermissionItemAddRequest) Ks(ks string) ApiPermissionItemAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiPermissionItemAddRequest) Format(format int32) ApiPermissionItemAddRequest {
	r.format = &format
	return r
}

func (r ApiPermissionItemAddRequest) ClientTag(clientTag string) ApiPermissionItemAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiPermissionItemAddRequest) PartnerId(partnerId int32) ApiPermissionItemAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiPermissionItemAddRequest) Body(body PermissionItemAddRequest) ApiPermissionItemAddRequest {
	r.body = &body
	return r
}

func (r ApiPermissionItemAddRequest) Execute() (*KalturaPermissionItem, *http.Response, error) {
	return r.ApiService.PermissionItemAddExecute(r)
}

/*
PermissionItemAdd Method for PermissionItemAdd

Adds a new permission item object to the account.

This action is available only to Kaltura system administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPermissionItemAddRequest
*/
func (a *PermissionItemApiService) PermissionItemAdd(ctx context.Context) ApiPermissionItemAddRequest {
	return ApiPermissionItemAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaPermissionItem
func (a *PermissionItemApiService) PermissionItemAddExecute(r ApiPermissionItemAddRequest) (*KalturaPermissionItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaPermissionItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionItemApiService.PermissionItemAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/permissionitem/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPermissionItemDeleteRequest struct {
	ctx context.Context
	ApiService *PermissionItemApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *PermissionItemDeleteRequest
}

func (r ApiPermissionItemDeleteRequest) Ks(ks string) ApiPermissionItemDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiPermissionItemDeleteRequest) Format(format int32) ApiPermissionItemDeleteRequest {
	r.format = &format
	return r
}

func (r ApiPermissionItemDeleteRequest) ClientTag(clientTag string) ApiPermissionItemDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiPermissionItemDeleteRequest) PartnerId(partnerId int32) ApiPermissionItemDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiPermissionItemDeleteRequest) Body(body PermissionItemDeleteRequest) ApiPermissionItemDeleteRequest {
	r.body = &body
	return r
}

func (r ApiPermissionItemDeleteRequest) Execute() (*KalturaPermissionItem, *http.Response, error) {
	return r.ApiService.PermissionItemDeleteExecute(r)
}

/*
PermissionItemDelete Method for PermissionItemDelete

Deletes an existing permission item object.

This action is available only to Kaltura system administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPermissionItemDeleteRequest
*/
func (a *PermissionItemApiService) PermissionItemDelete(ctx context.Context) ApiPermissionItemDeleteRequest {
	return ApiPermissionItemDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaPermissionItem
func (a *PermissionItemApiService) PermissionItemDeleteExecute(r ApiPermissionItemDeleteRequest) (*KalturaPermissionItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaPermissionItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionItemApiService.PermissionItemDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/permissionitem/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPermissionItemGetRequest struct {
	ctx context.Context
	ApiService *PermissionItemApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *PermissionItemDeleteRequest
}

func (r ApiPermissionItemGetRequest) Ks(ks string) ApiPermissionItemGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiPermissionItemGetRequest) Format(format int32) ApiPermissionItemGetRequest {
	r.format = &format
	return r
}

func (r ApiPermissionItemGetRequest) ClientTag(clientTag string) ApiPermissionItemGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiPermissionItemGetRequest) PartnerId(partnerId int32) ApiPermissionItemGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiPermissionItemGetRequest) Body(body PermissionItemDeleteRequest) ApiPermissionItemGetRequest {
	r.body = &body
	return r
}

func (r ApiPermissionItemGetRequest) Execute() (*KalturaPermissionItem, *http.Response, error) {
	return r.ApiService.PermissionItemGetExecute(r)
}

/*
PermissionItemGet Method for PermissionItemGet

Retrieves a permission item object using its ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPermissionItemGetRequest
*/
func (a *PermissionItemApiService) PermissionItemGet(ctx context.Context) ApiPermissionItemGetRequest {
	return ApiPermissionItemGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaPermissionItem
func (a *PermissionItemApiService) PermissionItemGetExecute(r ApiPermissionItemGetRequest) (*KalturaPermissionItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaPermissionItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionItemApiService.PermissionItemGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/permissionitem/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPermissionItemListRequest struct {
	ctx context.Context
	ApiService *PermissionItemApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *PermissionItemListRequest
}

func (r ApiPermissionItemListRequest) Ks(ks string) ApiPermissionItemListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiPermissionItemListRequest) Format(format int32) ApiPermissionItemListRequest {
	r.format = &format
	return r
}

func (r ApiPermissionItemListRequest) ClientTag(clientTag string) ApiPermissionItemListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiPermissionItemListRequest) PartnerId(partnerId int32) ApiPermissionItemListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiPermissionItemListRequest) Body(body PermissionItemListRequest) ApiPermissionItemListRequest {
	r.body = &body
	return r
}

func (r ApiPermissionItemListRequest) Execute() (*KalturaPermissionItemListResponse, *http.Response, error) {
	return r.ApiService.PermissionItemListExecute(r)
}

/*
PermissionItemList Method for PermissionItemList

Lists permission item objects that are associated with an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPermissionItemListRequest
*/
func (a *PermissionItemApiService) PermissionItemList(ctx context.Context) ApiPermissionItemListRequest {
	return ApiPermissionItemListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaPermissionItemListResponse
func (a *PermissionItemApiService) PermissionItemListExecute(r ApiPermissionItemListRequest) (*KalturaPermissionItemListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaPermissionItemListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionItemApiService.PermissionItemList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/permissionitem/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPermissionItemUpdateRequest struct {
	ctx context.Context
	ApiService *PermissionItemApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *PermissionItemUpdateRequest
}

func (r ApiPermissionItemUpdateRequest) Ks(ks string) ApiPermissionItemUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiPermissionItemUpdateRequest) Format(format int32) ApiPermissionItemUpdateRequest {
	r.format = &format
	return r
}

func (r ApiPermissionItemUpdateRequest) ClientTag(clientTag string) ApiPermissionItemUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiPermissionItemUpdateRequest) PartnerId(partnerId int32) ApiPermissionItemUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiPermissionItemUpdateRequest) Body(body PermissionItemUpdateRequest) ApiPermissionItemUpdateRequest {
	r.body = &body
	return r
}

func (r ApiPermissionItemUpdateRequest) Execute() (*KalturaPermissionItem, *http.Response, error) {
	return r.ApiService.PermissionItemUpdateExecute(r)
}

/*
PermissionItemUpdate Method for PermissionItemUpdate

Updates an existing permission item object.

This action is available only to Kaltura system administrators.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPermissionItemUpdateRequest
*/
func (a *PermissionItemApiService) PermissionItemUpdate(ctx context.Context) ApiPermissionItemUpdateRequest {
	return ApiPermissionItemUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaPermissionItem
func (a *PermissionItemApiService) PermissionItemUpdateExecute(r ApiPermissionItemUpdateRequest) (*KalturaPermissionItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaPermissionItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionItemApiService.PermissionItemUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/permissionitem/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
