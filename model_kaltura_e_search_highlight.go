/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaESearchHighlight struct for KalturaESearchHighlight
type KalturaESearchHighlight struct {
	FieldName *string `json:"fieldName,omitempty"`
	Hits []KalturaString `json:"hits,omitempty"`
}

// NewKalturaESearchHighlight instantiates a new KalturaESearchHighlight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaESearchHighlight() *KalturaESearchHighlight {
	this := KalturaESearchHighlight{}
	return &this
}

// NewKalturaESearchHighlightWithDefaults instantiates a new KalturaESearchHighlight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaESearchHighlightWithDefaults() *KalturaESearchHighlight {
	this := KalturaESearchHighlight{}
	return &this
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *KalturaESearchHighlight) GetFieldName() string {
	if o == nil || o.FieldName == nil {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchHighlight) GetFieldNameOk() (*string, bool) {
	if o == nil || o.FieldName == nil {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *KalturaESearchHighlight) HasFieldName() bool {
	if o != nil && o.FieldName != nil {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *KalturaESearchHighlight) SetFieldName(v string) {
	o.FieldName = &v
}

// GetHits returns the Hits field value if set, zero value otherwise.
func (o *KalturaESearchHighlight) GetHits() []KalturaString {
	if o == nil || o.Hits == nil {
		var ret []KalturaString
		return ret
	}
	return o.Hits
}

// GetHitsOk returns a tuple with the Hits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchHighlight) GetHitsOk() ([]KalturaString, bool) {
	if o == nil || o.Hits == nil {
		return nil, false
	}
	return o.Hits, true
}

// HasHits returns a boolean if a field has been set.
func (o *KalturaESearchHighlight) HasHits() bool {
	if o != nil && o.Hits != nil {
		return true
	}

	return false
}

// SetHits gets a reference to the given []KalturaString and assigns it to the Hits field.
func (o *KalturaESearchHighlight) SetHits(v []KalturaString) {
	o.Hits = v
}

func (o KalturaESearchHighlight) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FieldName != nil {
		toSerialize["fieldName"] = o.FieldName
	}
	if o.Hits != nil {
		toSerialize["hits"] = o.Hits
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaESearchHighlight struct {
	value *KalturaESearchHighlight
	isSet bool
}

func (v NullableKalturaESearchHighlight) Get() *KalturaESearchHighlight {
	return v.value
}

func (v *NullableKalturaESearchHighlight) Set(val *KalturaESearchHighlight) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaESearchHighlight) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaESearchHighlight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaESearchHighlight(val *KalturaESearchHighlight) *NullableKalturaESearchHighlight {
	return &NullableKalturaESearchHighlight{value: val, isSet: true}
}

func (v NullableKalturaESearchHighlight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaESearchHighlight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


