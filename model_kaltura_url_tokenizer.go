/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaUrlTokenizer struct for KalturaUrlTokenizer
type KalturaUrlTokenizer struct {
	// key
	Key *string `json:"key,omitempty"`
	LimitIpAddress *bool `json:"limitIpAddress,omitempty"`
	ObjectType *string `json:"objectType,omitempty"`
	// Window
	Window *int32 `json:"window,omitempty"`
}

// NewKalturaUrlTokenizer instantiates a new KalturaUrlTokenizer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaUrlTokenizer() *KalturaUrlTokenizer {
	this := KalturaUrlTokenizer{}
	return &this
}

// NewKalturaUrlTokenizerWithDefaults instantiates a new KalturaUrlTokenizer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaUrlTokenizerWithDefaults() *KalturaUrlTokenizer {
	this := KalturaUrlTokenizer{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *KalturaUrlTokenizer) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaUrlTokenizer) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *KalturaUrlTokenizer) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *KalturaUrlTokenizer) SetKey(v string) {
	o.Key = &v
}

// GetLimitIpAddress returns the LimitIpAddress field value if set, zero value otherwise.
func (o *KalturaUrlTokenizer) GetLimitIpAddress() bool {
	if o == nil || o.LimitIpAddress == nil {
		var ret bool
		return ret
	}
	return *o.LimitIpAddress
}

// GetLimitIpAddressOk returns a tuple with the LimitIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaUrlTokenizer) GetLimitIpAddressOk() (*bool, bool) {
	if o == nil || o.LimitIpAddress == nil {
		return nil, false
	}
	return o.LimitIpAddress, true
}

// HasLimitIpAddress returns a boolean if a field has been set.
func (o *KalturaUrlTokenizer) HasLimitIpAddress() bool {
	if o != nil && o.LimitIpAddress != nil {
		return true
	}

	return false
}

// SetLimitIpAddress gets a reference to the given bool and assigns it to the LimitIpAddress field.
func (o *KalturaUrlTokenizer) SetLimitIpAddress(v bool) {
	o.LimitIpAddress = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *KalturaUrlTokenizer) GetObjectType() string {
	if o == nil || o.ObjectType == nil {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaUrlTokenizer) GetObjectTypeOk() (*string, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *KalturaUrlTokenizer) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *KalturaUrlTokenizer) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetWindow returns the Window field value if set, zero value otherwise.
func (o *KalturaUrlTokenizer) GetWindow() int32 {
	if o == nil || o.Window == nil {
		var ret int32
		return ret
	}
	return *o.Window
}

// GetWindowOk returns a tuple with the Window field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaUrlTokenizer) GetWindowOk() (*int32, bool) {
	if o == nil || o.Window == nil {
		return nil, false
	}
	return o.Window, true
}

// HasWindow returns a boolean if a field has been set.
func (o *KalturaUrlTokenizer) HasWindow() bool {
	if o != nil && o.Window != nil {
		return true
	}

	return false
}

// SetWindow gets a reference to the given int32 and assigns it to the Window field.
func (o *KalturaUrlTokenizer) SetWindow(v int32) {
	o.Window = &v
}

func (o KalturaUrlTokenizer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.LimitIpAddress != nil {
		toSerialize["limitIpAddress"] = o.LimitIpAddress
	}
	if o.ObjectType != nil {
		toSerialize["objectType"] = o.ObjectType
	}
	if o.Window != nil {
		toSerialize["window"] = o.Window
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaUrlTokenizer struct {
	value *KalturaUrlTokenizer
	isSet bool
}

func (v NullableKalturaUrlTokenizer) Get() *KalturaUrlTokenizer {
	return v.value
}

func (v *NullableKalturaUrlTokenizer) Set(val *KalturaUrlTokenizer) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaUrlTokenizer) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaUrlTokenizer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaUrlTokenizer(val *KalturaUrlTokenizer) *NullableKalturaUrlTokenizer {
	return &NullableKalturaUrlTokenizer{value: val, isSet: true}
}

func (v NullableKalturaUrlTokenizer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaUrlTokenizer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


