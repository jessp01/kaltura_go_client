/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaESearchRange struct for KalturaESearchRange
type KalturaESearchRange struct {
	GreaterThan *int32 `json:"greaterThan,omitempty"`
	GreaterThanOrEqual *int32 `json:"greaterThanOrEqual,omitempty"`
	LessThan *int32 `json:"lessThan,omitempty"`
	LessThanOrEqual *int32 `json:"lessThanOrEqual,omitempty"`
}

// NewKalturaESearchRange instantiates a new KalturaESearchRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaESearchRange() *KalturaESearchRange {
	this := KalturaESearchRange{}
	return &this
}

// NewKalturaESearchRangeWithDefaults instantiates a new KalturaESearchRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaESearchRangeWithDefaults() *KalturaESearchRange {
	this := KalturaESearchRange{}
	return &this
}

// GetGreaterThan returns the GreaterThan field value if set, zero value otherwise.
func (o *KalturaESearchRange) GetGreaterThan() int32 {
	if o == nil || o.GreaterThan == nil {
		var ret int32
		return ret
	}
	return *o.GreaterThan
}

// GetGreaterThanOk returns a tuple with the GreaterThan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchRange) GetGreaterThanOk() (*int32, bool) {
	if o == nil || o.GreaterThan == nil {
		return nil, false
	}
	return o.GreaterThan, true
}

// HasGreaterThan returns a boolean if a field has been set.
func (o *KalturaESearchRange) HasGreaterThan() bool {
	if o != nil && o.GreaterThan != nil {
		return true
	}

	return false
}

// SetGreaterThan gets a reference to the given int32 and assigns it to the GreaterThan field.
func (o *KalturaESearchRange) SetGreaterThan(v int32) {
	o.GreaterThan = &v
}

// GetGreaterThanOrEqual returns the GreaterThanOrEqual field value if set, zero value otherwise.
func (o *KalturaESearchRange) GetGreaterThanOrEqual() int32 {
	if o == nil || o.GreaterThanOrEqual == nil {
		var ret int32
		return ret
	}
	return *o.GreaterThanOrEqual
}

// GetGreaterThanOrEqualOk returns a tuple with the GreaterThanOrEqual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchRange) GetGreaterThanOrEqualOk() (*int32, bool) {
	if o == nil || o.GreaterThanOrEqual == nil {
		return nil, false
	}
	return o.GreaterThanOrEqual, true
}

// HasGreaterThanOrEqual returns a boolean if a field has been set.
func (o *KalturaESearchRange) HasGreaterThanOrEqual() bool {
	if o != nil && o.GreaterThanOrEqual != nil {
		return true
	}

	return false
}

// SetGreaterThanOrEqual gets a reference to the given int32 and assigns it to the GreaterThanOrEqual field.
func (o *KalturaESearchRange) SetGreaterThanOrEqual(v int32) {
	o.GreaterThanOrEqual = &v
}

// GetLessThan returns the LessThan field value if set, zero value otherwise.
func (o *KalturaESearchRange) GetLessThan() int32 {
	if o == nil || o.LessThan == nil {
		var ret int32
		return ret
	}
	return *o.LessThan
}

// GetLessThanOk returns a tuple with the LessThan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchRange) GetLessThanOk() (*int32, bool) {
	if o == nil || o.LessThan == nil {
		return nil, false
	}
	return o.LessThan, true
}

// HasLessThan returns a boolean if a field has been set.
func (o *KalturaESearchRange) HasLessThan() bool {
	if o != nil && o.LessThan != nil {
		return true
	}

	return false
}

// SetLessThan gets a reference to the given int32 and assigns it to the LessThan field.
func (o *KalturaESearchRange) SetLessThan(v int32) {
	o.LessThan = &v
}

// GetLessThanOrEqual returns the LessThanOrEqual field value if set, zero value otherwise.
func (o *KalturaESearchRange) GetLessThanOrEqual() int32 {
	if o == nil || o.LessThanOrEqual == nil {
		var ret int32
		return ret
	}
	return *o.LessThanOrEqual
}

// GetLessThanOrEqualOk returns a tuple with the LessThanOrEqual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchRange) GetLessThanOrEqualOk() (*int32, bool) {
	if o == nil || o.LessThanOrEqual == nil {
		return nil, false
	}
	return o.LessThanOrEqual, true
}

// HasLessThanOrEqual returns a boolean if a field has been set.
func (o *KalturaESearchRange) HasLessThanOrEqual() bool {
	if o != nil && o.LessThanOrEqual != nil {
		return true
	}

	return false
}

// SetLessThanOrEqual gets a reference to the given int32 and assigns it to the LessThanOrEqual field.
func (o *KalturaESearchRange) SetLessThanOrEqual(v int32) {
	o.LessThanOrEqual = &v
}

func (o KalturaESearchRange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GreaterThan != nil {
		toSerialize["greaterThan"] = o.GreaterThan
	}
	if o.GreaterThanOrEqual != nil {
		toSerialize["greaterThanOrEqual"] = o.GreaterThanOrEqual
	}
	if o.LessThan != nil {
		toSerialize["lessThan"] = o.LessThan
	}
	if o.LessThanOrEqual != nil {
		toSerialize["lessThanOrEqual"] = o.LessThanOrEqual
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaESearchRange struct {
	value *KalturaESearchRange
	isSet bool
}

func (v NullableKalturaESearchRange) Get() *KalturaESearchRange {
	return v.value
}

func (v *NullableKalturaESearchRange) Set(val *KalturaESearchRange) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaESearchRange) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaESearchRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaESearchRange(val *KalturaESearchRange) *NullableKalturaESearchRange {
	return &NullableKalturaESearchRange{value: val, isSet: true}
}

func (v NullableKalturaESearchRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaESearchRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


