/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaModerationFlag struct for KalturaModerationFlag
type KalturaModerationFlag struct {
	// The comment that was added to the flag
	Comments *string `json:"comments,omitempty"`
	// `readOnly`
	CreatedAt *int32 `json:"createdAt,omitempty"`
	// Enum Type: `KalturaModerationFlagType`
	FlagType *int32 `json:"flagType,omitempty"`
	// If moderation flag is set for entry, this is the flagged entry id
	FlaggedEntryId *string `json:"flaggedEntryId,omitempty"`
	// If moderation flag is set for user, this is the flagged user id
	FlaggedUserId *string `json:"flaggedUserId,omitempty"`
	// `readOnly`  Moderation flag id
	Id *int32 `json:"id,omitempty"`
	// `readOnly`  Enum Type: `KalturaModerationObjectType`  The type of the moderation flag (entry or user)
	ModerationObjectType *string `json:"moderationObjectType,omitempty"`
	// `readOnly`
	PartnerId *int32 `json:"partnerId,omitempty"`
	// `readOnly`  Enum Type: `KalturaModerationFlagStatus`  The moderation flag status
	Status *string `json:"status,omitempty"`
	// `readOnly`
	UpdatedAt *int32 `json:"updatedAt,omitempty"`
	// `readOnly`  The user id that added the moderation flag
	UserId *string `json:"userId,omitempty"`
}

// NewKalturaModerationFlag instantiates a new KalturaModerationFlag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaModerationFlag() *KalturaModerationFlag {
	this := KalturaModerationFlag{}
	return &this
}

// NewKalturaModerationFlagWithDefaults instantiates a new KalturaModerationFlag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaModerationFlagWithDefaults() *KalturaModerationFlag {
	this := KalturaModerationFlag{}
	return &this
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *KalturaModerationFlag) GetComments() string {
	if o == nil || o.Comments == nil {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaModerationFlag) GetCommentsOk() (*string, bool) {
	if o == nil || o.Comments == nil {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *KalturaModerationFlag) HasComments() bool {
	if o != nil && o.Comments != nil {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *KalturaModerationFlag) SetComments(v string) {
	o.Comments = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *KalturaModerationFlag) GetCreatedAt() int32 {
	if o == nil || o.CreatedAt == nil {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaModerationFlag) GetCreatedAtOk() (*int32, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *KalturaModerationFlag) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *KalturaModerationFlag) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

// GetFlagType returns the FlagType field value if set, zero value otherwise.
func (o *KalturaModerationFlag) GetFlagType() int32 {
	if o == nil || o.FlagType == nil {
		var ret int32
		return ret
	}
	return *o.FlagType
}

// GetFlagTypeOk returns a tuple with the FlagType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaModerationFlag) GetFlagTypeOk() (*int32, bool) {
	if o == nil || o.FlagType == nil {
		return nil, false
	}
	return o.FlagType, true
}

// HasFlagType returns a boolean if a field has been set.
func (o *KalturaModerationFlag) HasFlagType() bool {
	if o != nil && o.FlagType != nil {
		return true
	}

	return false
}

// SetFlagType gets a reference to the given int32 and assigns it to the FlagType field.
func (o *KalturaModerationFlag) SetFlagType(v int32) {
	o.FlagType = &v
}

// GetFlaggedEntryId returns the FlaggedEntryId field value if set, zero value otherwise.
func (o *KalturaModerationFlag) GetFlaggedEntryId() string {
	if o == nil || o.FlaggedEntryId == nil {
		var ret string
		return ret
	}
	return *o.FlaggedEntryId
}

// GetFlaggedEntryIdOk returns a tuple with the FlaggedEntryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaModerationFlag) GetFlaggedEntryIdOk() (*string, bool) {
	if o == nil || o.FlaggedEntryId == nil {
		return nil, false
	}
	return o.FlaggedEntryId, true
}

// HasFlaggedEntryId returns a boolean if a field has been set.
func (o *KalturaModerationFlag) HasFlaggedEntryId() bool {
	if o != nil && o.FlaggedEntryId != nil {
		return true
	}

	return false
}

// SetFlaggedEntryId gets a reference to the given string and assigns it to the FlaggedEntryId field.
func (o *KalturaModerationFlag) SetFlaggedEntryId(v string) {
	o.FlaggedEntryId = &v
}

// GetFlaggedUserId returns the FlaggedUserId field value if set, zero value otherwise.
func (o *KalturaModerationFlag) GetFlaggedUserId() string {
	if o == nil || o.FlaggedUserId == nil {
		var ret string
		return ret
	}
	return *o.FlaggedUserId
}

// GetFlaggedUserIdOk returns a tuple with the FlaggedUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaModerationFlag) GetFlaggedUserIdOk() (*string, bool) {
	if o == nil || o.FlaggedUserId == nil {
		return nil, false
	}
	return o.FlaggedUserId, true
}

// HasFlaggedUserId returns a boolean if a field has been set.
func (o *KalturaModerationFlag) HasFlaggedUserId() bool {
	if o != nil && o.FlaggedUserId != nil {
		return true
	}

	return false
}

// SetFlaggedUserId gets a reference to the given string and assigns it to the FlaggedUserId field.
func (o *KalturaModerationFlag) SetFlaggedUserId(v string) {
	o.FlaggedUserId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KalturaModerationFlag) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaModerationFlag) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KalturaModerationFlag) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *KalturaModerationFlag) SetId(v int32) {
	o.Id = &v
}

// GetModerationObjectType returns the ModerationObjectType field value if set, zero value otherwise.
func (o *KalturaModerationFlag) GetModerationObjectType() string {
	if o == nil || o.ModerationObjectType == nil {
		var ret string
		return ret
	}
	return *o.ModerationObjectType
}

// GetModerationObjectTypeOk returns a tuple with the ModerationObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaModerationFlag) GetModerationObjectTypeOk() (*string, bool) {
	if o == nil || o.ModerationObjectType == nil {
		return nil, false
	}
	return o.ModerationObjectType, true
}

// HasModerationObjectType returns a boolean if a field has been set.
func (o *KalturaModerationFlag) HasModerationObjectType() bool {
	if o != nil && o.ModerationObjectType != nil {
		return true
	}

	return false
}

// SetModerationObjectType gets a reference to the given string and assigns it to the ModerationObjectType field.
func (o *KalturaModerationFlag) SetModerationObjectType(v string) {
	o.ModerationObjectType = &v
}

// GetPartnerId returns the PartnerId field value if set, zero value otherwise.
func (o *KalturaModerationFlag) GetPartnerId() int32 {
	if o == nil || o.PartnerId == nil {
		var ret int32
		return ret
	}
	return *o.PartnerId
}

// GetPartnerIdOk returns a tuple with the PartnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaModerationFlag) GetPartnerIdOk() (*int32, bool) {
	if o == nil || o.PartnerId == nil {
		return nil, false
	}
	return o.PartnerId, true
}

// HasPartnerId returns a boolean if a field has been set.
func (o *KalturaModerationFlag) HasPartnerId() bool {
	if o != nil && o.PartnerId != nil {
		return true
	}

	return false
}

// SetPartnerId gets a reference to the given int32 and assigns it to the PartnerId field.
func (o *KalturaModerationFlag) SetPartnerId(v int32) {
	o.PartnerId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *KalturaModerationFlag) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaModerationFlag) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *KalturaModerationFlag) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *KalturaModerationFlag) SetStatus(v string) {
	o.Status = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *KalturaModerationFlag) GetUpdatedAt() int32 {
	if o == nil || o.UpdatedAt == nil {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaModerationFlag) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *KalturaModerationFlag) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *KalturaModerationFlag) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *KalturaModerationFlag) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaModerationFlag) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *KalturaModerationFlag) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *KalturaModerationFlag) SetUserId(v string) {
	o.UserId = &v
}

func (o KalturaModerationFlag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Comments != nil {
		toSerialize["comments"] = o.Comments
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.FlagType != nil {
		toSerialize["flagType"] = o.FlagType
	}
	if o.FlaggedEntryId != nil {
		toSerialize["flaggedEntryId"] = o.FlaggedEntryId
	}
	if o.FlaggedUserId != nil {
		toSerialize["flaggedUserId"] = o.FlaggedUserId
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ModerationObjectType != nil {
		toSerialize["moderationObjectType"] = o.ModerationObjectType
	}
	if o.PartnerId != nil {
		toSerialize["partnerId"] = o.PartnerId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaModerationFlag struct {
	value *KalturaModerationFlag
	isSet bool
}

func (v NullableKalturaModerationFlag) Get() *KalturaModerationFlag {
	return v.value
}

func (v *NullableKalturaModerationFlag) Set(val *KalturaModerationFlag) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaModerationFlag) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaModerationFlag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaModerationFlag(val *KalturaModerationFlag) *NullableKalturaModerationFlag {
	return &NullableKalturaModerationFlag{value: val, isSet: true}
}

func (v NullableKalturaModerationFlag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaModerationFlag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


