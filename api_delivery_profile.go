/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// DeliveryProfileApiService DeliveryProfileApi service
type DeliveryProfileApiService service

type ApiDeliveryProfileAddRequest struct {
	ctx context.Context
	ApiService *DeliveryProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DeliveryProfileAddRequest
}

func (r ApiDeliveryProfileAddRequest) Ks(ks string) ApiDeliveryProfileAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDeliveryProfileAddRequest) Format(format int32) ApiDeliveryProfileAddRequest {
	r.format = &format
	return r
}

func (r ApiDeliveryProfileAddRequest) ClientTag(clientTag string) ApiDeliveryProfileAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDeliveryProfileAddRequest) PartnerId(partnerId int32) ApiDeliveryProfileAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDeliveryProfileAddRequest) Body(body DeliveryProfileAddRequest) ApiDeliveryProfileAddRequest {
	r.body = &body
	return r
}

func (r ApiDeliveryProfileAddRequest) Execute() (*KalturaDeliveryProfile, *http.Response, error) {
	return r.ApiService.DeliveryProfileAddExecute(r)
}

/*
DeliveryProfileAdd Method for DeliveryProfileAdd

Add new delivery.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeliveryProfileAddRequest
*/
func (a *DeliveryProfileApiService) DeliveryProfileAdd(ctx context.Context) ApiDeliveryProfileAddRequest {
	return ApiDeliveryProfileAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDeliveryProfile
func (a *DeliveryProfileApiService) DeliveryProfileAddExecute(r ApiDeliveryProfileAddRequest) (*KalturaDeliveryProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDeliveryProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeliveryProfileApiService.DeliveryProfileAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/deliveryprofile/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeliveryProfileCloneRequest struct {
	ctx context.Context
	ApiService *DeliveryProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DeliveryProfileCloneRequest
}

func (r ApiDeliveryProfileCloneRequest) Ks(ks string) ApiDeliveryProfileCloneRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDeliveryProfileCloneRequest) Format(format int32) ApiDeliveryProfileCloneRequest {
	r.format = &format
	return r
}

func (r ApiDeliveryProfileCloneRequest) ClientTag(clientTag string) ApiDeliveryProfileCloneRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDeliveryProfileCloneRequest) PartnerId(partnerId int32) ApiDeliveryProfileCloneRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDeliveryProfileCloneRequest) Body(body DeliveryProfileCloneRequest) ApiDeliveryProfileCloneRequest {
	r.body = &body
	return r
}

func (r ApiDeliveryProfileCloneRequest) Execute() (*KalturaDeliveryProfile, *http.Response, error) {
	return r.ApiService.DeliveryProfileCloneExecute(r)
}

/*
DeliveryProfileClone Method for DeliveryProfileClone

Add delivery based on existing delivery.

Must provide valid sourceDeliveryId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeliveryProfileCloneRequest
*/
func (a *DeliveryProfileApiService) DeliveryProfileClone(ctx context.Context) ApiDeliveryProfileCloneRequest {
	return ApiDeliveryProfileCloneRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDeliveryProfile
func (a *DeliveryProfileApiService) DeliveryProfileCloneExecute(r ApiDeliveryProfileCloneRequest) (*KalturaDeliveryProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDeliveryProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeliveryProfileApiService.DeliveryProfileClone")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/deliveryprofile/action/clone"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeliveryProfileGetRequest struct {
	ctx context.Context
	ApiService *DeliveryProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AnnotationDeleteRequest
}

func (r ApiDeliveryProfileGetRequest) Ks(ks string) ApiDeliveryProfileGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDeliveryProfileGetRequest) Format(format int32) ApiDeliveryProfileGetRequest {
	r.format = &format
	return r
}

func (r ApiDeliveryProfileGetRequest) ClientTag(clientTag string) ApiDeliveryProfileGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDeliveryProfileGetRequest) PartnerId(partnerId int32) ApiDeliveryProfileGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDeliveryProfileGetRequest) Body(body AnnotationDeleteRequest) ApiDeliveryProfileGetRequest {
	r.body = &body
	return r
}

func (r ApiDeliveryProfileGetRequest) Execute() (*KalturaDeliveryProfile, *http.Response, error) {
	return r.ApiService.DeliveryProfileGetExecute(r)
}

/*
DeliveryProfileGet Method for DeliveryProfileGet

Get delivery by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeliveryProfileGetRequest
*/
func (a *DeliveryProfileApiService) DeliveryProfileGet(ctx context.Context) ApiDeliveryProfileGetRequest {
	return ApiDeliveryProfileGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDeliveryProfile
func (a *DeliveryProfileApiService) DeliveryProfileGetExecute(r ApiDeliveryProfileGetRequest) (*KalturaDeliveryProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDeliveryProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeliveryProfileApiService.DeliveryProfileGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/deliveryprofile/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeliveryProfileListRequest struct {
	ctx context.Context
	ApiService *DeliveryProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DeliveryProfileListRequest
}

func (r ApiDeliveryProfileListRequest) Ks(ks string) ApiDeliveryProfileListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDeliveryProfileListRequest) Format(format int32) ApiDeliveryProfileListRequest {
	r.format = &format
	return r
}

func (r ApiDeliveryProfileListRequest) ClientTag(clientTag string) ApiDeliveryProfileListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDeliveryProfileListRequest) PartnerId(partnerId int32) ApiDeliveryProfileListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDeliveryProfileListRequest) Body(body DeliveryProfileListRequest) ApiDeliveryProfileListRequest {
	r.body = &body
	return r
}

func (r ApiDeliveryProfileListRequest) Execute() (*KalturaDeliveryProfileListResponse, *http.Response, error) {
	return r.ApiService.DeliveryProfileListExecute(r)
}

/*
DeliveryProfileList Method for DeliveryProfileList

Retrieve a list of available delivery depends on the filter given

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeliveryProfileListRequest
*/
func (a *DeliveryProfileApiService) DeliveryProfileList(ctx context.Context) ApiDeliveryProfileListRequest {
	return ApiDeliveryProfileListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDeliveryProfileListResponse
func (a *DeliveryProfileApiService) DeliveryProfileListExecute(r ApiDeliveryProfileListRequest) (*KalturaDeliveryProfileListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDeliveryProfileListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeliveryProfileApiService.DeliveryProfileList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/deliveryprofile/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeliveryProfileUpdateRequest struct {
	ctx context.Context
	ApiService *DeliveryProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DeliveryProfileUpdateRequest
}

func (r ApiDeliveryProfileUpdateRequest) Ks(ks string) ApiDeliveryProfileUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDeliveryProfileUpdateRequest) Format(format int32) ApiDeliveryProfileUpdateRequest {
	r.format = &format
	return r
}

func (r ApiDeliveryProfileUpdateRequest) ClientTag(clientTag string) ApiDeliveryProfileUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDeliveryProfileUpdateRequest) PartnerId(partnerId int32) ApiDeliveryProfileUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDeliveryProfileUpdateRequest) Body(body DeliveryProfileUpdateRequest) ApiDeliveryProfileUpdateRequest {
	r.body = &body
	return r
}

func (r ApiDeliveryProfileUpdateRequest) Execute() (*KalturaDeliveryProfile, *http.Response, error) {
	return r.ApiService.DeliveryProfileUpdateExecute(r)
}

/*
DeliveryProfileUpdate Method for DeliveryProfileUpdate

Update existing delivery profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeliveryProfileUpdateRequest
*/
func (a *DeliveryProfileApiService) DeliveryProfileUpdate(ctx context.Context) ApiDeliveryProfileUpdateRequest {
	return ApiDeliveryProfileUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDeliveryProfile
func (a *DeliveryProfileApiService) DeliveryProfileUpdateExecute(r ApiDeliveryProfileUpdateRequest) (*KalturaDeliveryProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDeliveryProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeliveryProfileApiService.DeliveryProfileUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/deliveryprofile/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
