/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaESearchItemDataResult struct for KalturaESearchItemDataResult
type KalturaESearchItemDataResult struct {
	Items []KalturaESearchItemData `json:"items,omitempty"`
	ItemsType *string `json:"itemsType,omitempty"`
	TotalCount *int32 `json:"totalCount,omitempty"`
}

// NewKalturaESearchItemDataResult instantiates a new KalturaESearchItemDataResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaESearchItemDataResult() *KalturaESearchItemDataResult {
	this := KalturaESearchItemDataResult{}
	return &this
}

// NewKalturaESearchItemDataResultWithDefaults instantiates a new KalturaESearchItemDataResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaESearchItemDataResultWithDefaults() *KalturaESearchItemDataResult {
	this := KalturaESearchItemDataResult{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *KalturaESearchItemDataResult) GetItems() []KalturaESearchItemData {
	if o == nil || o.Items == nil {
		var ret []KalturaESearchItemData
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchItemDataResult) GetItemsOk() ([]KalturaESearchItemData, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *KalturaESearchItemDataResult) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []KalturaESearchItemData and assigns it to the Items field.
func (o *KalturaESearchItemDataResult) SetItems(v []KalturaESearchItemData) {
	o.Items = v
}

// GetItemsType returns the ItemsType field value if set, zero value otherwise.
func (o *KalturaESearchItemDataResult) GetItemsType() string {
	if o == nil || o.ItemsType == nil {
		var ret string
		return ret
	}
	return *o.ItemsType
}

// GetItemsTypeOk returns a tuple with the ItemsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchItemDataResult) GetItemsTypeOk() (*string, bool) {
	if o == nil || o.ItemsType == nil {
		return nil, false
	}
	return o.ItemsType, true
}

// HasItemsType returns a boolean if a field has been set.
func (o *KalturaESearchItemDataResult) HasItemsType() bool {
	if o != nil && o.ItemsType != nil {
		return true
	}

	return false
}

// SetItemsType gets a reference to the given string and assigns it to the ItemsType field.
func (o *KalturaESearchItemDataResult) SetItemsType(v string) {
	o.ItemsType = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *KalturaESearchItemDataResult) GetTotalCount() int32 {
	if o == nil || o.TotalCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchItemDataResult) GetTotalCountOk() (*int32, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *KalturaESearchItemDataResult) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *KalturaESearchItemDataResult) SetTotalCount(v int32) {
	o.TotalCount = &v
}

func (o KalturaESearchItemDataResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.ItemsType != nil {
		toSerialize["itemsType"] = o.ItemsType
	}
	if o.TotalCount != nil {
		toSerialize["totalCount"] = o.TotalCount
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaESearchItemDataResult struct {
	value *KalturaESearchItemDataResult
	isSet bool
}

func (v NullableKalturaESearchItemDataResult) Get() *KalturaESearchItemDataResult {
	return v.value
}

func (v *NullableKalturaESearchItemDataResult) Set(val *KalturaESearchItemDataResult) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaESearchItemDataResult) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaESearchItemDataResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaESearchItemDataResult(val *KalturaESearchItemDataResult) *NullableKalturaESearchItemDataResult {
	return &NullableKalturaESearchItemDataResult{value: val, isSet: true}
}

func (v NullableKalturaESearchItemDataResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaESearchItemDataResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


