/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaUploadResponse struct for KalturaUploadResponse
type KalturaUploadResponse struct {
	// Enum Type: `KalturaUploadErrorCode`
	ErrorCode *int32 `json:"errorCode,omitempty"`
	ErrorDescription *string `json:"errorDescription,omitempty"`
	FileSize *int32 `json:"fileSize,omitempty"`
	UploadTokenId *string `json:"uploadTokenId,omitempty"`
}

// NewKalturaUploadResponse instantiates a new KalturaUploadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaUploadResponse() *KalturaUploadResponse {
	this := KalturaUploadResponse{}
	return &this
}

// NewKalturaUploadResponseWithDefaults instantiates a new KalturaUploadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaUploadResponseWithDefaults() *KalturaUploadResponse {
	this := KalturaUploadResponse{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *KalturaUploadResponse) GetErrorCode() int32 {
	if o == nil || o.ErrorCode == nil {
		var ret int32
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaUploadResponse) GetErrorCodeOk() (*int32, bool) {
	if o == nil || o.ErrorCode == nil {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *KalturaUploadResponse) HasErrorCode() bool {
	if o != nil && o.ErrorCode != nil {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int32 and assigns it to the ErrorCode field.
func (o *KalturaUploadResponse) SetErrorCode(v int32) {
	o.ErrorCode = &v
}

// GetErrorDescription returns the ErrorDescription field value if set, zero value otherwise.
func (o *KalturaUploadResponse) GetErrorDescription() string {
	if o == nil || o.ErrorDescription == nil {
		var ret string
		return ret
	}
	return *o.ErrorDescription
}

// GetErrorDescriptionOk returns a tuple with the ErrorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaUploadResponse) GetErrorDescriptionOk() (*string, bool) {
	if o == nil || o.ErrorDescription == nil {
		return nil, false
	}
	return o.ErrorDescription, true
}

// HasErrorDescription returns a boolean if a field has been set.
func (o *KalturaUploadResponse) HasErrorDescription() bool {
	if o != nil && o.ErrorDescription != nil {
		return true
	}

	return false
}

// SetErrorDescription gets a reference to the given string and assigns it to the ErrorDescription field.
func (o *KalturaUploadResponse) SetErrorDescription(v string) {
	o.ErrorDescription = &v
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *KalturaUploadResponse) GetFileSize() int32 {
	if o == nil || o.FileSize == nil {
		var ret int32
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaUploadResponse) GetFileSizeOk() (*int32, bool) {
	if o == nil || o.FileSize == nil {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *KalturaUploadResponse) HasFileSize() bool {
	if o != nil && o.FileSize != nil {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given int32 and assigns it to the FileSize field.
func (o *KalturaUploadResponse) SetFileSize(v int32) {
	o.FileSize = &v
}

// GetUploadTokenId returns the UploadTokenId field value if set, zero value otherwise.
func (o *KalturaUploadResponse) GetUploadTokenId() string {
	if o == nil || o.UploadTokenId == nil {
		var ret string
		return ret
	}
	return *o.UploadTokenId
}

// GetUploadTokenIdOk returns a tuple with the UploadTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaUploadResponse) GetUploadTokenIdOk() (*string, bool) {
	if o == nil || o.UploadTokenId == nil {
		return nil, false
	}
	return o.UploadTokenId, true
}

// HasUploadTokenId returns a boolean if a field has been set.
func (o *KalturaUploadResponse) HasUploadTokenId() bool {
	if o != nil && o.UploadTokenId != nil {
		return true
	}

	return false
}

// SetUploadTokenId gets a reference to the given string and assigns it to the UploadTokenId field.
func (o *KalturaUploadResponse) SetUploadTokenId(v string) {
	o.UploadTokenId = &v
}

func (o KalturaUploadResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorCode != nil {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if o.ErrorDescription != nil {
		toSerialize["errorDescription"] = o.ErrorDescription
	}
	if o.FileSize != nil {
		toSerialize["fileSize"] = o.FileSize
	}
	if o.UploadTokenId != nil {
		toSerialize["uploadTokenId"] = o.UploadTokenId
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaUploadResponse struct {
	value *KalturaUploadResponse
	isSet bool
}

func (v NullableKalturaUploadResponse) Get() *KalturaUploadResponse {
	return v.value
}

func (v *NullableKalturaUploadResponse) Set(val *KalturaUploadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaUploadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaUploadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaUploadResponse(val *KalturaUploadResponse) *NullableKalturaUploadResponse {
	return &NullableKalturaUploadResponse{value: val, isSet: true}
}

func (v NullableKalturaUploadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaUploadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


