/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// ServerNodeApiService ServerNodeApi service
type ServerNodeApiService service

type ApiServerNodeAddRequest struct {
	ctx context.Context
	ApiService *ServerNodeApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ServerNodeAddRequest
}

func (r ApiServerNodeAddRequest) Ks(ks string) ApiServerNodeAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiServerNodeAddRequest) Format(format int32) ApiServerNodeAddRequest {
	r.format = &format
	return r
}

func (r ApiServerNodeAddRequest) ClientTag(clientTag string) ApiServerNodeAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiServerNodeAddRequest) PartnerId(partnerId int32) ApiServerNodeAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiServerNodeAddRequest) Body(body ServerNodeAddRequest) ApiServerNodeAddRequest {
	r.body = &body
	return r
}

func (r ApiServerNodeAddRequest) Execute() (*KalturaServerNode, *http.Response, error) {
	return r.ApiService.ServerNodeAddExecute(r)
}

/*
ServerNodeAdd Method for ServerNodeAdd

Adds a server node to the Kaltura DB.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServerNodeAddRequest
*/
func (a *ServerNodeApiService) ServerNodeAdd(ctx context.Context) ApiServerNodeAddRequest {
	return ApiServerNodeAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaServerNode
func (a *ServerNodeApiService) ServerNodeAddExecute(r ApiServerNodeAddRequest) (*KalturaServerNode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaServerNode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerNodeApiService.ServerNodeAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/servernode/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServerNodeDeleteRequest struct {
	ctx context.Context
	ApiService *ServerNodeApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ServerNodeDeleteRequest
}

func (r ApiServerNodeDeleteRequest) Ks(ks string) ApiServerNodeDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiServerNodeDeleteRequest) Format(format int32) ApiServerNodeDeleteRequest {
	r.format = &format
	return r
}

func (r ApiServerNodeDeleteRequest) ClientTag(clientTag string) ApiServerNodeDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiServerNodeDeleteRequest) PartnerId(partnerId int32) ApiServerNodeDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiServerNodeDeleteRequest) Body(body ServerNodeDeleteRequest) ApiServerNodeDeleteRequest {
	r.body = &body
	return r
}

func (r ApiServerNodeDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ServerNodeDeleteExecute(r)
}

/*
ServerNodeDelete Method for ServerNodeDelete

delete server node by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServerNodeDeleteRequest
*/
func (a *ServerNodeApiService) ServerNodeDelete(ctx context.Context) ApiServerNodeDeleteRequest {
	return ApiServerNodeDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ServerNodeApiService) ServerNodeDeleteExecute(r ApiServerNodeDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerNodeApiService.ServerNodeDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/servernode/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiServerNodeDisableRequest struct {
	ctx context.Context
	ApiService *ServerNodeApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ServerNodeDeleteRequest
}

func (r ApiServerNodeDisableRequest) Ks(ks string) ApiServerNodeDisableRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiServerNodeDisableRequest) Format(format int32) ApiServerNodeDisableRequest {
	r.format = &format
	return r
}

func (r ApiServerNodeDisableRequest) ClientTag(clientTag string) ApiServerNodeDisableRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiServerNodeDisableRequest) PartnerId(partnerId int32) ApiServerNodeDisableRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiServerNodeDisableRequest) Body(body ServerNodeDeleteRequest) ApiServerNodeDisableRequest {
	r.body = &body
	return r
}

func (r ApiServerNodeDisableRequest) Execute() (*KalturaServerNode, *http.Response, error) {
	return r.ApiService.ServerNodeDisableExecute(r)
}

/*
ServerNodeDisable Method for ServerNodeDisable

Disable server node by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServerNodeDisableRequest
*/
func (a *ServerNodeApiService) ServerNodeDisable(ctx context.Context) ApiServerNodeDisableRequest {
	return ApiServerNodeDisableRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaServerNode
func (a *ServerNodeApiService) ServerNodeDisableExecute(r ApiServerNodeDisableRequest) (*KalturaServerNode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaServerNode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerNodeApiService.ServerNodeDisable")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/servernode/action/disable"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServerNodeEnableRequest struct {
	ctx context.Context
	ApiService *ServerNodeApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ServerNodeDeleteRequest
}

func (r ApiServerNodeEnableRequest) Ks(ks string) ApiServerNodeEnableRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiServerNodeEnableRequest) Format(format int32) ApiServerNodeEnableRequest {
	r.format = &format
	return r
}

func (r ApiServerNodeEnableRequest) ClientTag(clientTag string) ApiServerNodeEnableRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiServerNodeEnableRequest) PartnerId(partnerId int32) ApiServerNodeEnableRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiServerNodeEnableRequest) Body(body ServerNodeDeleteRequest) ApiServerNodeEnableRequest {
	r.body = &body
	return r
}

func (r ApiServerNodeEnableRequest) Execute() (*KalturaServerNode, *http.Response, error) {
	return r.ApiService.ServerNodeEnableExecute(r)
}

/*
ServerNodeEnable Method for ServerNodeEnable

Enable server node by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServerNodeEnableRequest
*/
func (a *ServerNodeApiService) ServerNodeEnable(ctx context.Context) ApiServerNodeEnableRequest {
	return ApiServerNodeEnableRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaServerNode
func (a *ServerNodeApiService) ServerNodeEnableExecute(r ApiServerNodeEnableRequest) (*KalturaServerNode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaServerNode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerNodeApiService.ServerNodeEnable")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/servernode/action/enable"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServerNodeGetRequest struct {
	ctx context.Context
	ApiService *ServerNodeApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ServerNodeGetRequest
}

func (r ApiServerNodeGetRequest) Ks(ks string) ApiServerNodeGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiServerNodeGetRequest) Format(format int32) ApiServerNodeGetRequest {
	r.format = &format
	return r
}

func (r ApiServerNodeGetRequest) ClientTag(clientTag string) ApiServerNodeGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiServerNodeGetRequest) PartnerId(partnerId int32) ApiServerNodeGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiServerNodeGetRequest) Body(body ServerNodeGetRequest) ApiServerNodeGetRequest {
	r.body = &body
	return r
}

func (r ApiServerNodeGetRequest) Execute() (*KalturaServerNode, *http.Response, error) {
	return r.ApiService.ServerNodeGetExecute(r)
}

/*
ServerNodeGet Method for ServerNodeGet

Get server node by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServerNodeGetRequest
*/
func (a *ServerNodeApiService) ServerNodeGet(ctx context.Context) ApiServerNodeGetRequest {
	return ApiServerNodeGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaServerNode
func (a *ServerNodeApiService) ServerNodeGetExecute(r ApiServerNodeGetRequest) (*KalturaServerNode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaServerNode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerNodeApiService.ServerNodeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/servernode/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServerNodeGetFullPathRequest struct {
	ctx context.Context
	ApiService *ServerNodeApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ServerNodeGetFullPathRequest
}

func (r ApiServerNodeGetFullPathRequest) Ks(ks string) ApiServerNodeGetFullPathRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiServerNodeGetFullPathRequest) Format(format int32) ApiServerNodeGetFullPathRequest {
	r.format = &format
	return r
}

func (r ApiServerNodeGetFullPathRequest) ClientTag(clientTag string) ApiServerNodeGetFullPathRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiServerNodeGetFullPathRequest) PartnerId(partnerId int32) ApiServerNodeGetFullPathRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiServerNodeGetFullPathRequest) Body(body ServerNodeGetFullPathRequest) ApiServerNodeGetFullPathRequest {
	r.body = &body
	return r
}

func (r ApiServerNodeGetFullPathRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ServerNodeGetFullPathExecute(r)
}

/*
ServerNodeGetFullPath Method for ServerNodeGetFullPath

Get the edge server node full path

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServerNodeGetFullPathRequest
*/
func (a *ServerNodeApiService) ServerNodeGetFullPath(ctx context.Context) ApiServerNodeGetFullPathRequest {
	return ApiServerNodeGetFullPathRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ServerNodeApiService) ServerNodeGetFullPathExecute(r ApiServerNodeGetFullPathRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerNodeApiService.ServerNodeGetFullPath")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/servernode/action/getFullPath"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServerNodeListRequest struct {
	ctx context.Context
	ApiService *ServerNodeApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ServerNodeListRequest
}

func (r ApiServerNodeListRequest) Ks(ks string) ApiServerNodeListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiServerNodeListRequest) Format(format int32) ApiServerNodeListRequest {
	r.format = &format
	return r
}

func (r ApiServerNodeListRequest) ClientTag(clientTag string) ApiServerNodeListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiServerNodeListRequest) PartnerId(partnerId int32) ApiServerNodeListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiServerNodeListRequest) Body(body ServerNodeListRequest) ApiServerNodeListRequest {
	r.body = &body
	return r
}

func (r ApiServerNodeListRequest) Execute() (*KalturaServerNodeListResponse, *http.Response, error) {
	return r.ApiService.ServerNodeListExecute(r)
}

/*
ServerNodeList Method for ServerNodeList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServerNodeListRequest
*/
func (a *ServerNodeApiService) ServerNodeList(ctx context.Context) ApiServerNodeListRequest {
	return ApiServerNodeListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaServerNodeListResponse
func (a *ServerNodeApiService) ServerNodeListExecute(r ApiServerNodeListRequest) (*KalturaServerNodeListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaServerNodeListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerNodeApiService.ServerNodeList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/servernode/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServerNodeMarkOfflineRequest struct {
	ctx context.Context
	ApiService *ServerNodeApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ServerNodeDeleteRequest
}

func (r ApiServerNodeMarkOfflineRequest) Ks(ks string) ApiServerNodeMarkOfflineRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiServerNodeMarkOfflineRequest) Format(format int32) ApiServerNodeMarkOfflineRequest {
	r.format = &format
	return r
}

func (r ApiServerNodeMarkOfflineRequest) ClientTag(clientTag string) ApiServerNodeMarkOfflineRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiServerNodeMarkOfflineRequest) PartnerId(partnerId int32) ApiServerNodeMarkOfflineRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiServerNodeMarkOfflineRequest) Body(body ServerNodeDeleteRequest) ApiServerNodeMarkOfflineRequest {
	r.body = &body
	return r
}

func (r ApiServerNodeMarkOfflineRequest) Execute() (*KalturaServerNode, *http.Response, error) {
	return r.ApiService.ServerNodeMarkOfflineExecute(r)
}

/*
ServerNodeMarkOffline Method for ServerNodeMarkOffline

Mark server node offline

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServerNodeMarkOfflineRequest
*/
func (a *ServerNodeApiService) ServerNodeMarkOffline(ctx context.Context) ApiServerNodeMarkOfflineRequest {
	return ApiServerNodeMarkOfflineRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaServerNode
func (a *ServerNodeApiService) ServerNodeMarkOfflineExecute(r ApiServerNodeMarkOfflineRequest) (*KalturaServerNode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaServerNode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerNodeApiService.ServerNodeMarkOffline")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/servernode/action/markOffline"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServerNodeReportStatusRequest struct {
	ctx context.Context
	ApiService *ServerNodeApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ServerNodeReportStatusRequest
}

func (r ApiServerNodeReportStatusRequest) Ks(ks string) ApiServerNodeReportStatusRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiServerNodeReportStatusRequest) Format(format int32) ApiServerNodeReportStatusRequest {
	r.format = &format
	return r
}

func (r ApiServerNodeReportStatusRequest) ClientTag(clientTag string) ApiServerNodeReportStatusRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiServerNodeReportStatusRequest) PartnerId(partnerId int32) ApiServerNodeReportStatusRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiServerNodeReportStatusRequest) Body(body ServerNodeReportStatusRequest) ApiServerNodeReportStatusRequest {
	r.body = &body
	return r
}

func (r ApiServerNodeReportStatusRequest) Execute() (*KalturaServerNode, *http.Response, error) {
	return r.ApiService.ServerNodeReportStatusExecute(r)
}

/*
ServerNodeReportStatus Method for ServerNodeReportStatus

Update server node status

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServerNodeReportStatusRequest
*/
func (a *ServerNodeApiService) ServerNodeReportStatus(ctx context.Context) ApiServerNodeReportStatusRequest {
	return ApiServerNodeReportStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaServerNode
func (a *ServerNodeApiService) ServerNodeReportStatusExecute(r ApiServerNodeReportStatusRequest) (*KalturaServerNode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaServerNode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerNodeApiService.ServerNodeReportStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/servernode/action/reportStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServerNodeUpdateRequest struct {
	ctx context.Context
	ApiService *ServerNodeApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ServerNodeUpdateRequest
}

func (r ApiServerNodeUpdateRequest) Ks(ks string) ApiServerNodeUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiServerNodeUpdateRequest) Format(format int32) ApiServerNodeUpdateRequest {
	r.format = &format
	return r
}

func (r ApiServerNodeUpdateRequest) ClientTag(clientTag string) ApiServerNodeUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiServerNodeUpdateRequest) PartnerId(partnerId int32) ApiServerNodeUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiServerNodeUpdateRequest) Body(body ServerNodeUpdateRequest) ApiServerNodeUpdateRequest {
	r.body = &body
	return r
}

func (r ApiServerNodeUpdateRequest) Execute() (*KalturaServerNode, *http.Response, error) {
	return r.ApiService.ServerNodeUpdateExecute(r)
}

/*
ServerNodeUpdate Method for ServerNodeUpdate

Update server node by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServerNodeUpdateRequest
*/
func (a *ServerNodeApiService) ServerNodeUpdate(ctx context.Context) ApiServerNodeUpdateRequest {
	return ApiServerNodeUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaServerNode
func (a *ServerNodeApiService) ServerNodeUpdateExecute(r ApiServerNodeUpdateRequest) (*KalturaServerNode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaServerNode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerNodeApiService.ServerNodeUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/servernode/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
