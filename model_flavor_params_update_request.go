/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FlavorParamsUpdateRequest struct for FlavorParamsUpdateRequest
type FlavorParamsUpdateRequest struct {
	FlavorParams KalturaFlavorParams `json:"flavorParams"`
	Id int32 `json:"id"`
}

// NewFlavorParamsUpdateRequest instantiates a new FlavorParamsUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlavorParamsUpdateRequest(flavorParams KalturaFlavorParams, id int32) *FlavorParamsUpdateRequest {
	this := FlavorParamsUpdateRequest{}
	this.FlavorParams = flavorParams
	this.Id = id
	return &this
}

// NewFlavorParamsUpdateRequestWithDefaults instantiates a new FlavorParamsUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlavorParamsUpdateRequestWithDefaults() *FlavorParamsUpdateRequest {
	this := FlavorParamsUpdateRequest{}
	return &this
}

// GetFlavorParams returns the FlavorParams field value
func (o *FlavorParamsUpdateRequest) GetFlavorParams() KalturaFlavorParams {
	if o == nil {
		var ret KalturaFlavorParams
		return ret
	}

	return o.FlavorParams
}

// GetFlavorParamsOk returns a tuple with the FlavorParams field value
// and a boolean to check if the value has been set.
func (o *FlavorParamsUpdateRequest) GetFlavorParamsOk() (*KalturaFlavorParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlavorParams, true
}

// SetFlavorParams sets field value
func (o *FlavorParamsUpdateRequest) SetFlavorParams(v KalturaFlavorParams) {
	o.FlavorParams = v
}

// GetId returns the Id field value
func (o *FlavorParamsUpdateRequest) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FlavorParamsUpdateRequest) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FlavorParamsUpdateRequest) SetId(v int32) {
	o.Id = v
}

func (o FlavorParamsUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["flavorParams"] = o.FlavorParams
	}
	if true {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableFlavorParamsUpdateRequest struct {
	value *FlavorParamsUpdateRequest
	isSet bool
}

func (v NullableFlavorParamsUpdateRequest) Get() *FlavorParamsUpdateRequest {
	return v.value
}

func (v *NullableFlavorParamsUpdateRequest) Set(val *FlavorParamsUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFlavorParamsUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFlavorParamsUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlavorParamsUpdateRequest(val *FlavorParamsUpdateRequest) *NullableFlavorParamsUpdateRequest {
	return &NullableFlavorParamsUpdateRequest{value: val, isSet: true}
}

func (v NullableFlavorParamsUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlavorParamsUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


