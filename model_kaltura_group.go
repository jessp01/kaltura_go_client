/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaGroup struct for KalturaGroup
type KalturaGroup struct {
	KalturaBaseUser
}

// NewKalturaGroup instantiates a new KalturaGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaGroup() *KalturaGroup {
	this := KalturaGroup{}
	return &this
}

// NewKalturaGroupWithDefaults instantiates a new KalturaGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaGroupWithDefaults() *KalturaGroup {
	this := KalturaGroup{}
	return &this
}

func (o KalturaGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedKalturaBaseUser, errKalturaBaseUser := json.Marshal(o.KalturaBaseUser)
	if errKalturaBaseUser != nil {
		return []byte{}, errKalturaBaseUser
	}
	errKalturaBaseUser = json.Unmarshal([]byte(serializedKalturaBaseUser), &toSerialize)
	if errKalturaBaseUser != nil {
		return []byte{}, errKalturaBaseUser
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaGroup struct {
	value *KalturaGroup
	isSet bool
}

func (v NullableKalturaGroup) Get() *KalturaGroup {
	return v.value
}

func (v *NullableKalturaGroup) Set(val *KalturaGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaGroup(val *KalturaGroup) *NullableKalturaGroup {
	return &NullableKalturaGroup{value: val, isSet: true}
}

func (v NullableKalturaGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


