/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaReportResponseOptions struct for KalturaReportResponseOptions
type KalturaReportResponseOptions struct {
	Delimiter *string `json:"delimiter,omitempty"`
	SkipEmptyDates *bool `json:"skipEmptyDates,omitempty"`
}

// NewKalturaReportResponseOptions instantiates a new KalturaReportResponseOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaReportResponseOptions() *KalturaReportResponseOptions {
	this := KalturaReportResponseOptions{}
	return &this
}

// NewKalturaReportResponseOptionsWithDefaults instantiates a new KalturaReportResponseOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaReportResponseOptionsWithDefaults() *KalturaReportResponseOptions {
	this := KalturaReportResponseOptions{}
	return &this
}

// GetDelimiter returns the Delimiter field value if set, zero value otherwise.
func (o *KalturaReportResponseOptions) GetDelimiter() string {
	if o == nil || o.Delimiter == nil {
		var ret string
		return ret
	}
	return *o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaReportResponseOptions) GetDelimiterOk() (*string, bool) {
	if o == nil || o.Delimiter == nil {
		return nil, false
	}
	return o.Delimiter, true
}

// HasDelimiter returns a boolean if a field has been set.
func (o *KalturaReportResponseOptions) HasDelimiter() bool {
	if o != nil && o.Delimiter != nil {
		return true
	}

	return false
}

// SetDelimiter gets a reference to the given string and assigns it to the Delimiter field.
func (o *KalturaReportResponseOptions) SetDelimiter(v string) {
	o.Delimiter = &v
}

// GetSkipEmptyDates returns the SkipEmptyDates field value if set, zero value otherwise.
func (o *KalturaReportResponseOptions) GetSkipEmptyDates() bool {
	if o == nil || o.SkipEmptyDates == nil {
		var ret bool
		return ret
	}
	return *o.SkipEmptyDates
}

// GetSkipEmptyDatesOk returns a tuple with the SkipEmptyDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaReportResponseOptions) GetSkipEmptyDatesOk() (*bool, bool) {
	if o == nil || o.SkipEmptyDates == nil {
		return nil, false
	}
	return o.SkipEmptyDates, true
}

// HasSkipEmptyDates returns a boolean if a field has been set.
func (o *KalturaReportResponseOptions) HasSkipEmptyDates() bool {
	if o != nil && o.SkipEmptyDates != nil {
		return true
	}

	return false
}

// SetSkipEmptyDates gets a reference to the given bool and assigns it to the SkipEmptyDates field.
func (o *KalturaReportResponseOptions) SetSkipEmptyDates(v bool) {
	o.SkipEmptyDates = &v
}

func (o KalturaReportResponseOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Delimiter != nil {
		toSerialize["delimiter"] = o.Delimiter
	}
	if o.SkipEmptyDates != nil {
		toSerialize["skipEmptyDates"] = o.SkipEmptyDates
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaReportResponseOptions struct {
	value *KalturaReportResponseOptions
	isSet bool
}

func (v NullableKalturaReportResponseOptions) Get() *KalturaReportResponseOptions {
	return v.value
}

func (v *NullableKalturaReportResponseOptions) Set(val *KalturaReportResponseOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaReportResponseOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaReportResponseOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaReportResponseOptions(val *KalturaReportResponseOptions) *NullableKalturaReportResponseOptions {
	return &NullableKalturaReportResponseOptions{value: val, isSet: true}
}

func (v NullableKalturaReportResponseOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaReportResponseOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


