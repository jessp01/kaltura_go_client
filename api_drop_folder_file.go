/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// DropFolderFileApiService DropFolderFileApi service
type DropFolderFileApiService service

type ApiDropFolderFileAddRequest struct {
	ctx context.Context
	ApiService *DropFolderFileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderFileAddRequest
}

func (r ApiDropFolderFileAddRequest) Ks(ks string) ApiDropFolderFileAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderFileAddRequest) Format(format int32) ApiDropFolderFileAddRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderFileAddRequest) ClientTag(clientTag string) ApiDropFolderFileAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderFileAddRequest) PartnerId(partnerId int32) ApiDropFolderFileAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderFileAddRequest) Body(body DropFolderFileAddRequest) ApiDropFolderFileAddRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderFileAddRequest) Execute() (*KalturaDropFolderFile, *http.Response, error) {
	return r.ApiService.DropFolderFileAddExecute(r)
}

/*
DropFolderFileAdd Method for DropFolderFileAdd

Allows you to add a new KalturaDropFolderFile object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderFileAddRequest
*/
func (a *DropFolderFileApiService) DropFolderFileAdd(ctx context.Context) ApiDropFolderFileAddRequest {
	return ApiDropFolderFileAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDropFolderFile
func (a *DropFolderFileApiService) DropFolderFileAddExecute(r ApiDropFolderFileAddRequest) (*KalturaDropFolderFile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDropFolderFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderFileApiService.DropFolderFileAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolderfile/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDropFolderFileDeleteRequest struct {
	ctx context.Context
	ApiService *DropFolderFileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderFileDeleteRequest
}

func (r ApiDropFolderFileDeleteRequest) Ks(ks string) ApiDropFolderFileDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderFileDeleteRequest) Format(format int32) ApiDropFolderFileDeleteRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderFileDeleteRequest) ClientTag(clientTag string) ApiDropFolderFileDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderFileDeleteRequest) PartnerId(partnerId int32) ApiDropFolderFileDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderFileDeleteRequest) Body(body DropFolderFileDeleteRequest) ApiDropFolderFileDeleteRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderFileDeleteRequest) Execute() (*KalturaDropFolderFile, *http.Response, error) {
	return r.ApiService.DropFolderFileDeleteExecute(r)
}

/*
DropFolderFileDelete Method for DropFolderFileDelete

Mark the KalturaDropFolderFile object as deleted

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderFileDeleteRequest
*/
func (a *DropFolderFileApiService) DropFolderFileDelete(ctx context.Context) ApiDropFolderFileDeleteRequest {
	return ApiDropFolderFileDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDropFolderFile
func (a *DropFolderFileApiService) DropFolderFileDeleteExecute(r ApiDropFolderFileDeleteRequest) (*KalturaDropFolderFile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDropFolderFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderFileApiService.DropFolderFileDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolderfile/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDropFolderFileGetRequest struct {
	ctx context.Context
	ApiService *DropFolderFileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderFileDeleteRequest
}

func (r ApiDropFolderFileGetRequest) Ks(ks string) ApiDropFolderFileGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderFileGetRequest) Format(format int32) ApiDropFolderFileGetRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderFileGetRequest) ClientTag(clientTag string) ApiDropFolderFileGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderFileGetRequest) PartnerId(partnerId int32) ApiDropFolderFileGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderFileGetRequest) Body(body DropFolderFileDeleteRequest) ApiDropFolderFileGetRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderFileGetRequest) Execute() (*KalturaDropFolderFile, *http.Response, error) {
	return r.ApiService.DropFolderFileGetExecute(r)
}

/*
DropFolderFileGet Method for DropFolderFileGet

Retrieve a KalturaDropFolderFile object by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderFileGetRequest
*/
func (a *DropFolderFileApiService) DropFolderFileGet(ctx context.Context) ApiDropFolderFileGetRequest {
	return ApiDropFolderFileGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDropFolderFile
func (a *DropFolderFileApiService) DropFolderFileGetExecute(r ApiDropFolderFileGetRequest) (*KalturaDropFolderFile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDropFolderFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderFileApiService.DropFolderFileGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolderfile/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDropFolderFileIgnoreRequest struct {
	ctx context.Context
	ApiService *DropFolderFileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderFileDeleteRequest
}

func (r ApiDropFolderFileIgnoreRequest) Ks(ks string) ApiDropFolderFileIgnoreRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderFileIgnoreRequest) Format(format int32) ApiDropFolderFileIgnoreRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderFileIgnoreRequest) ClientTag(clientTag string) ApiDropFolderFileIgnoreRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderFileIgnoreRequest) PartnerId(partnerId int32) ApiDropFolderFileIgnoreRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderFileIgnoreRequest) Body(body DropFolderFileDeleteRequest) ApiDropFolderFileIgnoreRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderFileIgnoreRequest) Execute() (*KalturaDropFolderFile, *http.Response, error) {
	return r.ApiService.DropFolderFileIgnoreExecute(r)
}

/*
DropFolderFileIgnore Method for DropFolderFileIgnore

Set the KalturaDropFolderFile status to ignore (KalturaDropFolderFileStatus::IGNORE)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderFileIgnoreRequest
*/
func (a *DropFolderFileApiService) DropFolderFileIgnore(ctx context.Context) ApiDropFolderFileIgnoreRequest {
	return ApiDropFolderFileIgnoreRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDropFolderFile
func (a *DropFolderFileApiService) DropFolderFileIgnoreExecute(r ApiDropFolderFileIgnoreRequest) (*KalturaDropFolderFile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDropFolderFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderFileApiService.DropFolderFileIgnore")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolderfile/action/ignore"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDropFolderFileListRequest struct {
	ctx context.Context
	ApiService *DropFolderFileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderFileListRequest
}

func (r ApiDropFolderFileListRequest) Ks(ks string) ApiDropFolderFileListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderFileListRequest) Format(format int32) ApiDropFolderFileListRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderFileListRequest) ClientTag(clientTag string) ApiDropFolderFileListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderFileListRequest) PartnerId(partnerId int32) ApiDropFolderFileListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderFileListRequest) Body(body DropFolderFileListRequest) ApiDropFolderFileListRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderFileListRequest) Execute() (*KalturaDropFolderFileListResponse, *http.Response, error) {
	return r.ApiService.DropFolderFileListExecute(r)
}

/*
DropFolderFileList Method for DropFolderFileList

List KalturaDropFolderFile objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderFileListRequest
*/
func (a *DropFolderFileApiService) DropFolderFileList(ctx context.Context) ApiDropFolderFileListRequest {
	return ApiDropFolderFileListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDropFolderFileListResponse
func (a *DropFolderFileApiService) DropFolderFileListExecute(r ApiDropFolderFileListRequest) (*KalturaDropFolderFileListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDropFolderFileListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderFileApiService.DropFolderFileList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolderfile/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDropFolderFileUpdateRequest struct {
	ctx context.Context
	ApiService *DropFolderFileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderFileUpdateRequest
}

func (r ApiDropFolderFileUpdateRequest) Ks(ks string) ApiDropFolderFileUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderFileUpdateRequest) Format(format int32) ApiDropFolderFileUpdateRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderFileUpdateRequest) ClientTag(clientTag string) ApiDropFolderFileUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderFileUpdateRequest) PartnerId(partnerId int32) ApiDropFolderFileUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderFileUpdateRequest) Body(body DropFolderFileUpdateRequest) ApiDropFolderFileUpdateRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderFileUpdateRequest) Execute() (*KalturaDropFolderFile, *http.Response, error) {
	return r.ApiService.DropFolderFileUpdateExecute(r)
}

/*
DropFolderFileUpdate Method for DropFolderFileUpdate

Update an existing KalturaDropFolderFile object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderFileUpdateRequest
*/
func (a *DropFolderFileApiService) DropFolderFileUpdate(ctx context.Context) ApiDropFolderFileUpdateRequest {
	return ApiDropFolderFileUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDropFolderFile
func (a *DropFolderFileApiService) DropFolderFileUpdateExecute(r ApiDropFolderFileUpdateRequest) (*KalturaDropFolderFile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDropFolderFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderFileApiService.DropFolderFileUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolderfile/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDropFolderFileUpdateStatusRequest struct {
	ctx context.Context
	ApiService *DropFolderFileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DropFolderFileUpdateStatusRequest
}

func (r ApiDropFolderFileUpdateStatusRequest) Ks(ks string) ApiDropFolderFileUpdateStatusRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDropFolderFileUpdateStatusRequest) Format(format int32) ApiDropFolderFileUpdateStatusRequest {
	r.format = &format
	return r
}

func (r ApiDropFolderFileUpdateStatusRequest) ClientTag(clientTag string) ApiDropFolderFileUpdateStatusRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDropFolderFileUpdateStatusRequest) PartnerId(partnerId int32) ApiDropFolderFileUpdateStatusRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDropFolderFileUpdateStatusRequest) Body(body DropFolderFileUpdateStatusRequest) ApiDropFolderFileUpdateStatusRequest {
	r.body = &body
	return r
}

func (r ApiDropFolderFileUpdateStatusRequest) Execute() (*KalturaDropFolderFile, *http.Response, error) {
	return r.ApiService.DropFolderFileUpdateStatusExecute(r)
}

/*
DropFolderFileUpdateStatus Method for DropFolderFileUpdateStatus

Update status of KalturaDropFolderFile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDropFolderFileUpdateStatusRequest
*/
func (a *DropFolderFileApiService) DropFolderFileUpdateStatus(ctx context.Context) ApiDropFolderFileUpdateStatusRequest {
	return ApiDropFolderFileUpdateStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDropFolderFile
func (a *DropFolderFileApiService) DropFolderFileUpdateStatusExecute(r ApiDropFolderFileUpdateStatusRequest) (*KalturaDropFolderFile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDropFolderFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DropFolderFileApiService.DropFolderFileUpdateStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/dropfolder_dropfolderfile/action/updateStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
