/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JobsRetryJobRequest struct for JobsRetryJobRequest
type JobsRetryJobRequest struct {
	Force *bool `json:"force,omitempty"`
	JobId int32 `json:"jobId"`
	JobType string `json:"jobType"`
}

// NewJobsRetryJobRequest instantiates a new JobsRetryJobRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobsRetryJobRequest(jobId int32, jobType string) *JobsRetryJobRequest {
	this := JobsRetryJobRequest{}
	var force bool = false
	this.Force = &force
	this.JobId = jobId
	this.JobType = jobType
	return &this
}

// NewJobsRetryJobRequestWithDefaults instantiates a new JobsRetryJobRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobsRetryJobRequestWithDefaults() *JobsRetryJobRequest {
	this := JobsRetryJobRequest{}
	var force bool = false
	this.Force = &force
	return &this
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *JobsRetryJobRequest) GetForce() bool {
	if o == nil || o.Force == nil {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobsRetryJobRequest) GetForceOk() (*bool, bool) {
	if o == nil || o.Force == nil {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *JobsRetryJobRequest) HasForce() bool {
	if o != nil && o.Force != nil {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *JobsRetryJobRequest) SetForce(v bool) {
	o.Force = &v
}

// GetJobId returns the JobId field value
func (o *JobsRetryJobRequest) GetJobId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value
// and a boolean to check if the value has been set.
func (o *JobsRetryJobRequest) GetJobIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobId, true
}

// SetJobId sets field value
func (o *JobsRetryJobRequest) SetJobId(v int32) {
	o.JobId = v
}

// GetJobType returns the JobType field value
func (o *JobsRetryJobRequest) GetJobType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobType
}

// GetJobTypeOk returns a tuple with the JobType field value
// and a boolean to check if the value has been set.
func (o *JobsRetryJobRequest) GetJobTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobType, true
}

// SetJobType sets field value
func (o *JobsRetryJobRequest) SetJobType(v string) {
	o.JobType = v
}

func (o JobsRetryJobRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Force != nil {
		toSerialize["force"] = o.Force
	}
	if true {
		toSerialize["jobId"] = o.JobId
	}
	if true {
		toSerialize["jobType"] = o.JobType
	}
	return json.Marshal(toSerialize)
}

type NullableJobsRetryJobRequest struct {
	value *JobsRetryJobRequest
	isSet bool
}

func (v NullableJobsRetryJobRequest) Get() *JobsRetryJobRequest {
	return v.value
}

func (v *NullableJobsRetryJobRequest) Set(val *JobsRetryJobRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableJobsRetryJobRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableJobsRetryJobRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobsRetryJobRequest(val *JobsRetryJobRequest) *NullableJobsRetryJobRequest {
	return &NullableJobsRetryJobRequest{value: val, isSet: true}
}

func (v NullableJobsRetryJobRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobsRetryJobRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


