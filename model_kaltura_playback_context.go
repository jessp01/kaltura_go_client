/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaPlaybackContext struct for KalturaPlaybackContext
type KalturaPlaybackContext struct {
	Actions []KalturaRuleAction `json:"actions,omitempty"`
	BumperData []KalturaObject `json:"bumperData,omitempty"`
	FlavorAssets []KalturaFlavorAsset `json:"flavorAssets,omitempty"`
	Messages []KalturaAccessControlMessage `json:"messages,omitempty"`
	PlaybackCaptions []KalturaCaptionPlaybackPluginData `json:"playbackCaptions,omitempty"`
	Sources []KalturaPlaybackSource `json:"sources,omitempty"`
}

// NewKalturaPlaybackContext instantiates a new KalturaPlaybackContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaPlaybackContext() *KalturaPlaybackContext {
	this := KalturaPlaybackContext{}
	return &this
}

// NewKalturaPlaybackContextWithDefaults instantiates a new KalturaPlaybackContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaPlaybackContextWithDefaults() *KalturaPlaybackContext {
	this := KalturaPlaybackContext{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *KalturaPlaybackContext) GetActions() []KalturaRuleAction {
	if o == nil || o.Actions == nil {
		var ret []KalturaRuleAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlaybackContext) GetActionsOk() ([]KalturaRuleAction, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *KalturaPlaybackContext) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given []KalturaRuleAction and assigns it to the Actions field.
func (o *KalturaPlaybackContext) SetActions(v []KalturaRuleAction) {
	o.Actions = v
}

// GetBumperData returns the BumperData field value if set, zero value otherwise.
func (o *KalturaPlaybackContext) GetBumperData() []KalturaObject {
	if o == nil || o.BumperData == nil {
		var ret []KalturaObject
		return ret
	}
	return o.BumperData
}

// GetBumperDataOk returns a tuple with the BumperData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlaybackContext) GetBumperDataOk() ([]KalturaObject, bool) {
	if o == nil || o.BumperData == nil {
		return nil, false
	}
	return o.BumperData, true
}

// HasBumperData returns a boolean if a field has been set.
func (o *KalturaPlaybackContext) HasBumperData() bool {
	if o != nil && o.BumperData != nil {
		return true
	}

	return false
}

// SetBumperData gets a reference to the given []KalturaObject and assigns it to the BumperData field.
func (o *KalturaPlaybackContext) SetBumperData(v []KalturaObject) {
	o.BumperData = v
}

// GetFlavorAssets returns the FlavorAssets field value if set, zero value otherwise.
func (o *KalturaPlaybackContext) GetFlavorAssets() []KalturaFlavorAsset {
	if o == nil || o.FlavorAssets == nil {
		var ret []KalturaFlavorAsset
		return ret
	}
	return o.FlavorAssets
}

// GetFlavorAssetsOk returns a tuple with the FlavorAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlaybackContext) GetFlavorAssetsOk() ([]KalturaFlavorAsset, bool) {
	if o == nil || o.FlavorAssets == nil {
		return nil, false
	}
	return o.FlavorAssets, true
}

// HasFlavorAssets returns a boolean if a field has been set.
func (o *KalturaPlaybackContext) HasFlavorAssets() bool {
	if o != nil && o.FlavorAssets != nil {
		return true
	}

	return false
}

// SetFlavorAssets gets a reference to the given []KalturaFlavorAsset and assigns it to the FlavorAssets field.
func (o *KalturaPlaybackContext) SetFlavorAssets(v []KalturaFlavorAsset) {
	o.FlavorAssets = v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *KalturaPlaybackContext) GetMessages() []KalturaAccessControlMessage {
	if o == nil || o.Messages == nil {
		var ret []KalturaAccessControlMessage
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlaybackContext) GetMessagesOk() ([]KalturaAccessControlMessage, bool) {
	if o == nil || o.Messages == nil {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *KalturaPlaybackContext) HasMessages() bool {
	if o != nil && o.Messages != nil {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []KalturaAccessControlMessage and assigns it to the Messages field.
func (o *KalturaPlaybackContext) SetMessages(v []KalturaAccessControlMessage) {
	o.Messages = v
}

// GetPlaybackCaptions returns the PlaybackCaptions field value if set, zero value otherwise.
func (o *KalturaPlaybackContext) GetPlaybackCaptions() []KalturaCaptionPlaybackPluginData {
	if o == nil || o.PlaybackCaptions == nil {
		var ret []KalturaCaptionPlaybackPluginData
		return ret
	}
	return o.PlaybackCaptions
}

// GetPlaybackCaptionsOk returns a tuple with the PlaybackCaptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlaybackContext) GetPlaybackCaptionsOk() ([]KalturaCaptionPlaybackPluginData, bool) {
	if o == nil || o.PlaybackCaptions == nil {
		return nil, false
	}
	return o.PlaybackCaptions, true
}

// HasPlaybackCaptions returns a boolean if a field has been set.
func (o *KalturaPlaybackContext) HasPlaybackCaptions() bool {
	if o != nil && o.PlaybackCaptions != nil {
		return true
	}

	return false
}

// SetPlaybackCaptions gets a reference to the given []KalturaCaptionPlaybackPluginData and assigns it to the PlaybackCaptions field.
func (o *KalturaPlaybackContext) SetPlaybackCaptions(v []KalturaCaptionPlaybackPluginData) {
	o.PlaybackCaptions = v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *KalturaPlaybackContext) GetSources() []KalturaPlaybackSource {
	if o == nil || o.Sources == nil {
		var ret []KalturaPlaybackSource
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlaybackContext) GetSourcesOk() ([]KalturaPlaybackSource, bool) {
	if o == nil || o.Sources == nil {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *KalturaPlaybackContext) HasSources() bool {
	if o != nil && o.Sources != nil {
		return true
	}

	return false
}

// SetSources gets a reference to the given []KalturaPlaybackSource and assigns it to the Sources field.
func (o *KalturaPlaybackContext) SetSources(v []KalturaPlaybackSource) {
	o.Sources = v
}

func (o KalturaPlaybackContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	if o.BumperData != nil {
		toSerialize["bumperData"] = o.BumperData
	}
	if o.FlavorAssets != nil {
		toSerialize["flavorAssets"] = o.FlavorAssets
	}
	if o.Messages != nil {
		toSerialize["messages"] = o.Messages
	}
	if o.PlaybackCaptions != nil {
		toSerialize["playbackCaptions"] = o.PlaybackCaptions
	}
	if o.Sources != nil {
		toSerialize["sources"] = o.Sources
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaPlaybackContext struct {
	value *KalturaPlaybackContext
	isSet bool
}

func (v NullableKalturaPlaybackContext) Get() *KalturaPlaybackContext {
	return v.value
}

func (v *NullableKalturaPlaybackContext) Set(val *KalturaPlaybackContext) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaPlaybackContext) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaPlaybackContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaPlaybackContext(val *KalturaPlaybackContext) *NullableKalturaPlaybackContext {
	return &NullableKalturaPlaybackContext{value: val, isSet: true}
}

func (v NullableKalturaPlaybackContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaPlaybackContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


