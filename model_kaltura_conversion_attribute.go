/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaConversionAttribute struct for KalturaConversionAttribute
type KalturaConversionAttribute struct {
	// The id of the flavor params, set to null for source flavor
	FlavorParamsId *int32 `json:"flavorParamsId,omitempty"`
	// Attribute name
	Name *string `json:"name,omitempty"`
	// Attribute value
	Value *string `json:"value,omitempty"`
}

// NewKalturaConversionAttribute instantiates a new KalturaConversionAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaConversionAttribute() *KalturaConversionAttribute {
	this := KalturaConversionAttribute{}
	return &this
}

// NewKalturaConversionAttributeWithDefaults instantiates a new KalturaConversionAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaConversionAttributeWithDefaults() *KalturaConversionAttribute {
	this := KalturaConversionAttribute{}
	return &this
}

// GetFlavorParamsId returns the FlavorParamsId field value if set, zero value otherwise.
func (o *KalturaConversionAttribute) GetFlavorParamsId() int32 {
	if o == nil || o.FlavorParamsId == nil {
		var ret int32
		return ret
	}
	return *o.FlavorParamsId
}

// GetFlavorParamsIdOk returns a tuple with the FlavorParamsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaConversionAttribute) GetFlavorParamsIdOk() (*int32, bool) {
	if o == nil || o.FlavorParamsId == nil {
		return nil, false
	}
	return o.FlavorParamsId, true
}

// HasFlavorParamsId returns a boolean if a field has been set.
func (o *KalturaConversionAttribute) HasFlavorParamsId() bool {
	if o != nil && o.FlavorParamsId != nil {
		return true
	}

	return false
}

// SetFlavorParamsId gets a reference to the given int32 and assigns it to the FlavorParamsId field.
func (o *KalturaConversionAttribute) SetFlavorParamsId(v int32) {
	o.FlavorParamsId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KalturaConversionAttribute) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaConversionAttribute) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KalturaConversionAttribute) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KalturaConversionAttribute) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *KalturaConversionAttribute) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaConversionAttribute) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *KalturaConversionAttribute) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *KalturaConversionAttribute) SetValue(v string) {
	o.Value = &v
}

func (o KalturaConversionAttribute) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FlavorParamsId != nil {
		toSerialize["flavorParamsId"] = o.FlavorParamsId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaConversionAttribute struct {
	value *KalturaConversionAttribute
	isSet bool
}

func (v NullableKalturaConversionAttribute) Get() *KalturaConversionAttribute {
	return v.value
}

func (v *NullableKalturaConversionAttribute) Set(val *KalturaConversionAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaConversionAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaConversionAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaConversionAttribute(val *KalturaConversionAttribute) *NullableKalturaConversionAttribute {
	return &NullableKalturaConversionAttribute{value: val, isSet: true}
}

func (v NullableKalturaConversionAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaConversionAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


