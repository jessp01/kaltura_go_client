/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaFilter `abstract`
type KalturaFilter struct {
	AdvancedSearch *KalturaSearchItem `json:"advancedSearch,omitempty"`
	ObjectType *string `json:"objectType,omitempty"`
	OrderBy *string `json:"orderBy,omitempty"`
}

// NewKalturaFilter instantiates a new KalturaFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaFilter() *KalturaFilter {
	this := KalturaFilter{}
	return &this
}

// NewKalturaFilterWithDefaults instantiates a new KalturaFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaFilterWithDefaults() *KalturaFilter {
	this := KalturaFilter{}
	return &this
}

// GetAdvancedSearch returns the AdvancedSearch field value if set, zero value otherwise.
func (o *KalturaFilter) GetAdvancedSearch() KalturaSearchItem {
	if o == nil || o.AdvancedSearch == nil {
		var ret KalturaSearchItem
		return ret
	}
	return *o.AdvancedSearch
}

// GetAdvancedSearchOk returns a tuple with the AdvancedSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaFilter) GetAdvancedSearchOk() (*KalturaSearchItem, bool) {
	if o == nil || o.AdvancedSearch == nil {
		return nil, false
	}
	return o.AdvancedSearch, true
}

// HasAdvancedSearch returns a boolean if a field has been set.
func (o *KalturaFilter) HasAdvancedSearch() bool {
	if o != nil && o.AdvancedSearch != nil {
		return true
	}

	return false
}

// SetAdvancedSearch gets a reference to the given KalturaSearchItem and assigns it to the AdvancedSearch field.
func (o *KalturaFilter) SetAdvancedSearch(v KalturaSearchItem) {
	o.AdvancedSearch = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *KalturaFilter) GetObjectType() string {
	if o == nil || o.ObjectType == nil {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaFilter) GetObjectTypeOk() (*string, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *KalturaFilter) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *KalturaFilter) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *KalturaFilter) GetOrderBy() string {
	if o == nil || o.OrderBy == nil {
		var ret string
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaFilter) GetOrderByOk() (*string, bool) {
	if o == nil || o.OrderBy == nil {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *KalturaFilter) HasOrderBy() bool {
	if o != nil && o.OrderBy != nil {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given string and assigns it to the OrderBy field.
func (o *KalturaFilter) SetOrderBy(v string) {
	o.OrderBy = &v
}

func (o KalturaFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdvancedSearch != nil {
		toSerialize["advancedSearch"] = o.AdvancedSearch
	}
	if o.ObjectType != nil {
		toSerialize["objectType"] = o.ObjectType
	}
	if o.OrderBy != nil {
		toSerialize["orderBy"] = o.OrderBy
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaFilter struct {
	value *KalturaFilter
	isSet bool
}

func (v NullableKalturaFilter) Get() *KalturaFilter {
	return v.value
}

func (v *NullableKalturaFilter) Set(val *KalturaFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaFilter(val *KalturaFilter) *NullableKalturaFilter {
	return &NullableKalturaFilter{value: val, isSet: true}
}

func (v NullableKalturaFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


