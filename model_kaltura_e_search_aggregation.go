/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaESearchAggregation struct for KalturaESearchAggregation
type KalturaESearchAggregation struct {
	Aggregations []KalturaESearchAggregationItem `json:"aggregations,omitempty"`
}

// NewKalturaESearchAggregation instantiates a new KalturaESearchAggregation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaESearchAggregation() *KalturaESearchAggregation {
	this := KalturaESearchAggregation{}
	return &this
}

// NewKalturaESearchAggregationWithDefaults instantiates a new KalturaESearchAggregation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaESearchAggregationWithDefaults() *KalturaESearchAggregation {
	this := KalturaESearchAggregation{}
	return &this
}

// GetAggregations returns the Aggregations field value if set, zero value otherwise.
func (o *KalturaESearchAggregation) GetAggregations() []KalturaESearchAggregationItem {
	if o == nil || o.Aggregations == nil {
		var ret []KalturaESearchAggregationItem
		return ret
	}
	return o.Aggregations
}

// GetAggregationsOk returns a tuple with the Aggregations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchAggregation) GetAggregationsOk() ([]KalturaESearchAggregationItem, bool) {
	if o == nil || o.Aggregations == nil {
		return nil, false
	}
	return o.Aggregations, true
}

// HasAggregations returns a boolean if a field has been set.
func (o *KalturaESearchAggregation) HasAggregations() bool {
	if o != nil && o.Aggregations != nil {
		return true
	}

	return false
}

// SetAggregations gets a reference to the given []KalturaESearchAggregationItem and assigns it to the Aggregations field.
func (o *KalturaESearchAggregation) SetAggregations(v []KalturaESearchAggregationItem) {
	o.Aggregations = v
}

func (o KalturaESearchAggregation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aggregations != nil {
		toSerialize["aggregations"] = o.Aggregations
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaESearchAggregation struct {
	value *KalturaESearchAggregation
	isSet bool
}

func (v NullableKalturaESearchAggregation) Get() *KalturaESearchAggregation {
	return v.value
}

func (v *NullableKalturaESearchAggregation) Set(val *KalturaESearchAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaESearchAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaESearchAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaESearchAggregation(val *KalturaESearchAggregation) *NullableKalturaESearchAggregation {
	return &NullableKalturaESearchAggregation{value: val, isSet: true}
}

func (v NullableKalturaESearchAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaESearchAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


