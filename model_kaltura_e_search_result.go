/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaESearchResult `abstract`
type KalturaESearchResult struct {
	Highlight []KalturaESearchHighlight `json:"highlight,omitempty"`
	ItemsData []KalturaESearchItemDataResult `json:"itemsData,omitempty"`
	ObjectType *string `json:"objectType,omitempty"`
}

// NewKalturaESearchResult instantiates a new KalturaESearchResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaESearchResult() *KalturaESearchResult {
	this := KalturaESearchResult{}
	return &this
}

// NewKalturaESearchResultWithDefaults instantiates a new KalturaESearchResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaESearchResultWithDefaults() *KalturaESearchResult {
	this := KalturaESearchResult{}
	return &this
}

// GetHighlight returns the Highlight field value if set, zero value otherwise.
func (o *KalturaESearchResult) GetHighlight() []KalturaESearchHighlight {
	if o == nil || o.Highlight == nil {
		var ret []KalturaESearchHighlight
		return ret
	}
	return o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchResult) GetHighlightOk() ([]KalturaESearchHighlight, bool) {
	if o == nil || o.Highlight == nil {
		return nil, false
	}
	return o.Highlight, true
}

// HasHighlight returns a boolean if a field has been set.
func (o *KalturaESearchResult) HasHighlight() bool {
	if o != nil && o.Highlight != nil {
		return true
	}

	return false
}

// SetHighlight gets a reference to the given []KalturaESearchHighlight and assigns it to the Highlight field.
func (o *KalturaESearchResult) SetHighlight(v []KalturaESearchHighlight) {
	o.Highlight = v
}

// GetItemsData returns the ItemsData field value if set, zero value otherwise.
func (o *KalturaESearchResult) GetItemsData() []KalturaESearchItemDataResult {
	if o == nil || o.ItemsData == nil {
		var ret []KalturaESearchItemDataResult
		return ret
	}
	return o.ItemsData
}

// GetItemsDataOk returns a tuple with the ItemsData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchResult) GetItemsDataOk() ([]KalturaESearchItemDataResult, bool) {
	if o == nil || o.ItemsData == nil {
		return nil, false
	}
	return o.ItemsData, true
}

// HasItemsData returns a boolean if a field has been set.
func (o *KalturaESearchResult) HasItemsData() bool {
	if o != nil && o.ItemsData != nil {
		return true
	}

	return false
}

// SetItemsData gets a reference to the given []KalturaESearchItemDataResult and assigns it to the ItemsData field.
func (o *KalturaESearchResult) SetItemsData(v []KalturaESearchItemDataResult) {
	o.ItemsData = v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *KalturaESearchResult) GetObjectType() string {
	if o == nil || o.ObjectType == nil {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchResult) GetObjectTypeOk() (*string, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *KalturaESearchResult) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *KalturaESearchResult) SetObjectType(v string) {
	o.ObjectType = &v
}

func (o KalturaESearchResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Highlight != nil {
		toSerialize["highlight"] = o.Highlight
	}
	if o.ItemsData != nil {
		toSerialize["itemsData"] = o.ItemsData
	}
	if o.ObjectType != nil {
		toSerialize["objectType"] = o.ObjectType
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaESearchResult struct {
	value *KalturaESearchResult
	isSet bool
}

func (v NullableKalturaESearchResult) Get() *KalturaESearchResult {
	return v.value
}

func (v *NullableKalturaESearchResult) Set(val *KalturaESearchResult) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaESearchResult) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaESearchResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaESearchResult(val *KalturaESearchResult) *NullableKalturaESearchResult {
	return &NullableKalturaESearchResult{value: val, isSet: true}
}

func (v NullableKalturaESearchResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaESearchResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


