/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
)


// CategoryEntryApiService CategoryEntryApi service
type CategoryEntryApiService service

type ApiCategoryEntryActivateRequest struct {
	ctx context.Context
	ApiService *CategoryEntryApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CategoryEntryActivateRequest
}

func (r ApiCategoryEntryActivateRequest) Ks(ks string) ApiCategoryEntryActivateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCategoryEntryActivateRequest) Format(format int32) ApiCategoryEntryActivateRequest {
	r.format = &format
	return r
}

func (r ApiCategoryEntryActivateRequest) ClientTag(clientTag string) ApiCategoryEntryActivateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCategoryEntryActivateRequest) PartnerId(partnerId int32) ApiCategoryEntryActivateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCategoryEntryActivateRequest) Body(body CategoryEntryActivateRequest) ApiCategoryEntryActivateRequest {
	r.body = &body
	return r
}

func (r ApiCategoryEntryActivateRequest) Execute() (*http.Response, error) {
	return r.ApiService.CategoryEntryActivateExecute(r)
}

/*
CategoryEntryActivate Method for CategoryEntryActivate

activate CategoryEntry when it is pending moderation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryEntryActivateRequest
*/
func (a *CategoryEntryApiService) CategoryEntryActivate(ctx context.Context) ApiCategoryEntryActivateRequest {
	return ApiCategoryEntryActivateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CategoryEntryApiService) CategoryEntryActivateExecute(r ApiCategoryEntryActivateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryEntryApiService.CategoryEntryActivate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/categoryentry/action/activate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCategoryEntryAddRequest struct {
	ctx context.Context
	ApiService *CategoryEntryApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CategoryEntryAddRequest
}

func (r ApiCategoryEntryAddRequest) Ks(ks string) ApiCategoryEntryAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCategoryEntryAddRequest) Format(format int32) ApiCategoryEntryAddRequest {
	r.format = &format
	return r
}

func (r ApiCategoryEntryAddRequest) ClientTag(clientTag string) ApiCategoryEntryAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCategoryEntryAddRequest) PartnerId(partnerId int32) ApiCategoryEntryAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCategoryEntryAddRequest) Body(body CategoryEntryAddRequest) ApiCategoryEntryAddRequest {
	r.body = &body
	return r
}

func (r ApiCategoryEntryAddRequest) Execute() (*KalturaCategoryEntry, *http.Response, error) {
	return r.ApiService.CategoryEntryAddExecute(r)
}

/*
CategoryEntryAdd Method for CategoryEntryAdd

Add new CategoryEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryEntryAddRequest
*/
func (a *CategoryEntryApiService) CategoryEntryAdd(ctx context.Context) ApiCategoryEntryAddRequest {
	return ApiCategoryEntryAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaCategoryEntry
func (a *CategoryEntryApiService) CategoryEntryAddExecute(r ApiCategoryEntryAddRequest) (*KalturaCategoryEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaCategoryEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryEntryApiService.CategoryEntryAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/categoryentry/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCategoryEntryAddFromBulkUploadRequest struct {
	ctx context.Context
	ApiService *CategoryEntryApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CategoryEntryAddFromBulkUploadRequest
}

func (r ApiCategoryEntryAddFromBulkUploadRequest) Ks(ks string) ApiCategoryEntryAddFromBulkUploadRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCategoryEntryAddFromBulkUploadRequest) Format(format int32) ApiCategoryEntryAddFromBulkUploadRequest {
	r.format = &format
	return r
}

func (r ApiCategoryEntryAddFromBulkUploadRequest) ClientTag(clientTag string) ApiCategoryEntryAddFromBulkUploadRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCategoryEntryAddFromBulkUploadRequest) PartnerId(partnerId int32) ApiCategoryEntryAddFromBulkUploadRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCategoryEntryAddFromBulkUploadRequest) Body(body CategoryEntryAddFromBulkUploadRequest) ApiCategoryEntryAddFromBulkUploadRequest {
	r.body = &body
	return r
}

func (r ApiCategoryEntryAddFromBulkUploadRequest) Execute() (*KalturaBulkUpload, *http.Response, error) {
	return r.ApiService.CategoryEntryAddFromBulkUploadExecute(r)
}

/*
CategoryEntryAddFromBulkUpload Method for CategoryEntryAddFromBulkUpload

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryEntryAddFromBulkUploadRequest
*/
func (a *CategoryEntryApiService) CategoryEntryAddFromBulkUpload(ctx context.Context) ApiCategoryEntryAddFromBulkUploadRequest {
	return ApiCategoryEntryAddFromBulkUploadRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaBulkUpload
func (a *CategoryEntryApiService) CategoryEntryAddFromBulkUploadExecute(r ApiCategoryEntryAddFromBulkUploadRequest) (*KalturaBulkUpload, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaBulkUpload
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryEntryApiService.CategoryEntryAddFromBulkUpload")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/categoryentry/action/addFromBulkUpload"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCategoryEntryDeleteRequest struct {
	ctx context.Context
	ApiService *CategoryEntryApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CategoryEntryActivateRequest
}

func (r ApiCategoryEntryDeleteRequest) Ks(ks string) ApiCategoryEntryDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCategoryEntryDeleteRequest) Format(format int32) ApiCategoryEntryDeleteRequest {
	r.format = &format
	return r
}

func (r ApiCategoryEntryDeleteRequest) ClientTag(clientTag string) ApiCategoryEntryDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCategoryEntryDeleteRequest) PartnerId(partnerId int32) ApiCategoryEntryDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCategoryEntryDeleteRequest) Body(body CategoryEntryActivateRequest) ApiCategoryEntryDeleteRequest {
	r.body = &body
	return r
}

func (r ApiCategoryEntryDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.CategoryEntryDeleteExecute(r)
}

/*
CategoryEntryDelete Method for CategoryEntryDelete

Delete CategoryEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryEntryDeleteRequest
*/
func (a *CategoryEntryApiService) CategoryEntryDelete(ctx context.Context) ApiCategoryEntryDeleteRequest {
	return ApiCategoryEntryDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CategoryEntryApiService) CategoryEntryDeleteExecute(r ApiCategoryEntryDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryEntryApiService.CategoryEntryDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/categoryentry/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCategoryEntryIndexRequest struct {
	ctx context.Context
	ApiService *CategoryEntryApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CategoryEntryIndexRequest
}

func (r ApiCategoryEntryIndexRequest) Ks(ks string) ApiCategoryEntryIndexRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCategoryEntryIndexRequest) Format(format int32) ApiCategoryEntryIndexRequest {
	r.format = &format
	return r
}

func (r ApiCategoryEntryIndexRequest) ClientTag(clientTag string) ApiCategoryEntryIndexRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCategoryEntryIndexRequest) PartnerId(partnerId int32) ApiCategoryEntryIndexRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCategoryEntryIndexRequest) Body(body CategoryEntryIndexRequest) ApiCategoryEntryIndexRequest {
	r.body = &body
	return r
}

func (r ApiCategoryEntryIndexRequest) Execute() (int32, *http.Response, error) {
	return r.ApiService.CategoryEntryIndexExecute(r)
}

/*
CategoryEntryIndex Method for CategoryEntryIndex

Index CategoryEntry by Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryEntryIndexRequest
*/
func (a *CategoryEntryApiService) CategoryEntryIndex(ctx context.Context) ApiCategoryEntryIndexRequest {
	return ApiCategoryEntryIndexRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return int32
func (a *CategoryEntryApiService) CategoryEntryIndexExecute(r ApiCategoryEntryIndexRequest) (int32, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryEntryApiService.CategoryEntryIndex")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/categoryentry/action/index"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCategoryEntryListRequest struct {
	ctx context.Context
	ApiService *CategoryEntryApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CategoryEntryListRequest
}

func (r ApiCategoryEntryListRequest) Ks(ks string) ApiCategoryEntryListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCategoryEntryListRequest) Format(format int32) ApiCategoryEntryListRequest {
	r.format = &format
	return r
}

func (r ApiCategoryEntryListRequest) ClientTag(clientTag string) ApiCategoryEntryListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCategoryEntryListRequest) PartnerId(partnerId int32) ApiCategoryEntryListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCategoryEntryListRequest) Body(body CategoryEntryListRequest) ApiCategoryEntryListRequest {
	r.body = &body
	return r
}

func (r ApiCategoryEntryListRequest) Execute() (*KalturaCategoryEntryListResponse, *http.Response, error) {
	return r.ApiService.CategoryEntryListExecute(r)
}

/*
CategoryEntryList Method for CategoryEntryList

List all categoryEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryEntryListRequest
*/
func (a *CategoryEntryApiService) CategoryEntryList(ctx context.Context) ApiCategoryEntryListRequest {
	return ApiCategoryEntryListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaCategoryEntryListResponse
func (a *CategoryEntryApiService) CategoryEntryListExecute(r ApiCategoryEntryListRequest) (*KalturaCategoryEntryListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaCategoryEntryListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryEntryApiService.CategoryEntryList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/categoryentry/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCategoryEntryRejectRequest struct {
	ctx context.Context
	ApiService *CategoryEntryApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CategoryEntryActivateRequest
}

func (r ApiCategoryEntryRejectRequest) Ks(ks string) ApiCategoryEntryRejectRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCategoryEntryRejectRequest) Format(format int32) ApiCategoryEntryRejectRequest {
	r.format = &format
	return r
}

func (r ApiCategoryEntryRejectRequest) ClientTag(clientTag string) ApiCategoryEntryRejectRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCategoryEntryRejectRequest) PartnerId(partnerId int32) ApiCategoryEntryRejectRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCategoryEntryRejectRequest) Body(body CategoryEntryActivateRequest) ApiCategoryEntryRejectRequest {
	r.body = &body
	return r
}

func (r ApiCategoryEntryRejectRequest) Execute() (*http.Response, error) {
	return r.ApiService.CategoryEntryRejectExecute(r)
}

/*
CategoryEntryReject Method for CategoryEntryReject

activate CategoryEntry when it is pending moderation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryEntryRejectRequest
*/
func (a *CategoryEntryApiService) CategoryEntryReject(ctx context.Context) ApiCategoryEntryRejectRequest {
	return ApiCategoryEntryRejectRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CategoryEntryApiService) CategoryEntryRejectExecute(r ApiCategoryEntryRejectRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryEntryApiService.CategoryEntryReject")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/categoryentry/action/reject"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCategoryEntrySyncPrivacyContextRequest struct {
	ctx context.Context
	ApiService *CategoryEntryApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CategoryEntryActivateRequest
}

func (r ApiCategoryEntrySyncPrivacyContextRequest) Ks(ks string) ApiCategoryEntrySyncPrivacyContextRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCategoryEntrySyncPrivacyContextRequest) Format(format int32) ApiCategoryEntrySyncPrivacyContextRequest {
	r.format = &format
	return r
}

func (r ApiCategoryEntrySyncPrivacyContextRequest) ClientTag(clientTag string) ApiCategoryEntrySyncPrivacyContextRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCategoryEntrySyncPrivacyContextRequest) PartnerId(partnerId int32) ApiCategoryEntrySyncPrivacyContextRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCategoryEntrySyncPrivacyContextRequest) Body(body CategoryEntryActivateRequest) ApiCategoryEntrySyncPrivacyContextRequest {
	r.body = &body
	return r
}

func (r ApiCategoryEntrySyncPrivacyContextRequest) Execute() (*http.Response, error) {
	return r.ApiService.CategoryEntrySyncPrivacyContextExecute(r)
}

/*
CategoryEntrySyncPrivacyContext Method for CategoryEntrySyncPrivacyContext

update privacy context from the category

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryEntrySyncPrivacyContextRequest
*/
func (a *CategoryEntryApiService) CategoryEntrySyncPrivacyContext(ctx context.Context) ApiCategoryEntrySyncPrivacyContextRequest {
	return ApiCategoryEntrySyncPrivacyContextRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CategoryEntryApiService) CategoryEntrySyncPrivacyContextExecute(r ApiCategoryEntrySyncPrivacyContextRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryEntryApiService.CategoryEntrySyncPrivacyContext")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/categoryentry/action/syncPrivacyContext"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCategoryEntryUpdateStatusFromBulkRequest struct {
	ctx context.Context
	ApiService *CategoryEntryApiService
	fileData **os.File
	ks *string
	format *int32
	bulkUploadDataObjectType *string
	bulkUploadDataFileName *string
	bulkUploadDataObjectDataObjectType *string
	bulkUploadDataEmailRecipients *string
	bulkUploadDataNumOfErrorObjects *int32
	bulkUploadDataPrivileges *string
	bulkUploadCategoryEntryDataObjectType *string
}

func (r ApiCategoryEntryUpdateStatusFromBulkRequest) FileData(fileData *os.File) ApiCategoryEntryUpdateStatusFromBulkRequest {
	r.fileData = &fileData
	return r
}

func (r ApiCategoryEntryUpdateStatusFromBulkRequest) Ks(ks string) ApiCategoryEntryUpdateStatusFromBulkRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCategoryEntryUpdateStatusFromBulkRequest) Format(format int32) ApiCategoryEntryUpdateStatusFromBulkRequest {
	r.format = &format
	return r
}

func (r ApiCategoryEntryUpdateStatusFromBulkRequest) BulkUploadDataObjectType(bulkUploadDataObjectType string) ApiCategoryEntryUpdateStatusFromBulkRequest {
	r.bulkUploadDataObjectType = &bulkUploadDataObjectType
	return r
}

// Friendly name of the file, used to be recognized later in the logs.
func (r ApiCategoryEntryUpdateStatusFromBulkRequest) BulkUploadDataFileName(bulkUploadDataFileName string) ApiCategoryEntryUpdateStatusFromBulkRequest {
	r.bulkUploadDataFileName = &bulkUploadDataFileName
	return r
}

func (r ApiCategoryEntryUpdateStatusFromBulkRequest) BulkUploadDataObjectDataObjectType(bulkUploadDataObjectDataObjectType string) ApiCategoryEntryUpdateStatusFromBulkRequest {
	r.bulkUploadDataObjectDataObjectType = &bulkUploadDataObjectDataObjectType
	return r
}

// Recipients of the email for bulk upload success/failure
func (r ApiCategoryEntryUpdateStatusFromBulkRequest) BulkUploadDataEmailRecipients(bulkUploadDataEmailRecipients string) ApiCategoryEntryUpdateStatusFromBulkRequest {
	r.bulkUploadDataEmailRecipients = &bulkUploadDataEmailRecipients
	return r
}

// Number of objects that finished on error status
func (r ApiCategoryEntryUpdateStatusFromBulkRequest) BulkUploadDataNumOfErrorObjects(bulkUploadDataNumOfErrorObjects int32) ApiCategoryEntryUpdateStatusFromBulkRequest {
	r.bulkUploadDataNumOfErrorObjects = &bulkUploadDataNumOfErrorObjects
	return r
}

// privileges for the job
func (r ApiCategoryEntryUpdateStatusFromBulkRequest) BulkUploadDataPrivileges(bulkUploadDataPrivileges string) ApiCategoryEntryUpdateStatusFromBulkRequest {
	r.bulkUploadDataPrivileges = &bulkUploadDataPrivileges
	return r
}

func (r ApiCategoryEntryUpdateStatusFromBulkRequest) BulkUploadCategoryEntryDataObjectType(bulkUploadCategoryEntryDataObjectType string) ApiCategoryEntryUpdateStatusFromBulkRequest {
	r.bulkUploadCategoryEntryDataObjectType = &bulkUploadCategoryEntryDataObjectType
	return r
}

func (r ApiCategoryEntryUpdateStatusFromBulkRequest) Execute() (*KalturaBulkUpload, *http.Response, error) {
	return r.ApiService.CategoryEntryUpdateStatusFromBulkExecute(r)
}

/*
CategoryEntryUpdateStatusFromBulk Method for CategoryEntryUpdateStatusFromBulk

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCategoryEntryUpdateStatusFromBulkRequest
*/
func (a *CategoryEntryApiService) CategoryEntryUpdateStatusFromBulk(ctx context.Context) ApiCategoryEntryUpdateStatusFromBulkRequest {
	return ApiCategoryEntryUpdateStatusFromBulkRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaBulkUpload
func (a *CategoryEntryApiService) CategoryEntryUpdateStatusFromBulkExecute(r ApiCategoryEntryUpdateStatusFromBulkRequest) (*KalturaBulkUpload, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaBulkUpload
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CategoryEntryApiService.CategoryEntryUpdateStatusFromBulk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/categoryentry/action/updateStatusFromBulk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fileData == nil {
		return localVarReturnValue, nil, reportError("fileData is required and must be specified")
	}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.bulkUploadDataObjectType != nil {
		localVarQueryParams.Add("bulkUploadData[objectType]", parameterToString(*r.bulkUploadDataObjectType, ""))
	}
	if r.bulkUploadDataFileName != nil {
		localVarQueryParams.Add("bulkUploadData[fileName]", parameterToString(*r.bulkUploadDataFileName, ""))
	}
	if r.bulkUploadDataObjectDataObjectType != nil {
		localVarQueryParams.Add("bulkUploadData[objectData][objectType]", parameterToString(*r.bulkUploadDataObjectDataObjectType, ""))
	}
	if r.bulkUploadDataEmailRecipients != nil {
		localVarQueryParams.Add("bulkUploadData[emailRecipients]", parameterToString(*r.bulkUploadDataEmailRecipients, ""))
	}
	if r.bulkUploadDataNumOfErrorObjects != nil {
		localVarQueryParams.Add("bulkUploadData[numOfErrorObjects]", parameterToString(*r.bulkUploadDataNumOfErrorObjects, ""))
	}
	if r.bulkUploadDataPrivileges != nil {
		localVarQueryParams.Add("bulkUploadData[privileges]", parameterToString(*r.bulkUploadDataPrivileges, ""))
	}
	if r.bulkUploadCategoryEntryDataObjectType != nil {
		localVarQueryParams.Add("bulkUploadCategoryEntryData[objectType]", parameterToString(*r.bulkUploadCategoryEntryDataObjectType, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileDataLocalVarFormFileName string
	var fileDataLocalVarFileName     string
	var fileDataLocalVarFileBytes    []byte

	fileDataLocalVarFormFileName = "fileData"

	fileDataLocalVarFile := *r.fileData
	if fileDataLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(fileDataLocalVarFile)
		fileDataLocalVarFileBytes = fbs
		fileDataLocalVarFileName = fileDataLocalVarFile.Name()
		fileDataLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: fileDataLocalVarFileBytes, fileName: fileDataLocalVarFileName, formFileName: fileDataLocalVarFormFileName})
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
