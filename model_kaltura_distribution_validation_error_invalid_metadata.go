/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaDistributionValidationErrorInvalidMetadata struct for KalturaDistributionValidationErrorInvalidMetadata
type KalturaDistributionValidationErrorInvalidMetadata struct {
	KalturaDistributionValidationErrorInvalidData
}

// NewKalturaDistributionValidationErrorInvalidMetadata instantiates a new KalturaDistributionValidationErrorInvalidMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaDistributionValidationErrorInvalidMetadata() *KalturaDistributionValidationErrorInvalidMetadata {
	this := KalturaDistributionValidationErrorInvalidMetadata{}
	return &this
}

// NewKalturaDistributionValidationErrorInvalidMetadataWithDefaults instantiates a new KalturaDistributionValidationErrorInvalidMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaDistributionValidationErrorInvalidMetadataWithDefaults() *KalturaDistributionValidationErrorInvalidMetadata {
	this := KalturaDistributionValidationErrorInvalidMetadata{}
	return &this
}

func (o KalturaDistributionValidationErrorInvalidMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedKalturaDistributionValidationErrorInvalidData, errKalturaDistributionValidationErrorInvalidData := json.Marshal(o.KalturaDistributionValidationErrorInvalidData)
	if errKalturaDistributionValidationErrorInvalidData != nil {
		return []byte{}, errKalturaDistributionValidationErrorInvalidData
	}
	errKalturaDistributionValidationErrorInvalidData = json.Unmarshal([]byte(serializedKalturaDistributionValidationErrorInvalidData), &toSerialize)
	if errKalturaDistributionValidationErrorInvalidData != nil {
		return []byte{}, errKalturaDistributionValidationErrorInvalidData
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaDistributionValidationErrorInvalidMetadata struct {
	value *KalturaDistributionValidationErrorInvalidMetadata
	isSet bool
}

func (v NullableKalturaDistributionValidationErrorInvalidMetadata) Get() *KalturaDistributionValidationErrorInvalidMetadata {
	return v.value
}

func (v *NullableKalturaDistributionValidationErrorInvalidMetadata) Set(val *KalturaDistributionValidationErrorInvalidMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaDistributionValidationErrorInvalidMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaDistributionValidationErrorInvalidMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaDistributionValidationErrorInvalidMetadata(val *KalturaDistributionValidationErrorInvalidMetadata) *NullableKalturaDistributionValidationErrorInvalidMetadata {
	return &NullableKalturaDistributionValidationErrorInvalidMetadata{value: val, isSet: true}
}

func (v NullableKalturaDistributionValidationErrorInvalidMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaDistributionValidationErrorInvalidMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


