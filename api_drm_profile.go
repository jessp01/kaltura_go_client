/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// DrmProfileApiService DrmProfileApi service
type DrmProfileApiService service

type ApiDrmProfileAddRequest struct {
	ctx context.Context
	ApiService *DrmProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DrmProfileAddRequest
}

func (r ApiDrmProfileAddRequest) Ks(ks string) ApiDrmProfileAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDrmProfileAddRequest) Format(format int32) ApiDrmProfileAddRequest {
	r.format = &format
	return r
}

func (r ApiDrmProfileAddRequest) ClientTag(clientTag string) ApiDrmProfileAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDrmProfileAddRequest) PartnerId(partnerId int32) ApiDrmProfileAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDrmProfileAddRequest) Body(body DrmProfileAddRequest) ApiDrmProfileAddRequest {
	r.body = &body
	return r
}

func (r ApiDrmProfileAddRequest) Execute() (*KalturaDrmProfile, *http.Response, error) {
	return r.ApiService.DrmProfileAddExecute(r)
}

/*
DrmProfileAdd Method for DrmProfileAdd

Allows you to add a new DrmProfile object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDrmProfileAddRequest
*/
func (a *DrmProfileApiService) DrmProfileAdd(ctx context.Context) ApiDrmProfileAddRequest {
	return ApiDrmProfileAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDrmProfile
func (a *DrmProfileApiService) DrmProfileAddExecute(r ApiDrmProfileAddRequest) (*KalturaDrmProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDrmProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrmProfileApiService.DrmProfileAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/drm_drmprofile/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDrmProfileDeleteRequest struct {
	ctx context.Context
	ApiService *DrmProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DrmProfileDeleteRequest
}

func (r ApiDrmProfileDeleteRequest) Ks(ks string) ApiDrmProfileDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDrmProfileDeleteRequest) Format(format int32) ApiDrmProfileDeleteRequest {
	r.format = &format
	return r
}

func (r ApiDrmProfileDeleteRequest) ClientTag(clientTag string) ApiDrmProfileDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDrmProfileDeleteRequest) PartnerId(partnerId int32) ApiDrmProfileDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDrmProfileDeleteRequest) Body(body DrmProfileDeleteRequest) ApiDrmProfileDeleteRequest {
	r.body = &body
	return r
}

func (r ApiDrmProfileDeleteRequest) Execute() (*KalturaDrmProfile, *http.Response, error) {
	return r.ApiService.DrmProfileDeleteExecute(r)
}

/*
DrmProfileDelete Method for DrmProfileDelete

Mark the KalturaDrmProfile object as deleted

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDrmProfileDeleteRequest
*/
func (a *DrmProfileApiService) DrmProfileDelete(ctx context.Context) ApiDrmProfileDeleteRequest {
	return ApiDrmProfileDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDrmProfile
func (a *DrmProfileApiService) DrmProfileDeleteExecute(r ApiDrmProfileDeleteRequest) (*KalturaDrmProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDrmProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrmProfileApiService.DrmProfileDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/drm_drmprofile/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDrmProfileGetRequest struct {
	ctx context.Context
	ApiService *DrmProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DrmProfileDeleteRequest
}

func (r ApiDrmProfileGetRequest) Ks(ks string) ApiDrmProfileGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDrmProfileGetRequest) Format(format int32) ApiDrmProfileGetRequest {
	r.format = &format
	return r
}

func (r ApiDrmProfileGetRequest) ClientTag(clientTag string) ApiDrmProfileGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDrmProfileGetRequest) PartnerId(partnerId int32) ApiDrmProfileGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDrmProfileGetRequest) Body(body DrmProfileDeleteRequest) ApiDrmProfileGetRequest {
	r.body = &body
	return r
}

func (r ApiDrmProfileGetRequest) Execute() (*KalturaDrmProfile, *http.Response, error) {
	return r.ApiService.DrmProfileGetExecute(r)
}

/*
DrmProfileGet Method for DrmProfileGet

Retrieve a KalturaDrmProfile object by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDrmProfileGetRequest
*/
func (a *DrmProfileApiService) DrmProfileGet(ctx context.Context) ApiDrmProfileGetRequest {
	return ApiDrmProfileGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDrmProfile
func (a *DrmProfileApiService) DrmProfileGetExecute(r ApiDrmProfileGetRequest) (*KalturaDrmProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDrmProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrmProfileApiService.DrmProfileGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/drm_drmprofile/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDrmProfileGetByProviderRequest struct {
	ctx context.Context
	ApiService *DrmProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DrmProfileGetByProviderRequest
}

func (r ApiDrmProfileGetByProviderRequest) Ks(ks string) ApiDrmProfileGetByProviderRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDrmProfileGetByProviderRequest) Format(format int32) ApiDrmProfileGetByProviderRequest {
	r.format = &format
	return r
}

func (r ApiDrmProfileGetByProviderRequest) ClientTag(clientTag string) ApiDrmProfileGetByProviderRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDrmProfileGetByProviderRequest) PartnerId(partnerId int32) ApiDrmProfileGetByProviderRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDrmProfileGetByProviderRequest) Body(body DrmProfileGetByProviderRequest) ApiDrmProfileGetByProviderRequest {
	r.body = &body
	return r
}

func (r ApiDrmProfileGetByProviderRequest) Execute() (*KalturaDrmProfile, *http.Response, error) {
	return r.ApiService.DrmProfileGetByProviderExecute(r)
}

/*
DrmProfileGetByProvider Method for DrmProfileGetByProvider

Retrieve a KalturaDrmProfile object by provider, if no specific profile defined return default profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDrmProfileGetByProviderRequest
*/
func (a *DrmProfileApiService) DrmProfileGetByProvider(ctx context.Context) ApiDrmProfileGetByProviderRequest {
	return ApiDrmProfileGetByProviderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDrmProfile
func (a *DrmProfileApiService) DrmProfileGetByProviderExecute(r ApiDrmProfileGetByProviderRequest) (*KalturaDrmProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDrmProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrmProfileApiService.DrmProfileGetByProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/drm_drmprofile/action/getByProvider"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDrmProfileListRequest struct {
	ctx context.Context
	ApiService *DrmProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DrmProfileListRequest
}

func (r ApiDrmProfileListRequest) Ks(ks string) ApiDrmProfileListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDrmProfileListRequest) Format(format int32) ApiDrmProfileListRequest {
	r.format = &format
	return r
}

func (r ApiDrmProfileListRequest) ClientTag(clientTag string) ApiDrmProfileListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDrmProfileListRequest) PartnerId(partnerId int32) ApiDrmProfileListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDrmProfileListRequest) Body(body DrmProfileListRequest) ApiDrmProfileListRequest {
	r.body = &body
	return r
}

func (r ApiDrmProfileListRequest) Execute() (*KalturaDrmProfileListResponse, *http.Response, error) {
	return r.ApiService.DrmProfileListExecute(r)
}

/*
DrmProfileList Method for DrmProfileList

List KalturaDrmProfile objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDrmProfileListRequest
*/
func (a *DrmProfileApiService) DrmProfileList(ctx context.Context) ApiDrmProfileListRequest {
	return ApiDrmProfileListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDrmProfileListResponse
func (a *DrmProfileApiService) DrmProfileListExecute(r ApiDrmProfileListRequest) (*KalturaDrmProfileListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDrmProfileListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrmProfileApiService.DrmProfileList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/drm_drmprofile/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDrmProfileUpdateRequest struct {
	ctx context.Context
	ApiService *DrmProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *DrmProfileUpdateRequest
}

func (r ApiDrmProfileUpdateRequest) Ks(ks string) ApiDrmProfileUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiDrmProfileUpdateRequest) Format(format int32) ApiDrmProfileUpdateRequest {
	r.format = &format
	return r
}

func (r ApiDrmProfileUpdateRequest) ClientTag(clientTag string) ApiDrmProfileUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiDrmProfileUpdateRequest) PartnerId(partnerId int32) ApiDrmProfileUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiDrmProfileUpdateRequest) Body(body DrmProfileUpdateRequest) ApiDrmProfileUpdateRequest {
	r.body = &body
	return r
}

func (r ApiDrmProfileUpdateRequest) Execute() (*KalturaDrmProfile, *http.Response, error) {
	return r.ApiService.DrmProfileUpdateExecute(r)
}

/*
DrmProfileUpdate Method for DrmProfileUpdate

Update an existing KalturaDrmProfile object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDrmProfileUpdateRequest
*/
func (a *DrmProfileApiService) DrmProfileUpdate(ctx context.Context) ApiDrmProfileUpdateRequest {
	return ApiDrmProfileUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaDrmProfile
func (a *DrmProfileApiService) DrmProfileUpdateExecute(r ApiDrmProfileUpdateRequest) (*KalturaDrmProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaDrmProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrmProfileApiService.DrmProfileUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/drm_drmprofile/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
