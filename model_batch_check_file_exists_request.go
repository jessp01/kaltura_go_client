/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BatchCheckFileExistsRequest struct for BatchCheckFileExistsRequest
type BatchCheckFileExistsRequest struct {
	LocalPath string `json:"localPath"`
	Size float32 `json:"size"`
}

// NewBatchCheckFileExistsRequest instantiates a new BatchCheckFileExistsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchCheckFileExistsRequest(localPath string, size float32) *BatchCheckFileExistsRequest {
	this := BatchCheckFileExistsRequest{}
	this.LocalPath = localPath
	this.Size = size
	return &this
}

// NewBatchCheckFileExistsRequestWithDefaults instantiates a new BatchCheckFileExistsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchCheckFileExistsRequestWithDefaults() *BatchCheckFileExistsRequest {
	this := BatchCheckFileExistsRequest{}
	return &this
}

// GetLocalPath returns the LocalPath field value
func (o *BatchCheckFileExistsRequest) GetLocalPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocalPath
}

// GetLocalPathOk returns a tuple with the LocalPath field value
// and a boolean to check if the value has been set.
func (o *BatchCheckFileExistsRequest) GetLocalPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalPath, true
}

// SetLocalPath sets field value
func (o *BatchCheckFileExistsRequest) SetLocalPath(v string) {
	o.LocalPath = v
}

// GetSize returns the Size field value
func (o *BatchCheckFileExistsRequest) GetSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *BatchCheckFileExistsRequest) GetSizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *BatchCheckFileExistsRequest) SetSize(v float32) {
	o.Size = v
}

func (o BatchCheckFileExistsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["localPath"] = o.LocalPath
	}
	if true {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableBatchCheckFileExistsRequest struct {
	value *BatchCheckFileExistsRequest
	isSet bool
}

func (v NullableBatchCheckFileExistsRequest) Get() *BatchCheckFileExistsRequest {
	return v.value
}

func (v *NullableBatchCheckFileExistsRequest) Set(val *BatchCheckFileExistsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchCheckFileExistsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchCheckFileExistsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchCheckFileExistsRequest(val *BatchCheckFileExistsRequest) *NullableBatchCheckFileExistsRequest {
	return &NullableBatchCheckFileExistsRequest{value: val, isSet: true}
}

func (v NullableBatchCheckFileExistsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchCheckFileExistsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


