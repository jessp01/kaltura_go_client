/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaUiConfTypeInfo Info about uiconf type
type KalturaUiConfTypeInfo struct {
	// The direcotry this type is saved at
	Directory *string `json:"directory,omitempty"`
	// Filename for this UiConf type
	Filename *string `json:"filename,omitempty"`
	// Enum Type: `KalturaUiConfObjType`  UiConf Type
	Type *int32 `json:"type,omitempty"`
	Versions []KalturaString `json:"versions,omitempty"`
}

// NewKalturaUiConfTypeInfo instantiates a new KalturaUiConfTypeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaUiConfTypeInfo() *KalturaUiConfTypeInfo {
	this := KalturaUiConfTypeInfo{}
	return &this
}

// NewKalturaUiConfTypeInfoWithDefaults instantiates a new KalturaUiConfTypeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaUiConfTypeInfoWithDefaults() *KalturaUiConfTypeInfo {
	this := KalturaUiConfTypeInfo{}
	return &this
}

// GetDirectory returns the Directory field value if set, zero value otherwise.
func (o *KalturaUiConfTypeInfo) GetDirectory() string {
	if o == nil || o.Directory == nil {
		var ret string
		return ret
	}
	return *o.Directory
}

// GetDirectoryOk returns a tuple with the Directory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaUiConfTypeInfo) GetDirectoryOk() (*string, bool) {
	if o == nil || o.Directory == nil {
		return nil, false
	}
	return o.Directory, true
}

// HasDirectory returns a boolean if a field has been set.
func (o *KalturaUiConfTypeInfo) HasDirectory() bool {
	if o != nil && o.Directory != nil {
		return true
	}

	return false
}

// SetDirectory gets a reference to the given string and assigns it to the Directory field.
func (o *KalturaUiConfTypeInfo) SetDirectory(v string) {
	o.Directory = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *KalturaUiConfTypeInfo) GetFilename() string {
	if o == nil || o.Filename == nil {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaUiConfTypeInfo) GetFilenameOk() (*string, bool) {
	if o == nil || o.Filename == nil {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *KalturaUiConfTypeInfo) HasFilename() bool {
	if o != nil && o.Filename != nil {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *KalturaUiConfTypeInfo) SetFilename(v string) {
	o.Filename = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KalturaUiConfTypeInfo) GetType() int32 {
	if o == nil || o.Type == nil {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaUiConfTypeInfo) GetTypeOk() (*int32, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KalturaUiConfTypeInfo) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *KalturaUiConfTypeInfo) SetType(v int32) {
	o.Type = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *KalturaUiConfTypeInfo) GetVersions() []KalturaString {
	if o == nil || o.Versions == nil {
		var ret []KalturaString
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaUiConfTypeInfo) GetVersionsOk() ([]KalturaString, bool) {
	if o == nil || o.Versions == nil {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *KalturaUiConfTypeInfo) HasVersions() bool {
	if o != nil && o.Versions != nil {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []KalturaString and assigns it to the Versions field.
func (o *KalturaUiConfTypeInfo) SetVersions(v []KalturaString) {
	o.Versions = v
}

func (o KalturaUiConfTypeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Directory != nil {
		toSerialize["directory"] = o.Directory
	}
	if o.Filename != nil {
		toSerialize["filename"] = o.Filename
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Versions != nil {
		toSerialize["versions"] = o.Versions
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaUiConfTypeInfo struct {
	value *KalturaUiConfTypeInfo
	isSet bool
}

func (v NullableKalturaUiConfTypeInfo) Get() *KalturaUiConfTypeInfo {
	return v.value
}

func (v *NullableKalturaUiConfTypeInfo) Set(val *KalturaUiConfTypeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaUiConfTypeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaUiConfTypeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaUiConfTypeInfo(val *KalturaUiConfTypeInfo) *NullableKalturaUiConfTypeInfo {
	return &NullableKalturaUiConfTypeInfo{value: val, isSet: true}
}

func (v NullableKalturaUiConfTypeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaUiConfTypeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


