/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaESearchHistory struct for KalturaESearchHistory
type KalturaESearchHistory struct {
	// `readOnly`
	SearchTerm *string `json:"searchTerm,omitempty"`
	// `readOnly`
	SearchedObject *string `json:"searchedObject,omitempty"`
	// `readOnly`
	Timestamp *int32 `json:"timestamp,omitempty"`
}

// NewKalturaESearchHistory instantiates a new KalturaESearchHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaESearchHistory() *KalturaESearchHistory {
	this := KalturaESearchHistory{}
	return &this
}

// NewKalturaESearchHistoryWithDefaults instantiates a new KalturaESearchHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaESearchHistoryWithDefaults() *KalturaESearchHistory {
	this := KalturaESearchHistory{}
	return &this
}

// GetSearchTerm returns the SearchTerm field value if set, zero value otherwise.
func (o *KalturaESearchHistory) GetSearchTerm() string {
	if o == nil || o.SearchTerm == nil {
		var ret string
		return ret
	}
	return *o.SearchTerm
}

// GetSearchTermOk returns a tuple with the SearchTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchHistory) GetSearchTermOk() (*string, bool) {
	if o == nil || o.SearchTerm == nil {
		return nil, false
	}
	return o.SearchTerm, true
}

// HasSearchTerm returns a boolean if a field has been set.
func (o *KalturaESearchHistory) HasSearchTerm() bool {
	if o != nil && o.SearchTerm != nil {
		return true
	}

	return false
}

// SetSearchTerm gets a reference to the given string and assigns it to the SearchTerm field.
func (o *KalturaESearchHistory) SetSearchTerm(v string) {
	o.SearchTerm = &v
}

// GetSearchedObject returns the SearchedObject field value if set, zero value otherwise.
func (o *KalturaESearchHistory) GetSearchedObject() string {
	if o == nil || o.SearchedObject == nil {
		var ret string
		return ret
	}
	return *o.SearchedObject
}

// GetSearchedObjectOk returns a tuple with the SearchedObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchHistory) GetSearchedObjectOk() (*string, bool) {
	if o == nil || o.SearchedObject == nil {
		return nil, false
	}
	return o.SearchedObject, true
}

// HasSearchedObject returns a boolean if a field has been set.
func (o *KalturaESearchHistory) HasSearchedObject() bool {
	if o != nil && o.SearchedObject != nil {
		return true
	}

	return false
}

// SetSearchedObject gets a reference to the given string and assigns it to the SearchedObject field.
func (o *KalturaESearchHistory) SetSearchedObject(v string) {
	o.SearchedObject = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *KalturaESearchHistory) GetTimestamp() int32 {
	if o == nil || o.Timestamp == nil {
		var ret int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchHistory) GetTimestampOk() (*int32, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *KalturaESearchHistory) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int32 and assigns it to the Timestamp field.
func (o *KalturaESearchHistory) SetTimestamp(v int32) {
	o.Timestamp = &v
}

func (o KalturaESearchHistory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SearchTerm != nil {
		toSerialize["searchTerm"] = o.SearchTerm
	}
	if o.SearchedObject != nil {
		toSerialize["searchedObject"] = o.SearchedObject
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaESearchHistory struct {
	value *KalturaESearchHistory
	isSet bool
}

func (v NullableKalturaESearchHistory) Get() *KalturaESearchHistory {
	return v.value
}

func (v *NullableKalturaESearchHistory) Set(val *KalturaESearchHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaESearchHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaESearchHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaESearchHistory(val *KalturaESearchHistory) *NullableKalturaESearchHistory {
	return &NullableKalturaESearchHistory{value: val, isSet: true}
}

func (v NullableKalturaESearchHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaESearchHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


