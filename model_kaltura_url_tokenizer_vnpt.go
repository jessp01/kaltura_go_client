/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaUrlTokenizerVnpt struct for KalturaUrlTokenizerVnpt
type KalturaUrlTokenizerVnpt struct {
	KalturaUrlTokenizer
}

// NewKalturaUrlTokenizerVnpt instantiates a new KalturaUrlTokenizerVnpt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaUrlTokenizerVnpt() *KalturaUrlTokenizerVnpt {
	this := KalturaUrlTokenizerVnpt{}
	return &this
}

// NewKalturaUrlTokenizerVnptWithDefaults instantiates a new KalturaUrlTokenizerVnpt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaUrlTokenizerVnptWithDefaults() *KalturaUrlTokenizerVnpt {
	this := KalturaUrlTokenizerVnpt{}
	return &this
}

func (o KalturaUrlTokenizerVnpt) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedKalturaUrlTokenizer, errKalturaUrlTokenizer := json.Marshal(o.KalturaUrlTokenizer)
	if errKalturaUrlTokenizer != nil {
		return []byte{}, errKalturaUrlTokenizer
	}
	errKalturaUrlTokenizer = json.Unmarshal([]byte(serializedKalturaUrlTokenizer), &toSerialize)
	if errKalturaUrlTokenizer != nil {
		return []byte{}, errKalturaUrlTokenizer
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaUrlTokenizerVnpt struct {
	value *KalturaUrlTokenizerVnpt
	isSet bool
}

func (v NullableKalturaUrlTokenizerVnpt) Get() *KalturaUrlTokenizerVnpt {
	return v.value
}

func (v *NullableKalturaUrlTokenizerVnpt) Set(val *KalturaUrlTokenizerVnpt) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaUrlTokenizerVnpt) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaUrlTokenizerVnpt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaUrlTokenizerVnpt(val *KalturaUrlTokenizerVnpt) *NullableKalturaUrlTokenizerVnpt {
	return &NullableKalturaUrlTokenizerVnpt{value: val, isSet: true}
}

func (v NullableKalturaUrlTokenizerVnpt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaUrlTokenizerVnpt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


