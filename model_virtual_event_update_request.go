/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VirtualEventUpdateRequest struct for VirtualEventUpdateRequest
type VirtualEventUpdateRequest struct {
	Id int32 `json:"id"`
	VirtualEvent KalturaVirtualEvent `json:"virtualEvent"`
}

// NewVirtualEventUpdateRequest instantiates a new VirtualEventUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualEventUpdateRequest(id int32, virtualEvent KalturaVirtualEvent) *VirtualEventUpdateRequest {
	this := VirtualEventUpdateRequest{}
	this.Id = id
	this.VirtualEvent = virtualEvent
	return &this
}

// NewVirtualEventUpdateRequestWithDefaults instantiates a new VirtualEventUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualEventUpdateRequestWithDefaults() *VirtualEventUpdateRequest {
	this := VirtualEventUpdateRequest{}
	return &this
}

// GetId returns the Id field value
func (o *VirtualEventUpdateRequest) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VirtualEventUpdateRequest) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VirtualEventUpdateRequest) SetId(v int32) {
	o.Id = v
}

// GetVirtualEvent returns the VirtualEvent field value
func (o *VirtualEventUpdateRequest) GetVirtualEvent() KalturaVirtualEvent {
	if o == nil {
		var ret KalturaVirtualEvent
		return ret
	}

	return o.VirtualEvent
}

// GetVirtualEventOk returns a tuple with the VirtualEvent field value
// and a boolean to check if the value has been set.
func (o *VirtualEventUpdateRequest) GetVirtualEventOk() (*KalturaVirtualEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VirtualEvent, true
}

// SetVirtualEvent sets field value
func (o *VirtualEventUpdateRequest) SetVirtualEvent(v KalturaVirtualEvent) {
	o.VirtualEvent = v
}

func (o VirtualEventUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["virtualEvent"] = o.VirtualEvent
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualEventUpdateRequest struct {
	value *VirtualEventUpdateRequest
	isSet bool
}

func (v NullableVirtualEventUpdateRequest) Get() *VirtualEventUpdateRequest {
	return v.value
}

func (v *NullableVirtualEventUpdateRequest) Set(val *VirtualEventUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualEventUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualEventUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualEventUpdateRequest(val *VirtualEventUpdateRequest) *NullableVirtualEventUpdateRequest {
	return &NullableVirtualEventUpdateRequest{value: val, isSet: true}
}

func (v NullableVirtualEventUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualEventUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


