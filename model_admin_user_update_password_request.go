/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AdminUserUpdatePasswordRequest struct for AdminUserUpdatePasswordRequest
type AdminUserUpdatePasswordRequest struct {
	Email string `json:"email"`
	NewEmail *string `json:"newEmail,omitempty"`
	NewPassword *string `json:"newPassword,omitempty"`
	Otp *string `json:"otp,omitempty"`
	Password string `json:"password"`
}

// NewAdminUserUpdatePasswordRequest instantiates a new AdminUserUpdatePasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminUserUpdatePasswordRequest(email string, password string) *AdminUserUpdatePasswordRequest {
	this := AdminUserUpdatePasswordRequest{}
	this.Email = email
	this.Password = password
	return &this
}

// NewAdminUserUpdatePasswordRequestWithDefaults instantiates a new AdminUserUpdatePasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminUserUpdatePasswordRequestWithDefaults() *AdminUserUpdatePasswordRequest {
	this := AdminUserUpdatePasswordRequest{}
	return &this
}

// GetEmail returns the Email field value
func (o *AdminUserUpdatePasswordRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *AdminUserUpdatePasswordRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *AdminUserUpdatePasswordRequest) SetEmail(v string) {
	o.Email = v
}

// GetNewEmail returns the NewEmail field value if set, zero value otherwise.
func (o *AdminUserUpdatePasswordRequest) GetNewEmail() string {
	if o == nil || o.NewEmail == nil {
		var ret string
		return ret
	}
	return *o.NewEmail
}

// GetNewEmailOk returns a tuple with the NewEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminUserUpdatePasswordRequest) GetNewEmailOk() (*string, bool) {
	if o == nil || o.NewEmail == nil {
		return nil, false
	}
	return o.NewEmail, true
}

// HasNewEmail returns a boolean if a field has been set.
func (o *AdminUserUpdatePasswordRequest) HasNewEmail() bool {
	if o != nil && o.NewEmail != nil {
		return true
	}

	return false
}

// SetNewEmail gets a reference to the given string and assigns it to the NewEmail field.
func (o *AdminUserUpdatePasswordRequest) SetNewEmail(v string) {
	o.NewEmail = &v
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise.
func (o *AdminUserUpdatePasswordRequest) GetNewPassword() string {
	if o == nil || o.NewPassword == nil {
		var ret string
		return ret
	}
	return *o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminUserUpdatePasswordRequest) GetNewPasswordOk() (*string, bool) {
	if o == nil || o.NewPassword == nil {
		return nil, false
	}
	return o.NewPassword, true
}

// HasNewPassword returns a boolean if a field has been set.
func (o *AdminUserUpdatePasswordRequest) HasNewPassword() bool {
	if o != nil && o.NewPassword != nil {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given string and assigns it to the NewPassword field.
func (o *AdminUserUpdatePasswordRequest) SetNewPassword(v string) {
	o.NewPassword = &v
}

// GetOtp returns the Otp field value if set, zero value otherwise.
func (o *AdminUserUpdatePasswordRequest) GetOtp() string {
	if o == nil || o.Otp == nil {
		var ret string
		return ret
	}
	return *o.Otp
}

// GetOtpOk returns a tuple with the Otp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminUserUpdatePasswordRequest) GetOtpOk() (*string, bool) {
	if o == nil || o.Otp == nil {
		return nil, false
	}
	return o.Otp, true
}

// HasOtp returns a boolean if a field has been set.
func (o *AdminUserUpdatePasswordRequest) HasOtp() bool {
	if o != nil && o.Otp != nil {
		return true
	}

	return false
}

// SetOtp gets a reference to the given string and assigns it to the Otp field.
func (o *AdminUserUpdatePasswordRequest) SetOtp(v string) {
	o.Otp = &v
}

// GetPassword returns the Password field value
func (o *AdminUserUpdatePasswordRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *AdminUserUpdatePasswordRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *AdminUserUpdatePasswordRequest) SetPassword(v string) {
	o.Password = v
}

func (o AdminUserUpdatePasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.NewEmail != nil {
		toSerialize["newEmail"] = o.NewEmail
	}
	if o.NewPassword != nil {
		toSerialize["newPassword"] = o.NewPassword
	}
	if o.Otp != nil {
		toSerialize["otp"] = o.Otp
	}
	if true {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableAdminUserUpdatePasswordRequest struct {
	value *AdminUserUpdatePasswordRequest
	isSet bool
}

func (v NullableAdminUserUpdatePasswordRequest) Get() *AdminUserUpdatePasswordRequest {
	return v.value
}

func (v *NullableAdminUserUpdatePasswordRequest) Set(val *AdminUserUpdatePasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminUserUpdatePasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminUserUpdatePasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminUserUpdatePasswordRequest(val *AdminUserUpdatePasswordRequest) *NullableAdminUserUpdatePasswordRequest {
	return &NullableAdminUserUpdatePasswordRequest{value: val, isSet: true}
}

func (v NullableAdminUserUpdatePasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminUserUpdatePasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


