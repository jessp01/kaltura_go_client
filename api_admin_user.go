/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// AdminUserApiService AdminUserApi service
type AdminUserApiService service

type ApiAdminUserLoginRequest struct {
	ctx context.Context
	ApiService *AdminUserApiService
	format *int32
	clientTag *string
	partnerId *int32
	body *AdminUserLoginRequest
}

// The format of the response
func (r ApiAdminUserLoginRequest) Format(format int32) ApiAdminUserLoginRequest {
	r.format = &format
	return r
}

func (r ApiAdminUserLoginRequest) ClientTag(clientTag string) ApiAdminUserLoginRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiAdminUserLoginRequest) PartnerId(partnerId int32) ApiAdminUserLoginRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiAdminUserLoginRequest) Body(body AdminUserLoginRequest) ApiAdminUserLoginRequest {
	r.body = &body
	return r
}

func (r ApiAdminUserLoginRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.AdminUserLoginExecute(r)
}

/*
AdminUserLogin Method for AdminUserLogin

Get an admin session using admin email and password (Used for login to the KMC application)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUserLoginRequest
*/
func (a *AdminUserApiService) AdminUserLogin(ctx context.Context) ApiAdminUserLoginRequest {
	return ApiAdminUserLoginRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *AdminUserApiService) AdminUserLoginExecute(r ApiAdminUserLoginRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUserApiService.AdminUserLogin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/adminuser/action/login"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUserResetPasswordRequest struct {
	ctx context.Context
	ApiService *AdminUserApiService
	format *int32
	clientTag *string
	partnerId *int32
	body *AdminUserResetPasswordRequest
}

// The format of the response
func (r ApiAdminUserResetPasswordRequest) Format(format int32) ApiAdminUserResetPasswordRequest {
	r.format = &format
	return r
}

func (r ApiAdminUserResetPasswordRequest) ClientTag(clientTag string) ApiAdminUserResetPasswordRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiAdminUserResetPasswordRequest) PartnerId(partnerId int32) ApiAdminUserResetPasswordRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiAdminUserResetPasswordRequest) Body(body AdminUserResetPasswordRequest) ApiAdminUserResetPasswordRequest {
	r.body = &body
	return r
}

func (r ApiAdminUserResetPasswordRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminUserResetPasswordExecute(r)
}

/*
AdminUserResetPassword Method for AdminUserResetPassword

Reset admin user password and send it to the users email address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUserResetPasswordRequest
*/
func (a *AdminUserApiService) AdminUserResetPassword(ctx context.Context) ApiAdminUserResetPasswordRequest {
	return ApiAdminUserResetPasswordRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AdminUserApiService) AdminUserResetPasswordExecute(r ApiAdminUserResetPasswordRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUserApiService.AdminUserResetPassword")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/adminuser/action/resetPassword"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAdminUserSetInitialPasswordRequest struct {
	ctx context.Context
	ApiService *AdminUserApiService
	format *int32
	clientTag *string
	partnerId *int32
	body *AdminUserSetInitialPasswordRequest
}

// The format of the response
func (r ApiAdminUserSetInitialPasswordRequest) Format(format int32) ApiAdminUserSetInitialPasswordRequest {
	r.format = &format
	return r
}

func (r ApiAdminUserSetInitialPasswordRequest) ClientTag(clientTag string) ApiAdminUserSetInitialPasswordRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiAdminUserSetInitialPasswordRequest) PartnerId(partnerId int32) ApiAdminUserSetInitialPasswordRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiAdminUserSetInitialPasswordRequest) Body(body AdminUserSetInitialPasswordRequest) ApiAdminUserSetInitialPasswordRequest {
	r.body = &body
	return r
}

func (r ApiAdminUserSetInitialPasswordRequest) Execute() (*KalturaAuthentication, *http.Response, error) {
	return r.ApiService.AdminUserSetInitialPasswordExecute(r)
}

/*
AdminUserSetInitialPassword Method for AdminUserSetInitialPassword

Set initial users password

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUserSetInitialPasswordRequest
*/
func (a *AdminUserApiService) AdminUserSetInitialPassword(ctx context.Context) ApiAdminUserSetInitialPasswordRequest {
	return ApiAdminUserSetInitialPasswordRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaAuthentication
func (a *AdminUserApiService) AdminUserSetInitialPasswordExecute(r ApiAdminUserSetInitialPasswordRequest) (*KalturaAuthentication, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaAuthentication
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUserApiService.AdminUserSetInitialPassword")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/adminuser/action/setInitialPassword"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUserUpdatePasswordRequest struct {
	ctx context.Context
	ApiService *AdminUserApiService
	format *int32
	clientTag *string
	partnerId *int32
	body *AdminUserUpdatePasswordRequest
}

// The format of the response
func (r ApiAdminUserUpdatePasswordRequest) Format(format int32) ApiAdminUserUpdatePasswordRequest {
	r.format = &format
	return r
}

func (r ApiAdminUserUpdatePasswordRequest) ClientTag(clientTag string) ApiAdminUserUpdatePasswordRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiAdminUserUpdatePasswordRequest) PartnerId(partnerId int32) ApiAdminUserUpdatePasswordRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiAdminUserUpdatePasswordRequest) Body(body AdminUserUpdatePasswordRequest) ApiAdminUserUpdatePasswordRequest {
	r.body = &body
	return r
}

func (r ApiAdminUserUpdatePasswordRequest) Execute() (*KalturaAdminUser, *http.Response, error) {
	return r.ApiService.AdminUserUpdatePasswordExecute(r)
}

/*
AdminUserUpdatePassword Method for AdminUserUpdatePassword

Update admin user password and email

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUserUpdatePasswordRequest

Deprecated
*/
func (a *AdminUserApiService) AdminUserUpdatePassword(ctx context.Context) ApiAdminUserUpdatePasswordRequest {
	return ApiAdminUserUpdatePasswordRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaAdminUser
// Deprecated
func (a *AdminUserApiService) AdminUserUpdatePasswordExecute(r ApiAdminUserUpdatePasswordRequest) (*KalturaAdminUser, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaAdminUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUserApiService.AdminUserUpdatePassword")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/adminuser/action/updatePassword"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
