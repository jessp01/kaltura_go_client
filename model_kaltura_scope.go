/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaScope struct for KalturaScope
type KalturaScope struct {
	ObjectType *string `json:"objectType,omitempty"`
}

// NewKalturaScope instantiates a new KalturaScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaScope() *KalturaScope {
	this := KalturaScope{}
	return &this
}

// NewKalturaScopeWithDefaults instantiates a new KalturaScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaScopeWithDefaults() *KalturaScope {
	this := KalturaScope{}
	return &this
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *KalturaScope) GetObjectType() string {
	if o == nil || o.ObjectType == nil {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaScope) GetObjectTypeOk() (*string, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *KalturaScope) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *KalturaScope) SetObjectType(v string) {
	o.ObjectType = &v
}

func (o KalturaScope) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectType != nil {
		toSerialize["objectType"] = o.ObjectType
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaScope struct {
	value *KalturaScope
	isSet bool
}

func (v NullableKalturaScope) Get() *KalturaScope {
	return v.value
}

func (v *NullableKalturaScope) Set(val *KalturaScope) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaScope) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaScope(val *KalturaScope) *NullableKalturaScope {
	return &NullableKalturaScope{value: val, isSet: true}
}

func (v NullableKalturaScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


