/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaPlayerEmbedCodeType struct for KalturaPlayerEmbedCodeType
type KalturaPlayerEmbedCodeType struct {
	EntryOnly *bool `json:"entryOnly,omitempty"`
	Id *string `json:"id,omitempty"`
	Label *string `json:"label,omitempty"`
	MinVersion *string `json:"minVersion,omitempty"`
}

// NewKalturaPlayerEmbedCodeType instantiates a new KalturaPlayerEmbedCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaPlayerEmbedCodeType() *KalturaPlayerEmbedCodeType {
	this := KalturaPlayerEmbedCodeType{}
	return &this
}

// NewKalturaPlayerEmbedCodeTypeWithDefaults instantiates a new KalturaPlayerEmbedCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaPlayerEmbedCodeTypeWithDefaults() *KalturaPlayerEmbedCodeType {
	this := KalturaPlayerEmbedCodeType{}
	return &this
}

// GetEntryOnly returns the EntryOnly field value if set, zero value otherwise.
func (o *KalturaPlayerEmbedCodeType) GetEntryOnly() bool {
	if o == nil || o.EntryOnly == nil {
		var ret bool
		return ret
	}
	return *o.EntryOnly
}

// GetEntryOnlyOk returns a tuple with the EntryOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlayerEmbedCodeType) GetEntryOnlyOk() (*bool, bool) {
	if o == nil || o.EntryOnly == nil {
		return nil, false
	}
	return o.EntryOnly, true
}

// HasEntryOnly returns a boolean if a field has been set.
func (o *KalturaPlayerEmbedCodeType) HasEntryOnly() bool {
	if o != nil && o.EntryOnly != nil {
		return true
	}

	return false
}

// SetEntryOnly gets a reference to the given bool and assigns it to the EntryOnly field.
func (o *KalturaPlayerEmbedCodeType) SetEntryOnly(v bool) {
	o.EntryOnly = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KalturaPlayerEmbedCodeType) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlayerEmbedCodeType) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KalturaPlayerEmbedCodeType) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KalturaPlayerEmbedCodeType) SetId(v string) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *KalturaPlayerEmbedCodeType) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlayerEmbedCodeType) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *KalturaPlayerEmbedCodeType) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *KalturaPlayerEmbedCodeType) SetLabel(v string) {
	o.Label = &v
}

// GetMinVersion returns the MinVersion field value if set, zero value otherwise.
func (o *KalturaPlayerEmbedCodeType) GetMinVersion() string {
	if o == nil || o.MinVersion == nil {
		var ret string
		return ret
	}
	return *o.MinVersion
}

// GetMinVersionOk returns a tuple with the MinVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlayerEmbedCodeType) GetMinVersionOk() (*string, bool) {
	if o == nil || o.MinVersion == nil {
		return nil, false
	}
	return o.MinVersion, true
}

// HasMinVersion returns a boolean if a field has been set.
func (o *KalturaPlayerEmbedCodeType) HasMinVersion() bool {
	if o != nil && o.MinVersion != nil {
		return true
	}

	return false
}

// SetMinVersion gets a reference to the given string and assigns it to the MinVersion field.
func (o *KalturaPlayerEmbedCodeType) SetMinVersion(v string) {
	o.MinVersion = &v
}

func (o KalturaPlayerEmbedCodeType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntryOnly != nil {
		toSerialize["entryOnly"] = o.EntryOnly
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.MinVersion != nil {
		toSerialize["minVersion"] = o.MinVersion
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaPlayerEmbedCodeType struct {
	value *KalturaPlayerEmbedCodeType
	isSet bool
}

func (v NullableKalturaPlayerEmbedCodeType) Get() *KalturaPlayerEmbedCodeType {
	return v.value
}

func (v *NullableKalturaPlayerEmbedCodeType) Set(val *KalturaPlayerEmbedCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaPlayerEmbedCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaPlayerEmbedCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaPlayerEmbedCodeType(val *KalturaPlayerEmbedCodeType) *NullableKalturaPlayerEmbedCodeType {
	return &NullableKalturaPlayerEmbedCodeType{value: val, isSet: true}
}

func (v NullableKalturaPlayerEmbedCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaPlayerEmbedCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


