/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
)


// ThumbAssetApiService ThumbAssetApi service
type ThumbAssetApiService service

type ApiThumbAssetAddRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ThumbAssetAddRequest
}

func (r ApiThumbAssetAddRequest) Ks(ks string) ApiThumbAssetAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetAddRequest) Format(format int32) ApiThumbAssetAddRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetAddRequest) ClientTag(clientTag string) ApiThumbAssetAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetAddRequest) PartnerId(partnerId int32) ApiThumbAssetAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetAddRequest) Body(body ThumbAssetAddRequest) ApiThumbAssetAddRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetAddRequest) Execute() (*KalturaThumbAsset, *http.Response, error) {
	return r.ApiService.ThumbAssetAddExecute(r)
}

/*
ThumbAssetAdd Method for ThumbAssetAdd

Add thumbnail asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetAddRequest
*/
func (a *ThumbAssetApiService) ThumbAssetAdd(ctx context.Context) ApiThumbAssetAddRequest {
	return ApiThumbAssetAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaThumbAsset
func (a *ThumbAssetApiService) ThumbAssetAddExecute(r ApiThumbAssetAddRequest) (*KalturaThumbAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaThumbAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThumbAssetAddFromImageRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	entryId *string
	fileData **os.File
	ks *string
	format *int32
}

func (r ApiThumbAssetAddFromImageRequest) EntryId(entryId string) ApiThumbAssetAddFromImageRequest {
	r.entryId = &entryId
	return r
}

func (r ApiThumbAssetAddFromImageRequest) FileData(fileData *os.File) ApiThumbAssetAddFromImageRequest {
	r.fileData = &fileData
	return r
}

func (r ApiThumbAssetAddFromImageRequest) Ks(ks string) ApiThumbAssetAddFromImageRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetAddFromImageRequest) Format(format int32) ApiThumbAssetAddFromImageRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetAddFromImageRequest) Execute() (*KalturaThumbAsset, *http.Response, error) {
	return r.ApiService.ThumbAssetAddFromImageExecute(r)
}

/*
ThumbAssetAddFromImage Method for ThumbAssetAddFromImage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetAddFromImageRequest
*/
func (a *ThumbAssetApiService) ThumbAssetAddFromImage(ctx context.Context) ApiThumbAssetAddFromImageRequest {
	return ApiThumbAssetAddFromImageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaThumbAsset
func (a *ThumbAssetApiService) ThumbAssetAddFromImageExecute(r ApiThumbAssetAddFromImageRequest) (*KalturaThumbAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaThumbAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetAddFromImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/addFromImage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entryId == nil {
		return localVarReturnValue, nil, reportError("entryId is required and must be specified")
	}
	if r.fileData == nil {
		return localVarReturnValue, nil, reportError("fileData is required and must be specified")
	}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	localVarQueryParams.Add("entryId", parameterToString(*r.entryId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileDataLocalVarFormFileName string
	var fileDataLocalVarFileName     string
	var fileDataLocalVarFileBytes    []byte

	fileDataLocalVarFormFileName = "fileData"

	fileDataLocalVarFile := *r.fileData
	if fileDataLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(fileDataLocalVarFile)
		fileDataLocalVarFileBytes = fbs
		fileDataLocalVarFileName = fileDataLocalVarFile.Name()
		fileDataLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: fileDataLocalVarFileBytes, fileName: fileDataLocalVarFileName, formFileName: fileDataLocalVarFormFileName})
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThumbAssetAddFromUrlRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BaseEntryUpdateThumbnailFromUrlRequest
}

func (r ApiThumbAssetAddFromUrlRequest) Ks(ks string) ApiThumbAssetAddFromUrlRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetAddFromUrlRequest) Format(format int32) ApiThumbAssetAddFromUrlRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetAddFromUrlRequest) ClientTag(clientTag string) ApiThumbAssetAddFromUrlRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetAddFromUrlRequest) PartnerId(partnerId int32) ApiThumbAssetAddFromUrlRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetAddFromUrlRequest) Body(body BaseEntryUpdateThumbnailFromUrlRequest) ApiThumbAssetAddFromUrlRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetAddFromUrlRequest) Execute() (*KalturaThumbAsset, *http.Response, error) {
	return r.ApiService.ThumbAssetAddFromUrlExecute(r)
}

/*
ThumbAssetAddFromUrl Method for ThumbAssetAddFromUrl

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetAddFromUrlRequest

Deprecated
*/
func (a *ThumbAssetApiService) ThumbAssetAddFromUrl(ctx context.Context) ApiThumbAssetAddFromUrlRequest {
	return ApiThumbAssetAddFromUrlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaThumbAsset
// Deprecated
func (a *ThumbAssetApiService) ThumbAssetAddFromUrlExecute(r ApiThumbAssetAddFromUrlRequest) (*KalturaThumbAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaThumbAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetAddFromUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/addFromUrl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThumbAssetDeleteRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ThumbAssetDeleteRequest
}

func (r ApiThumbAssetDeleteRequest) Ks(ks string) ApiThumbAssetDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetDeleteRequest) Format(format int32) ApiThumbAssetDeleteRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetDeleteRequest) ClientTag(clientTag string) ApiThumbAssetDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetDeleteRequest) PartnerId(partnerId int32) ApiThumbAssetDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetDeleteRequest) Body(body ThumbAssetDeleteRequest) ApiThumbAssetDeleteRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ThumbAssetDeleteExecute(r)
}

/*
ThumbAssetDelete Method for ThumbAssetDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetDeleteRequest
*/
func (a *ThumbAssetApiService) ThumbAssetDelete(ctx context.Context) ApiThumbAssetDeleteRequest {
	return ApiThumbAssetDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ThumbAssetApiService) ThumbAssetDeleteExecute(r ApiThumbAssetDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiThumbAssetExportRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CaptionAssetExportRequest
}

func (r ApiThumbAssetExportRequest) Ks(ks string) ApiThumbAssetExportRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetExportRequest) Format(format int32) ApiThumbAssetExportRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetExportRequest) ClientTag(clientTag string) ApiThumbAssetExportRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetExportRequest) PartnerId(partnerId int32) ApiThumbAssetExportRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetExportRequest) Body(body CaptionAssetExportRequest) ApiThumbAssetExportRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetExportRequest) Execute() (*KalturaFlavorAsset, *http.Response, error) {
	return r.ApiService.ThumbAssetExportExecute(r)
}

/*
ThumbAssetExport Method for ThumbAssetExport

manually export an asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetExportRequest
*/
func (a *ThumbAssetApiService) ThumbAssetExport(ctx context.Context) ApiThumbAssetExportRequest {
	return ApiThumbAssetExportRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaFlavorAsset
func (a *ThumbAssetApiService) ThumbAssetExportExecute(r ApiThumbAssetExportRequest) (*KalturaFlavorAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaFlavorAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetExport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/export"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThumbAssetGenerateRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ThumbAssetGenerateRequest
}

func (r ApiThumbAssetGenerateRequest) Ks(ks string) ApiThumbAssetGenerateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetGenerateRequest) Format(format int32) ApiThumbAssetGenerateRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetGenerateRequest) ClientTag(clientTag string) ApiThumbAssetGenerateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetGenerateRequest) PartnerId(partnerId int32) ApiThumbAssetGenerateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetGenerateRequest) Body(body ThumbAssetGenerateRequest) ApiThumbAssetGenerateRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetGenerateRequest) Execute() (*KalturaThumbAsset, *http.Response, error) {
	return r.ApiService.ThumbAssetGenerateExecute(r)
}

/*
ThumbAssetGenerate Method for ThumbAssetGenerate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetGenerateRequest
*/
func (a *ThumbAssetApiService) ThumbAssetGenerate(ctx context.Context) ApiThumbAssetGenerateRequest {
	return ApiThumbAssetGenerateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaThumbAsset
func (a *ThumbAssetApiService) ThumbAssetGenerateExecute(r ApiThumbAssetGenerateRequest) (*KalturaThumbAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaThumbAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetGenerate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/generate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThumbAssetGenerateByEntryIdRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ThumbAssetGenerateByEntryIdRequest
}

func (r ApiThumbAssetGenerateByEntryIdRequest) Ks(ks string) ApiThumbAssetGenerateByEntryIdRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetGenerateByEntryIdRequest) Format(format int32) ApiThumbAssetGenerateByEntryIdRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetGenerateByEntryIdRequest) ClientTag(clientTag string) ApiThumbAssetGenerateByEntryIdRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetGenerateByEntryIdRequest) PartnerId(partnerId int32) ApiThumbAssetGenerateByEntryIdRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetGenerateByEntryIdRequest) Body(body ThumbAssetGenerateByEntryIdRequest) ApiThumbAssetGenerateByEntryIdRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetGenerateByEntryIdRequest) Execute() (*KalturaThumbAsset, *http.Response, error) {
	return r.ApiService.ThumbAssetGenerateByEntryIdExecute(r)
}

/*
ThumbAssetGenerateByEntryId Method for ThumbAssetGenerateByEntryId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetGenerateByEntryIdRequest
*/
func (a *ThumbAssetApiService) ThumbAssetGenerateByEntryId(ctx context.Context) ApiThumbAssetGenerateByEntryIdRequest {
	return ApiThumbAssetGenerateByEntryIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaThumbAsset
func (a *ThumbAssetApiService) ThumbAssetGenerateByEntryIdExecute(r ApiThumbAssetGenerateByEntryIdRequest) (*KalturaThumbAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaThumbAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetGenerateByEntryId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/generateByEntryId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThumbAssetGetRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ThumbAssetDeleteRequest
}

func (r ApiThumbAssetGetRequest) Ks(ks string) ApiThumbAssetGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetGetRequest) Format(format int32) ApiThumbAssetGetRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetGetRequest) ClientTag(clientTag string) ApiThumbAssetGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetGetRequest) PartnerId(partnerId int32) ApiThumbAssetGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetGetRequest) Body(body ThumbAssetDeleteRequest) ApiThumbAssetGetRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetGetRequest) Execute() (*KalturaThumbAsset, *http.Response, error) {
	return r.ApiService.ThumbAssetGetExecute(r)
}

/*
ThumbAssetGet Method for ThumbAssetGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetGetRequest
*/
func (a *ThumbAssetApiService) ThumbAssetGet(ctx context.Context) ApiThumbAssetGetRequest {
	return ApiThumbAssetGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaThumbAsset
func (a *ThumbAssetApiService) ThumbAssetGetExecute(r ApiThumbAssetGetRequest) (*KalturaThumbAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaThumbAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThumbAssetGetByEntryIdRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BaseEntryApproveRequest
}

func (r ApiThumbAssetGetByEntryIdRequest) Ks(ks string) ApiThumbAssetGetByEntryIdRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetGetByEntryIdRequest) Format(format int32) ApiThumbAssetGetByEntryIdRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetGetByEntryIdRequest) ClientTag(clientTag string) ApiThumbAssetGetByEntryIdRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetGetByEntryIdRequest) PartnerId(partnerId int32) ApiThumbAssetGetByEntryIdRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetGetByEntryIdRequest) Body(body BaseEntryApproveRequest) ApiThumbAssetGetByEntryIdRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetGetByEntryIdRequest) Execute() ([]KalturaThumbAsset, *http.Response, error) {
	return r.ApiService.ThumbAssetGetByEntryIdExecute(r)
}

/*
ThumbAssetGetByEntryId Method for ThumbAssetGetByEntryId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetGetByEntryIdRequest

Deprecated
*/
func (a *ThumbAssetApiService) ThumbAssetGetByEntryId(ctx context.Context) ApiThumbAssetGetByEntryIdRequest {
	return ApiThumbAssetGetByEntryIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KalturaThumbAsset
// Deprecated
func (a *ThumbAssetApiService) ThumbAssetGetByEntryIdExecute(r ApiThumbAssetGetByEntryIdRequest) ([]KalturaThumbAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KalturaThumbAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetGetByEntryId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/getByEntryId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThumbAssetGetRemotePathsRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AnnotationDeleteRequest
}

func (r ApiThumbAssetGetRemotePathsRequest) Ks(ks string) ApiThumbAssetGetRemotePathsRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetGetRemotePathsRequest) Format(format int32) ApiThumbAssetGetRemotePathsRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetGetRemotePathsRequest) ClientTag(clientTag string) ApiThumbAssetGetRemotePathsRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetGetRemotePathsRequest) PartnerId(partnerId int32) ApiThumbAssetGetRemotePathsRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetGetRemotePathsRequest) Body(body AnnotationDeleteRequest) ApiThumbAssetGetRemotePathsRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetGetRemotePathsRequest) Execute() (*KalturaRemotePathListResponse, *http.Response, error) {
	return r.ApiService.ThumbAssetGetRemotePathsExecute(r)
}

/*
ThumbAssetGetRemotePaths Method for ThumbAssetGetRemotePaths

Get remote storage existing paths for the asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetGetRemotePathsRequest
*/
func (a *ThumbAssetApiService) ThumbAssetGetRemotePaths(ctx context.Context) ApiThumbAssetGetRemotePathsRequest {
	return ApiThumbAssetGetRemotePathsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaRemotePathListResponse
func (a *ThumbAssetApiService) ThumbAssetGetRemotePathsExecute(r ApiThumbAssetGetRemotePathsRequest) (*KalturaRemotePathListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaRemotePathListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetGetRemotePaths")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/getRemotePaths"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThumbAssetGetUrlRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ThumbAssetGetUrlRequest
}

func (r ApiThumbAssetGetUrlRequest) Ks(ks string) ApiThumbAssetGetUrlRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetGetUrlRequest) Format(format int32) ApiThumbAssetGetUrlRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetGetUrlRequest) ClientTag(clientTag string) ApiThumbAssetGetUrlRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetGetUrlRequest) PartnerId(partnerId int32) ApiThumbAssetGetUrlRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetGetUrlRequest) Body(body ThumbAssetGetUrlRequest) ApiThumbAssetGetUrlRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetGetUrlRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ThumbAssetGetUrlExecute(r)
}

/*
ThumbAssetGetUrl Method for ThumbAssetGetUrl

Get download URL for the asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetGetUrlRequest
*/
func (a *ThumbAssetApiService) ThumbAssetGetUrl(ctx context.Context) ApiThumbAssetGetUrlRequest {
	return ApiThumbAssetGetUrlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ThumbAssetApiService) ThumbAssetGetUrlExecute(r ApiThumbAssetGetUrlRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetGetUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/getUrl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThumbAssetListRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AttachmentAssetListRequest
}

func (r ApiThumbAssetListRequest) Ks(ks string) ApiThumbAssetListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetListRequest) Format(format int32) ApiThumbAssetListRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetListRequest) ClientTag(clientTag string) ApiThumbAssetListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetListRequest) PartnerId(partnerId int32) ApiThumbAssetListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetListRequest) Body(body AttachmentAssetListRequest) ApiThumbAssetListRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetListRequest) Execute() (*KalturaThumbAssetListResponse, *http.Response, error) {
	return r.ApiService.ThumbAssetListExecute(r)
}

/*
ThumbAssetList Method for ThumbAssetList

List Thumbnail Assets by filter and pager

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetListRequest
*/
func (a *ThumbAssetApiService) ThumbAssetList(ctx context.Context) ApiThumbAssetListRequest {
	return ApiThumbAssetListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaThumbAssetListResponse
func (a *ThumbAssetApiService) ThumbAssetListExecute(r ApiThumbAssetListRequest) (*KalturaThumbAssetListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaThumbAssetListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThumbAssetRegenerateRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ThumbAssetDeleteRequest
}

func (r ApiThumbAssetRegenerateRequest) Ks(ks string) ApiThumbAssetRegenerateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetRegenerateRequest) Format(format int32) ApiThumbAssetRegenerateRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetRegenerateRequest) ClientTag(clientTag string) ApiThumbAssetRegenerateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetRegenerateRequest) PartnerId(partnerId int32) ApiThumbAssetRegenerateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetRegenerateRequest) Body(body ThumbAssetDeleteRequest) ApiThumbAssetRegenerateRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetRegenerateRequest) Execute() (*KalturaThumbAsset, *http.Response, error) {
	return r.ApiService.ThumbAssetRegenerateExecute(r)
}

/*
ThumbAssetRegenerate Method for ThumbAssetRegenerate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetRegenerateRequest
*/
func (a *ThumbAssetApiService) ThumbAssetRegenerate(ctx context.Context) ApiThumbAssetRegenerateRequest {
	return ApiThumbAssetRegenerateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaThumbAsset
func (a *ThumbAssetApiService) ThumbAssetRegenerateExecute(r ApiThumbAssetRegenerateRequest) (*KalturaThumbAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaThumbAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetRegenerate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/regenerate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThumbAssetServeRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ThumbAssetServeRequest
}

func (r ApiThumbAssetServeRequest) Ks(ks string) ApiThumbAssetServeRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetServeRequest) Format(format int32) ApiThumbAssetServeRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetServeRequest) ClientTag(clientTag string) ApiThumbAssetServeRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetServeRequest) PartnerId(partnerId int32) ApiThumbAssetServeRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetServeRequest) Body(body ThumbAssetServeRequest) ApiThumbAssetServeRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetServeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ThumbAssetServeExecute(r)
}

/*
ThumbAssetServe Method for ThumbAssetServe

Serves thumbnail by its id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetServeRequest
*/
func (a *ThumbAssetApiService) ThumbAssetServe(ctx context.Context) ApiThumbAssetServeRequest {
	return ApiThumbAssetServeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ThumbAssetApiService) ThumbAssetServeExecute(r ApiThumbAssetServeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetServe")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/serve"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThumbAssetServeByEntryIdRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ThumbAssetServeByEntryIdRequest
}

func (r ApiThumbAssetServeByEntryIdRequest) Ks(ks string) ApiThumbAssetServeByEntryIdRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetServeByEntryIdRequest) Format(format int32) ApiThumbAssetServeByEntryIdRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetServeByEntryIdRequest) ClientTag(clientTag string) ApiThumbAssetServeByEntryIdRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetServeByEntryIdRequest) PartnerId(partnerId int32) ApiThumbAssetServeByEntryIdRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetServeByEntryIdRequest) Body(body ThumbAssetServeByEntryIdRequest) ApiThumbAssetServeByEntryIdRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetServeByEntryIdRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ThumbAssetServeByEntryIdExecute(r)
}

/*
ThumbAssetServeByEntryId Method for ThumbAssetServeByEntryId

Serves thumbnail by entry id and thumbnail params id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetServeByEntryIdRequest
*/
func (a *ThumbAssetApiService) ThumbAssetServeByEntryId(ctx context.Context) ApiThumbAssetServeByEntryIdRequest {
	return ApiThumbAssetServeByEntryIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *ThumbAssetApiService) ThumbAssetServeByEntryIdExecute(r ApiThumbAssetServeByEntryIdRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetServeByEntryId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/serveByEntryId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThumbAssetSetAsDefaultRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ThumbAssetDeleteRequest
}

func (r ApiThumbAssetSetAsDefaultRequest) Ks(ks string) ApiThumbAssetSetAsDefaultRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetSetAsDefaultRequest) Format(format int32) ApiThumbAssetSetAsDefaultRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetSetAsDefaultRequest) ClientTag(clientTag string) ApiThumbAssetSetAsDefaultRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetSetAsDefaultRequest) PartnerId(partnerId int32) ApiThumbAssetSetAsDefaultRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetSetAsDefaultRequest) Body(body ThumbAssetDeleteRequest) ApiThumbAssetSetAsDefaultRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetSetAsDefaultRequest) Execute() (*http.Response, error) {
	return r.ApiService.ThumbAssetSetAsDefaultExecute(r)
}

/*
ThumbAssetSetAsDefault Method for ThumbAssetSetAsDefault

Tags the thumbnail as DEFAULT_THUMB and removes that tag from all other thumbnail assets of the entry.

Create a new file sync link on the entry thumbnail that points to the thumbnail asset file sync.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetSetAsDefaultRequest
*/
func (a *ThumbAssetApiService) ThumbAssetSetAsDefault(ctx context.Context) ApiThumbAssetSetAsDefaultRequest {
	return ApiThumbAssetSetAsDefaultRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ThumbAssetApiService) ThumbAssetSetAsDefaultExecute(r ApiThumbAssetSetAsDefaultRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetSetAsDefault")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/setAsDefault"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiThumbAssetSetContentRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AttachmentAssetSetContentRequest
}

func (r ApiThumbAssetSetContentRequest) Ks(ks string) ApiThumbAssetSetContentRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetSetContentRequest) Format(format int32) ApiThumbAssetSetContentRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetSetContentRequest) ClientTag(clientTag string) ApiThumbAssetSetContentRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetSetContentRequest) PartnerId(partnerId int32) ApiThumbAssetSetContentRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetSetContentRequest) Body(body AttachmentAssetSetContentRequest) ApiThumbAssetSetContentRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetSetContentRequest) Execute() (*KalturaThumbAsset, *http.Response, error) {
	return r.ApiService.ThumbAssetSetContentExecute(r)
}

/*
ThumbAssetSetContent Method for ThumbAssetSetContent

Update content of thumbnail asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetSetContentRequest
*/
func (a *ThumbAssetApiService) ThumbAssetSetContent(ctx context.Context) ApiThumbAssetSetContentRequest {
	return ApiThumbAssetSetContentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaThumbAsset
func (a *ThumbAssetApiService) ThumbAssetSetContentExecute(r ApiThumbAssetSetContentRequest) (*KalturaThumbAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaThumbAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetSetContent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/setContent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiThumbAssetUpdateRequest struct {
	ctx context.Context
	ApiService *ThumbAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ThumbAssetUpdateRequest
}

func (r ApiThumbAssetUpdateRequest) Ks(ks string) ApiThumbAssetUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiThumbAssetUpdateRequest) Format(format int32) ApiThumbAssetUpdateRequest {
	r.format = &format
	return r
}

func (r ApiThumbAssetUpdateRequest) ClientTag(clientTag string) ApiThumbAssetUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiThumbAssetUpdateRequest) PartnerId(partnerId int32) ApiThumbAssetUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiThumbAssetUpdateRequest) Body(body ThumbAssetUpdateRequest) ApiThumbAssetUpdateRequest {
	r.body = &body
	return r
}

func (r ApiThumbAssetUpdateRequest) Execute() (*KalturaThumbAsset, *http.Response, error) {
	return r.ApiService.ThumbAssetUpdateExecute(r)
}

/*
ThumbAssetUpdate Method for ThumbAssetUpdate

Update thumbnail asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiThumbAssetUpdateRequest
*/
func (a *ThumbAssetApiService) ThumbAssetUpdate(ctx context.Context) ApiThumbAssetUpdateRequest {
	return ApiThumbAssetUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaThumbAsset
func (a *ThumbAssetApiService) ThumbAssetUpdateExecute(r ApiThumbAssetUpdateRequest) (*KalturaThumbAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaThumbAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ThumbAssetApiService.ThumbAssetUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/thumbasset/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
