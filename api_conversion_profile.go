/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// ConversionProfileApiService ConversionProfileApi service
type ConversionProfileApiService service

type ApiConversionProfileAddRequest struct {
	ctx context.Context
	ApiService *ConversionProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ConversionProfileAddRequest
}

func (r ApiConversionProfileAddRequest) Ks(ks string) ApiConversionProfileAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiConversionProfileAddRequest) Format(format int32) ApiConversionProfileAddRequest {
	r.format = &format
	return r
}

func (r ApiConversionProfileAddRequest) ClientTag(clientTag string) ApiConversionProfileAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiConversionProfileAddRequest) PartnerId(partnerId int32) ApiConversionProfileAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiConversionProfileAddRequest) Body(body ConversionProfileAddRequest) ApiConversionProfileAddRequest {
	r.body = &body
	return r
}

func (r ApiConversionProfileAddRequest) Execute() (*KalturaConversionProfile, *http.Response, error) {
	return r.ApiService.ConversionProfileAddExecute(r)
}

/*
ConversionProfileAdd Method for ConversionProfileAdd

Add new Conversion Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConversionProfileAddRequest
*/
func (a *ConversionProfileApiService) ConversionProfileAdd(ctx context.Context) ApiConversionProfileAddRequest {
	return ApiConversionProfileAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaConversionProfile
func (a *ConversionProfileApiService) ConversionProfileAddExecute(r ApiConversionProfileAddRequest) (*KalturaConversionProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaConversionProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConversionProfileApiService.ConversionProfileAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/conversionprofile/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConversionProfileDeleteRequest struct {
	ctx context.Context
	ApiService *ConversionProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiConversionProfileDeleteRequest) Ks(ks string) ApiConversionProfileDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiConversionProfileDeleteRequest) Format(format int32) ApiConversionProfileDeleteRequest {
	r.format = &format
	return r
}

func (r ApiConversionProfileDeleteRequest) ClientTag(clientTag string) ApiConversionProfileDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiConversionProfileDeleteRequest) PartnerId(partnerId int32) ApiConversionProfileDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiConversionProfileDeleteRequest) Body(body AccessControlDeleteRequest) ApiConversionProfileDeleteRequest {
	r.body = &body
	return r
}

func (r ApiConversionProfileDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ConversionProfileDeleteExecute(r)
}

/*
ConversionProfileDelete Method for ConversionProfileDelete

Delete Conversion Profile by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConversionProfileDeleteRequest
*/
func (a *ConversionProfileApiService) ConversionProfileDelete(ctx context.Context) ApiConversionProfileDeleteRequest {
	return ApiConversionProfileDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ConversionProfileApiService) ConversionProfileDeleteExecute(r ApiConversionProfileDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConversionProfileApiService.ConversionProfileDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/conversionprofile/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiConversionProfileGetRequest struct {
	ctx context.Context
	ApiService *ConversionProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiConversionProfileGetRequest) Ks(ks string) ApiConversionProfileGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiConversionProfileGetRequest) Format(format int32) ApiConversionProfileGetRequest {
	r.format = &format
	return r
}

func (r ApiConversionProfileGetRequest) ClientTag(clientTag string) ApiConversionProfileGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiConversionProfileGetRequest) PartnerId(partnerId int32) ApiConversionProfileGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiConversionProfileGetRequest) Body(body AccessControlDeleteRequest) ApiConversionProfileGetRequest {
	r.body = &body
	return r
}

func (r ApiConversionProfileGetRequest) Execute() (*KalturaConversionProfile, *http.Response, error) {
	return r.ApiService.ConversionProfileGetExecute(r)
}

/*
ConversionProfileGet Method for ConversionProfileGet

Get Conversion Profile by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConversionProfileGetRequest
*/
func (a *ConversionProfileApiService) ConversionProfileGet(ctx context.Context) ApiConversionProfileGetRequest {
	return ApiConversionProfileGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaConversionProfile
func (a *ConversionProfileApiService) ConversionProfileGetExecute(r ApiConversionProfileGetRequest) (*KalturaConversionProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaConversionProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConversionProfileApiService.ConversionProfileGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/conversionprofile/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConversionProfileGetDefaultRequest struct {
	ctx context.Context
	ApiService *ConversionProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ConversionProfileGetDefaultRequest
}

func (r ApiConversionProfileGetDefaultRequest) Ks(ks string) ApiConversionProfileGetDefaultRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiConversionProfileGetDefaultRequest) Format(format int32) ApiConversionProfileGetDefaultRequest {
	r.format = &format
	return r
}

func (r ApiConversionProfileGetDefaultRequest) ClientTag(clientTag string) ApiConversionProfileGetDefaultRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiConversionProfileGetDefaultRequest) PartnerId(partnerId int32) ApiConversionProfileGetDefaultRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiConversionProfileGetDefaultRequest) Body(body ConversionProfileGetDefaultRequest) ApiConversionProfileGetDefaultRequest {
	r.body = &body
	return r
}

func (r ApiConversionProfileGetDefaultRequest) Execute() (*KalturaConversionProfile, *http.Response, error) {
	return r.ApiService.ConversionProfileGetDefaultExecute(r)
}

/*
ConversionProfileGetDefault Method for ConversionProfileGetDefault

Get the partner's default conversion profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConversionProfileGetDefaultRequest
*/
func (a *ConversionProfileApiService) ConversionProfileGetDefault(ctx context.Context) ApiConversionProfileGetDefaultRequest {
	return ApiConversionProfileGetDefaultRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaConversionProfile
func (a *ConversionProfileApiService) ConversionProfileGetDefaultExecute(r ApiConversionProfileGetDefaultRequest) (*KalturaConversionProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaConversionProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConversionProfileApiService.ConversionProfileGetDefault")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/conversionprofile/action/getDefault"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConversionProfileListRequest struct {
	ctx context.Context
	ApiService *ConversionProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ConversionProfileListRequest
}

func (r ApiConversionProfileListRequest) Ks(ks string) ApiConversionProfileListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiConversionProfileListRequest) Format(format int32) ApiConversionProfileListRequest {
	r.format = &format
	return r
}

func (r ApiConversionProfileListRequest) ClientTag(clientTag string) ApiConversionProfileListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiConversionProfileListRequest) PartnerId(partnerId int32) ApiConversionProfileListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiConversionProfileListRequest) Body(body ConversionProfileListRequest) ApiConversionProfileListRequest {
	r.body = &body
	return r
}

func (r ApiConversionProfileListRequest) Execute() (*KalturaConversionProfileListResponse, *http.Response, error) {
	return r.ApiService.ConversionProfileListExecute(r)
}

/*
ConversionProfileList Method for ConversionProfileList

List Conversion Profiles by filter with paging support

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConversionProfileListRequest
*/
func (a *ConversionProfileApiService) ConversionProfileList(ctx context.Context) ApiConversionProfileListRequest {
	return ApiConversionProfileListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaConversionProfileListResponse
func (a *ConversionProfileApiService) ConversionProfileListExecute(r ApiConversionProfileListRequest) (*KalturaConversionProfileListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaConversionProfileListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConversionProfileApiService.ConversionProfileList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/conversionprofile/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConversionProfileSetAsDefaultRequest struct {
	ctx context.Context
	ApiService *ConversionProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiConversionProfileSetAsDefaultRequest) Ks(ks string) ApiConversionProfileSetAsDefaultRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiConversionProfileSetAsDefaultRequest) Format(format int32) ApiConversionProfileSetAsDefaultRequest {
	r.format = &format
	return r
}

func (r ApiConversionProfileSetAsDefaultRequest) ClientTag(clientTag string) ApiConversionProfileSetAsDefaultRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiConversionProfileSetAsDefaultRequest) PartnerId(partnerId int32) ApiConversionProfileSetAsDefaultRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiConversionProfileSetAsDefaultRequest) Body(body AccessControlDeleteRequest) ApiConversionProfileSetAsDefaultRequest {
	r.body = &body
	return r
}

func (r ApiConversionProfileSetAsDefaultRequest) Execute() (*KalturaConversionProfile, *http.Response, error) {
	return r.ApiService.ConversionProfileSetAsDefaultExecute(r)
}

/*
ConversionProfileSetAsDefault Method for ConversionProfileSetAsDefault

Set Conversion Profile to be the partner default

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConversionProfileSetAsDefaultRequest
*/
func (a *ConversionProfileApiService) ConversionProfileSetAsDefault(ctx context.Context) ApiConversionProfileSetAsDefaultRequest {
	return ApiConversionProfileSetAsDefaultRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaConversionProfile
func (a *ConversionProfileApiService) ConversionProfileSetAsDefaultExecute(r ApiConversionProfileSetAsDefaultRequest) (*KalturaConversionProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaConversionProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConversionProfileApiService.ConversionProfileSetAsDefault")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/conversionprofile/action/setAsDefault"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConversionProfileUpdateRequest struct {
	ctx context.Context
	ApiService *ConversionProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ConversionProfileUpdateRequest
}

func (r ApiConversionProfileUpdateRequest) Ks(ks string) ApiConversionProfileUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiConversionProfileUpdateRequest) Format(format int32) ApiConversionProfileUpdateRequest {
	r.format = &format
	return r
}

func (r ApiConversionProfileUpdateRequest) ClientTag(clientTag string) ApiConversionProfileUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiConversionProfileUpdateRequest) PartnerId(partnerId int32) ApiConversionProfileUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiConversionProfileUpdateRequest) Body(body ConversionProfileUpdateRequest) ApiConversionProfileUpdateRequest {
	r.body = &body
	return r
}

func (r ApiConversionProfileUpdateRequest) Execute() (*KalturaConversionProfile, *http.Response, error) {
	return r.ApiService.ConversionProfileUpdateExecute(r)
}

/*
ConversionProfileUpdate Method for ConversionProfileUpdate

Update Conversion Profile by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiConversionProfileUpdateRequest
*/
func (a *ConversionProfileApiService) ConversionProfileUpdate(ctx context.Context) ApiConversionProfileUpdateRequest {
	return ApiConversionProfileUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaConversionProfile
func (a *ConversionProfileApiService) ConversionProfileUpdateExecute(r ApiConversionProfileUpdateRequest) (*KalturaConversionProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaConversionProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConversionProfileApiService.ConversionProfileUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/conversionprofile/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
