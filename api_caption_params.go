/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// CaptionParamsApiService CaptionParamsApi service
type CaptionParamsApiService service

type ApiCaptionParamsAddRequest struct {
	ctx context.Context
	ApiService *CaptionParamsApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CaptionParamsAddRequest
}

func (r ApiCaptionParamsAddRequest) Ks(ks string) ApiCaptionParamsAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionParamsAddRequest) Format(format int32) ApiCaptionParamsAddRequest {
	r.format = &format
	return r
}

func (r ApiCaptionParamsAddRequest) ClientTag(clientTag string) ApiCaptionParamsAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionParamsAddRequest) PartnerId(partnerId int32) ApiCaptionParamsAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionParamsAddRequest) Body(body CaptionParamsAddRequest) ApiCaptionParamsAddRequest {
	r.body = &body
	return r
}

func (r ApiCaptionParamsAddRequest) Execute() (*KalturaCaptionParams, *http.Response, error) {
	return r.ApiService.CaptionParamsAddExecute(r)
}

/*
CaptionParamsAdd Method for CaptionParamsAdd

Add new Caption Params

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionParamsAddRequest
*/
func (a *CaptionParamsApiService) CaptionParamsAdd(ctx context.Context) ApiCaptionParamsAddRequest {
	return ApiCaptionParamsAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaCaptionParams
func (a *CaptionParamsApiService) CaptionParamsAddExecute(r ApiCaptionParamsAddRequest) (*KalturaCaptionParams, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaCaptionParams
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionParamsApiService.CaptionParamsAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionparams/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCaptionParamsDeleteRequest struct {
	ctx context.Context
	ApiService *CaptionParamsApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiCaptionParamsDeleteRequest) Ks(ks string) ApiCaptionParamsDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionParamsDeleteRequest) Format(format int32) ApiCaptionParamsDeleteRequest {
	r.format = &format
	return r
}

func (r ApiCaptionParamsDeleteRequest) ClientTag(clientTag string) ApiCaptionParamsDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionParamsDeleteRequest) PartnerId(partnerId int32) ApiCaptionParamsDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionParamsDeleteRequest) Body(body AccessControlDeleteRequest) ApiCaptionParamsDeleteRequest {
	r.body = &body
	return r
}

func (r ApiCaptionParamsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.CaptionParamsDeleteExecute(r)
}

/*
CaptionParamsDelete Method for CaptionParamsDelete

Delete Caption Params by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionParamsDeleteRequest
*/
func (a *CaptionParamsApiService) CaptionParamsDelete(ctx context.Context) ApiCaptionParamsDeleteRequest {
	return ApiCaptionParamsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CaptionParamsApiService) CaptionParamsDeleteExecute(r ApiCaptionParamsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionParamsApiService.CaptionParamsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionparams/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCaptionParamsGetRequest struct {
	ctx context.Context
	ApiService *CaptionParamsApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiCaptionParamsGetRequest) Ks(ks string) ApiCaptionParamsGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionParamsGetRequest) Format(format int32) ApiCaptionParamsGetRequest {
	r.format = &format
	return r
}

func (r ApiCaptionParamsGetRequest) ClientTag(clientTag string) ApiCaptionParamsGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionParamsGetRequest) PartnerId(partnerId int32) ApiCaptionParamsGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionParamsGetRequest) Body(body AccessControlDeleteRequest) ApiCaptionParamsGetRequest {
	r.body = &body
	return r
}

func (r ApiCaptionParamsGetRequest) Execute() (*KalturaCaptionParams, *http.Response, error) {
	return r.ApiService.CaptionParamsGetExecute(r)
}

/*
CaptionParamsGet Method for CaptionParamsGet

Get Caption Params by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionParamsGetRequest
*/
func (a *CaptionParamsApiService) CaptionParamsGet(ctx context.Context) ApiCaptionParamsGetRequest {
	return ApiCaptionParamsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaCaptionParams
func (a *CaptionParamsApiService) CaptionParamsGetExecute(r ApiCaptionParamsGetRequest) (*KalturaCaptionParams, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaCaptionParams
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionParamsApiService.CaptionParamsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionparams/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCaptionParamsListRequest struct {
	ctx context.Context
	ApiService *CaptionParamsApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CaptionParamsListRequest
}

func (r ApiCaptionParamsListRequest) Ks(ks string) ApiCaptionParamsListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionParamsListRequest) Format(format int32) ApiCaptionParamsListRequest {
	r.format = &format
	return r
}

func (r ApiCaptionParamsListRequest) ClientTag(clientTag string) ApiCaptionParamsListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionParamsListRequest) PartnerId(partnerId int32) ApiCaptionParamsListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionParamsListRequest) Body(body CaptionParamsListRequest) ApiCaptionParamsListRequest {
	r.body = &body
	return r
}

func (r ApiCaptionParamsListRequest) Execute() (*KalturaCaptionParamsListResponse, *http.Response, error) {
	return r.ApiService.CaptionParamsListExecute(r)
}

/*
CaptionParamsList Method for CaptionParamsList

List Caption Params by filter with paging support (By default - all system default params will be listed too)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionParamsListRequest
*/
func (a *CaptionParamsApiService) CaptionParamsList(ctx context.Context) ApiCaptionParamsListRequest {
	return ApiCaptionParamsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaCaptionParamsListResponse
func (a *CaptionParamsApiService) CaptionParamsListExecute(r ApiCaptionParamsListRequest) (*KalturaCaptionParamsListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaCaptionParamsListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionParamsApiService.CaptionParamsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionparams/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCaptionParamsUpdateRequest struct {
	ctx context.Context
	ApiService *CaptionParamsApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CaptionParamsUpdateRequest
}

func (r ApiCaptionParamsUpdateRequest) Ks(ks string) ApiCaptionParamsUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionParamsUpdateRequest) Format(format int32) ApiCaptionParamsUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCaptionParamsUpdateRequest) ClientTag(clientTag string) ApiCaptionParamsUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionParamsUpdateRequest) PartnerId(partnerId int32) ApiCaptionParamsUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionParamsUpdateRequest) Body(body CaptionParamsUpdateRequest) ApiCaptionParamsUpdateRequest {
	r.body = &body
	return r
}

func (r ApiCaptionParamsUpdateRequest) Execute() (*KalturaCaptionParams, *http.Response, error) {
	return r.ApiService.CaptionParamsUpdateExecute(r)
}

/*
CaptionParamsUpdate Method for CaptionParamsUpdate

Update Caption Params by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionParamsUpdateRequest
*/
func (a *CaptionParamsApiService) CaptionParamsUpdate(ctx context.Context) ApiCaptionParamsUpdateRequest {
	return ApiCaptionParamsUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaCaptionParams
func (a *CaptionParamsApiService) CaptionParamsUpdateExecute(r ApiCaptionParamsUpdateRequest) (*KalturaCaptionParams, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaCaptionParams
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionParamsApiService.CaptionParamsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionparams/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
