/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaPlayerDeliveryType struct for KalturaPlayerDeliveryType
type KalturaPlayerDeliveryType struct {
	EnabledByDefault *bool `json:"enabledByDefault,omitempty"`
	Flashvars []KalturaKeyValue `json:"flashvars,omitempty"`
	Id *string `json:"id,omitempty"`
	Label *string `json:"label,omitempty"`
	MinVersion *string `json:"minVersion,omitempty"`
}

// NewKalturaPlayerDeliveryType instantiates a new KalturaPlayerDeliveryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaPlayerDeliveryType() *KalturaPlayerDeliveryType {
	this := KalturaPlayerDeliveryType{}
	return &this
}

// NewKalturaPlayerDeliveryTypeWithDefaults instantiates a new KalturaPlayerDeliveryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaPlayerDeliveryTypeWithDefaults() *KalturaPlayerDeliveryType {
	this := KalturaPlayerDeliveryType{}
	return &this
}

// GetEnabledByDefault returns the EnabledByDefault field value if set, zero value otherwise.
func (o *KalturaPlayerDeliveryType) GetEnabledByDefault() bool {
	if o == nil || o.EnabledByDefault == nil {
		var ret bool
		return ret
	}
	return *o.EnabledByDefault
}

// GetEnabledByDefaultOk returns a tuple with the EnabledByDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlayerDeliveryType) GetEnabledByDefaultOk() (*bool, bool) {
	if o == nil || o.EnabledByDefault == nil {
		return nil, false
	}
	return o.EnabledByDefault, true
}

// HasEnabledByDefault returns a boolean if a field has been set.
func (o *KalturaPlayerDeliveryType) HasEnabledByDefault() bool {
	if o != nil && o.EnabledByDefault != nil {
		return true
	}

	return false
}

// SetEnabledByDefault gets a reference to the given bool and assigns it to the EnabledByDefault field.
func (o *KalturaPlayerDeliveryType) SetEnabledByDefault(v bool) {
	o.EnabledByDefault = &v
}

// GetFlashvars returns the Flashvars field value if set, zero value otherwise.
func (o *KalturaPlayerDeliveryType) GetFlashvars() []KalturaKeyValue {
	if o == nil || o.Flashvars == nil {
		var ret []KalturaKeyValue
		return ret
	}
	return o.Flashvars
}

// GetFlashvarsOk returns a tuple with the Flashvars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlayerDeliveryType) GetFlashvarsOk() ([]KalturaKeyValue, bool) {
	if o == nil || o.Flashvars == nil {
		return nil, false
	}
	return o.Flashvars, true
}

// HasFlashvars returns a boolean if a field has been set.
func (o *KalturaPlayerDeliveryType) HasFlashvars() bool {
	if o != nil && o.Flashvars != nil {
		return true
	}

	return false
}

// SetFlashvars gets a reference to the given []KalturaKeyValue and assigns it to the Flashvars field.
func (o *KalturaPlayerDeliveryType) SetFlashvars(v []KalturaKeyValue) {
	o.Flashvars = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KalturaPlayerDeliveryType) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlayerDeliveryType) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KalturaPlayerDeliveryType) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KalturaPlayerDeliveryType) SetId(v string) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *KalturaPlayerDeliveryType) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlayerDeliveryType) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *KalturaPlayerDeliveryType) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *KalturaPlayerDeliveryType) SetLabel(v string) {
	o.Label = &v
}

// GetMinVersion returns the MinVersion field value if set, zero value otherwise.
func (o *KalturaPlayerDeliveryType) GetMinVersion() string {
	if o == nil || o.MinVersion == nil {
		var ret string
		return ret
	}
	return *o.MinVersion
}

// GetMinVersionOk returns a tuple with the MinVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlayerDeliveryType) GetMinVersionOk() (*string, bool) {
	if o == nil || o.MinVersion == nil {
		return nil, false
	}
	return o.MinVersion, true
}

// HasMinVersion returns a boolean if a field has been set.
func (o *KalturaPlayerDeliveryType) HasMinVersion() bool {
	if o != nil && o.MinVersion != nil {
		return true
	}

	return false
}

// SetMinVersion gets a reference to the given string and assigns it to the MinVersion field.
func (o *KalturaPlayerDeliveryType) SetMinVersion(v string) {
	o.MinVersion = &v
}

func (o KalturaPlayerDeliveryType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnabledByDefault != nil {
		toSerialize["enabledByDefault"] = o.EnabledByDefault
	}
	if o.Flashvars != nil {
		toSerialize["flashvars"] = o.Flashvars
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.MinVersion != nil {
		toSerialize["minVersion"] = o.MinVersion
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaPlayerDeliveryType struct {
	value *KalturaPlayerDeliveryType
	isSet bool
}

func (v NullableKalturaPlayerDeliveryType) Get() *KalturaPlayerDeliveryType {
	return v.value
}

func (v *NullableKalturaPlayerDeliveryType) Set(val *KalturaPlayerDeliveryType) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaPlayerDeliveryType) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaPlayerDeliveryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaPlayerDeliveryType(val *KalturaPlayerDeliveryType) *NullableKalturaPlayerDeliveryType {
	return &NullableKalturaPlayerDeliveryType{value: val, isSet: true}
}

func (v NullableKalturaPlayerDeliveryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaPlayerDeliveryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


