/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaRule struct for KalturaRule
type KalturaRule struct {
	Actions []KalturaRuleAction `json:"actions,omitempty"`
	// Code to be thrown to the player in case the rule is fulfilled
	Code *string `json:"code,omitempty"`
	Conditions []KalturaCondition `json:"conditions,omitempty"`
	Contexts []KalturaContextTypeHolder `json:"contexts,omitempty"`
	// Short Rule Description
	Description *string `json:"description,omitempty"`
	// Enum Type: `KalturaNullableBoolean`  Indicates if we should force ks validation for admin ks users as well
	ForceAdminValidation *int32 `json:"forceAdminValidation,omitempty"`
	// Message to be thrown to the player in case the rule is fulfilled
	Message *string `json:"message,omitempty"`
	// Rule Custom Data to allow saving rule specific information
	RuleData *string `json:"ruleData,omitempty"`
	// Indicates that this rule is enough and no need to continue checking the rest of the rules
	StopProcessing *bool `json:"stopProcessing,omitempty"`
}

// NewKalturaRule instantiates a new KalturaRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaRule() *KalturaRule {
	this := KalturaRule{}
	return &this
}

// NewKalturaRuleWithDefaults instantiates a new KalturaRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaRuleWithDefaults() *KalturaRule {
	this := KalturaRule{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *KalturaRule) GetActions() []KalturaRuleAction {
	if o == nil || o.Actions == nil {
		var ret []KalturaRuleAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaRule) GetActionsOk() ([]KalturaRuleAction, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *KalturaRule) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given []KalturaRuleAction and assigns it to the Actions field.
func (o *KalturaRule) SetActions(v []KalturaRuleAction) {
	o.Actions = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *KalturaRule) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaRule) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *KalturaRule) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *KalturaRule) SetCode(v string) {
	o.Code = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *KalturaRule) GetConditions() []KalturaCondition {
	if o == nil || o.Conditions == nil {
		var ret []KalturaCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaRule) GetConditionsOk() ([]KalturaCondition, bool) {
	if o == nil || o.Conditions == nil {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *KalturaRule) HasConditions() bool {
	if o != nil && o.Conditions != nil {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []KalturaCondition and assigns it to the Conditions field.
func (o *KalturaRule) SetConditions(v []KalturaCondition) {
	o.Conditions = v
}

// GetContexts returns the Contexts field value if set, zero value otherwise.
func (o *KalturaRule) GetContexts() []KalturaContextTypeHolder {
	if o == nil || o.Contexts == nil {
		var ret []KalturaContextTypeHolder
		return ret
	}
	return o.Contexts
}

// GetContextsOk returns a tuple with the Contexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaRule) GetContextsOk() ([]KalturaContextTypeHolder, bool) {
	if o == nil || o.Contexts == nil {
		return nil, false
	}
	return o.Contexts, true
}

// HasContexts returns a boolean if a field has been set.
func (o *KalturaRule) HasContexts() bool {
	if o != nil && o.Contexts != nil {
		return true
	}

	return false
}

// SetContexts gets a reference to the given []KalturaContextTypeHolder and assigns it to the Contexts field.
func (o *KalturaRule) SetContexts(v []KalturaContextTypeHolder) {
	o.Contexts = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *KalturaRule) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaRule) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *KalturaRule) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *KalturaRule) SetDescription(v string) {
	o.Description = &v
}

// GetForceAdminValidation returns the ForceAdminValidation field value if set, zero value otherwise.
func (o *KalturaRule) GetForceAdminValidation() int32 {
	if o == nil || o.ForceAdminValidation == nil {
		var ret int32
		return ret
	}
	return *o.ForceAdminValidation
}

// GetForceAdminValidationOk returns a tuple with the ForceAdminValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaRule) GetForceAdminValidationOk() (*int32, bool) {
	if o == nil || o.ForceAdminValidation == nil {
		return nil, false
	}
	return o.ForceAdminValidation, true
}

// HasForceAdminValidation returns a boolean if a field has been set.
func (o *KalturaRule) HasForceAdminValidation() bool {
	if o != nil && o.ForceAdminValidation != nil {
		return true
	}

	return false
}

// SetForceAdminValidation gets a reference to the given int32 and assigns it to the ForceAdminValidation field.
func (o *KalturaRule) SetForceAdminValidation(v int32) {
	o.ForceAdminValidation = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *KalturaRule) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaRule) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *KalturaRule) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *KalturaRule) SetMessage(v string) {
	o.Message = &v
}

// GetRuleData returns the RuleData field value if set, zero value otherwise.
func (o *KalturaRule) GetRuleData() string {
	if o == nil || o.RuleData == nil {
		var ret string
		return ret
	}
	return *o.RuleData
}

// GetRuleDataOk returns a tuple with the RuleData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaRule) GetRuleDataOk() (*string, bool) {
	if o == nil || o.RuleData == nil {
		return nil, false
	}
	return o.RuleData, true
}

// HasRuleData returns a boolean if a field has been set.
func (o *KalturaRule) HasRuleData() bool {
	if o != nil && o.RuleData != nil {
		return true
	}

	return false
}

// SetRuleData gets a reference to the given string and assigns it to the RuleData field.
func (o *KalturaRule) SetRuleData(v string) {
	o.RuleData = &v
}

// GetStopProcessing returns the StopProcessing field value if set, zero value otherwise.
func (o *KalturaRule) GetStopProcessing() bool {
	if o == nil || o.StopProcessing == nil {
		var ret bool
		return ret
	}
	return *o.StopProcessing
}

// GetStopProcessingOk returns a tuple with the StopProcessing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaRule) GetStopProcessingOk() (*bool, bool) {
	if o == nil || o.StopProcessing == nil {
		return nil, false
	}
	return o.StopProcessing, true
}

// HasStopProcessing returns a boolean if a field has been set.
func (o *KalturaRule) HasStopProcessing() bool {
	if o != nil && o.StopProcessing != nil {
		return true
	}

	return false
}

// SetStopProcessing gets a reference to the given bool and assigns it to the StopProcessing field.
func (o *KalturaRule) SetStopProcessing(v bool) {
	o.StopProcessing = &v
}

func (o KalturaRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Conditions != nil {
		toSerialize["conditions"] = o.Conditions
	}
	if o.Contexts != nil {
		toSerialize["contexts"] = o.Contexts
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ForceAdminValidation != nil {
		toSerialize["forceAdminValidation"] = o.ForceAdminValidation
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.RuleData != nil {
		toSerialize["ruleData"] = o.RuleData
	}
	if o.StopProcessing != nil {
		toSerialize["stopProcessing"] = o.StopProcessing
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaRule struct {
	value *KalturaRule
	isSet bool
}

func (v NullableKalturaRule) Get() *KalturaRule {
	return v.value
}

func (v *NullableKalturaRule) Set(val *KalturaRule) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaRule) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaRule(val *KalturaRule) *NullableKalturaRule {
	return &NullableKalturaRule{value: val, isSet: true}
}

func (v NullableKalturaRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


