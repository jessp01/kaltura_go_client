/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LiveReportsExportToCsvRequest struct for LiveReportsExportToCsvRequest
type LiveReportsExportToCsvRequest struct {
	Params KalturaLiveReportExportParams `json:"params"`
	ReportType int32 `json:"reportType"`
}

// NewLiveReportsExportToCsvRequest instantiates a new LiveReportsExportToCsvRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLiveReportsExportToCsvRequest(params KalturaLiveReportExportParams, reportType int32) *LiveReportsExportToCsvRequest {
	this := LiveReportsExportToCsvRequest{}
	this.Params = params
	this.ReportType = reportType
	return &this
}

// NewLiveReportsExportToCsvRequestWithDefaults instantiates a new LiveReportsExportToCsvRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLiveReportsExportToCsvRequestWithDefaults() *LiveReportsExportToCsvRequest {
	this := LiveReportsExportToCsvRequest{}
	return &this
}

// GetParams returns the Params field value
func (o *LiveReportsExportToCsvRequest) GetParams() KalturaLiveReportExportParams {
	if o == nil {
		var ret KalturaLiveReportExportParams
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *LiveReportsExportToCsvRequest) GetParamsOk() (*KalturaLiveReportExportParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Params, true
}

// SetParams sets field value
func (o *LiveReportsExportToCsvRequest) SetParams(v KalturaLiveReportExportParams) {
	o.Params = v
}

// GetReportType returns the ReportType field value
func (o *LiveReportsExportToCsvRequest) GetReportType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value
// and a boolean to check if the value has been set.
func (o *LiveReportsExportToCsvRequest) GetReportTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportType, true
}

// SetReportType sets field value
func (o *LiveReportsExportToCsvRequest) SetReportType(v int32) {
	o.ReportType = v
}

func (o LiveReportsExportToCsvRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["params"] = o.Params
	}
	if true {
		toSerialize["reportType"] = o.ReportType
	}
	return json.Marshal(toSerialize)
}

type NullableLiveReportsExportToCsvRequest struct {
	value *LiveReportsExportToCsvRequest
	isSet bool
}

func (v NullableLiveReportsExportToCsvRequest) Get() *LiveReportsExportToCsvRequest {
	return v.value
}

func (v *NullableLiveReportsExportToCsvRequest) Set(val *LiveReportsExportToCsvRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLiveReportsExportToCsvRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLiveReportsExportToCsvRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiveReportsExportToCsvRequest(val *LiveReportsExportToCsvRequest) *NullableLiveReportsExportToCsvRequest {
	return &NullableLiveReportsExportToCsvRequest{value: val, isSet: true}
}

func (v NullableLiveReportsExportToCsvRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLiveReportsExportToCsvRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


