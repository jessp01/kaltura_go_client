/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
)


// MetadataApiService MetadataApi service
type MetadataApiService service

type ApiMetadataAddRequest struct {
	ctx context.Context
	ApiService *MetadataApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *MetadataAddRequest
}

func (r ApiMetadataAddRequest) Ks(ks string) ApiMetadataAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiMetadataAddRequest) Format(format int32) ApiMetadataAddRequest {
	r.format = &format
	return r
}

func (r ApiMetadataAddRequest) ClientTag(clientTag string) ApiMetadataAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiMetadataAddRequest) PartnerId(partnerId int32) ApiMetadataAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiMetadataAddRequest) Body(body MetadataAddRequest) ApiMetadataAddRequest {
	r.body = &body
	return r
}

func (r ApiMetadataAddRequest) Execute() (*KalturaMetadata, *http.Response, error) {
	return r.ApiService.MetadataAddExecute(r)
}

/*
MetadataAdd Method for MetadataAdd

Allows you to add a metadata object and metadata content associated with Kaltura object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataAddRequest
*/
func (a *MetadataApiService) MetadataAdd(ctx context.Context) ApiMetadataAddRequest {
	return ApiMetadataAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaMetadata
func (a *MetadataApiService) MetadataAddExecute(r ApiMetadataAddRequest) (*KalturaMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataApiService.MetadataAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/metadata_metadata/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadataAddFromBulkRequest struct {
	ctx context.Context
	ApiService *MetadataApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *MetadataAddFromBulkRequest
}

func (r ApiMetadataAddFromBulkRequest) Ks(ks string) ApiMetadataAddFromBulkRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiMetadataAddFromBulkRequest) Format(format int32) ApiMetadataAddFromBulkRequest {
	r.format = &format
	return r
}

func (r ApiMetadataAddFromBulkRequest) ClientTag(clientTag string) ApiMetadataAddFromBulkRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiMetadataAddFromBulkRequest) PartnerId(partnerId int32) ApiMetadataAddFromBulkRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiMetadataAddFromBulkRequest) Body(body MetadataAddFromBulkRequest) ApiMetadataAddFromBulkRequest {
	r.body = &body
	return r
}

func (r ApiMetadataAddFromBulkRequest) Execute() (*KalturaMetadata, *http.Response, error) {
	return r.ApiService.MetadataAddFromBulkExecute(r)
}

/*
MetadataAddFromBulk Method for MetadataAddFromBulk

Allows you to add a metadata XML data from remote URL.

Enables different permissions than addFromUrl action.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataAddFromBulkRequest
*/
func (a *MetadataApiService) MetadataAddFromBulk(ctx context.Context) ApiMetadataAddFromBulkRequest {
	return ApiMetadataAddFromBulkRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaMetadata
func (a *MetadataApiService) MetadataAddFromBulkExecute(r ApiMetadataAddFromBulkRequest) (*KalturaMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataApiService.MetadataAddFromBulk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/metadata_metadata/action/addFromBulk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadataAddFromFileRequest struct {
	ctx context.Context
	ApiService *MetadataApiService
	metadataProfileId *int32
	objectType *string
	objectId *string
	xmlFile **os.File
	ks *string
	format *int32
}

func (r ApiMetadataAddFromFileRequest) MetadataProfileId(metadataProfileId int32) ApiMetadataAddFromFileRequest {
	r.metadataProfileId = &metadataProfileId
	return r
}

// Enum Type: &#x60;KalturaMetadataObjectType&#x60;
func (r ApiMetadataAddFromFileRequest) ObjectType(objectType string) ApiMetadataAddFromFileRequest {
	r.objectType = &objectType
	return r
}

func (r ApiMetadataAddFromFileRequest) ObjectId(objectId string) ApiMetadataAddFromFileRequest {
	r.objectId = &objectId
	return r
}

// XML metadata
func (r ApiMetadataAddFromFileRequest) XmlFile(xmlFile *os.File) ApiMetadataAddFromFileRequest {
	r.xmlFile = &xmlFile
	return r
}

func (r ApiMetadataAddFromFileRequest) Ks(ks string) ApiMetadataAddFromFileRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiMetadataAddFromFileRequest) Format(format int32) ApiMetadataAddFromFileRequest {
	r.format = &format
	return r
}

func (r ApiMetadataAddFromFileRequest) Execute() (*KalturaMetadata, *http.Response, error) {
	return r.ApiService.MetadataAddFromFileExecute(r)
}

/*
MetadataAddFromFile Method for MetadataAddFromFile

Allows you to add a metadata object and metadata file associated with Kaltura object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataAddFromFileRequest
*/
func (a *MetadataApiService) MetadataAddFromFile(ctx context.Context) ApiMetadataAddFromFileRequest {
	return ApiMetadataAddFromFileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaMetadata
func (a *MetadataApiService) MetadataAddFromFileExecute(r ApiMetadataAddFromFileRequest) (*KalturaMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataApiService.MetadataAddFromFile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/metadata_metadata/action/addFromFile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.metadataProfileId == nil {
		return localVarReturnValue, nil, reportError("metadataProfileId is required and must be specified")
	}
	if r.objectType == nil {
		return localVarReturnValue, nil, reportError("objectType is required and must be specified")
	}
	if r.objectId == nil {
		return localVarReturnValue, nil, reportError("objectId is required and must be specified")
	}
	if r.xmlFile == nil {
		return localVarReturnValue, nil, reportError("xmlFile is required and must be specified")
	}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	localVarQueryParams.Add("metadataProfileId", parameterToString(*r.metadataProfileId, ""))
	localVarQueryParams.Add("objectType", parameterToString(*r.objectType, ""))
	localVarQueryParams.Add("objectId", parameterToString(*r.objectId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var xmlFileLocalVarFormFileName string
	var xmlFileLocalVarFileName     string
	var xmlFileLocalVarFileBytes    []byte

	xmlFileLocalVarFormFileName = "xmlFile"

	xmlFileLocalVarFile := *r.xmlFile
	if xmlFileLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(xmlFileLocalVarFile)
		xmlFileLocalVarFileBytes = fbs
		xmlFileLocalVarFileName = xmlFileLocalVarFile.Name()
		xmlFileLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: xmlFileLocalVarFileBytes, fileName: xmlFileLocalVarFileName, formFileName: xmlFileLocalVarFormFileName})
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadataAddFromUrlRequest struct {
	ctx context.Context
	ApiService *MetadataApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *MetadataAddFromBulkRequest
}

func (r ApiMetadataAddFromUrlRequest) Ks(ks string) ApiMetadataAddFromUrlRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiMetadataAddFromUrlRequest) Format(format int32) ApiMetadataAddFromUrlRequest {
	r.format = &format
	return r
}

func (r ApiMetadataAddFromUrlRequest) ClientTag(clientTag string) ApiMetadataAddFromUrlRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiMetadataAddFromUrlRequest) PartnerId(partnerId int32) ApiMetadataAddFromUrlRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiMetadataAddFromUrlRequest) Body(body MetadataAddFromBulkRequest) ApiMetadataAddFromUrlRequest {
	r.body = &body
	return r
}

func (r ApiMetadataAddFromUrlRequest) Execute() (*KalturaMetadata, *http.Response, error) {
	return r.ApiService.MetadataAddFromUrlExecute(r)
}

/*
MetadataAddFromUrl Method for MetadataAddFromUrl

Allows you to add a metadata XML data from remote URL

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataAddFromUrlRequest
*/
func (a *MetadataApiService) MetadataAddFromUrl(ctx context.Context) ApiMetadataAddFromUrlRequest {
	return ApiMetadataAddFromUrlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaMetadata
func (a *MetadataApiService) MetadataAddFromUrlExecute(r ApiMetadataAddFromUrlRequest) (*KalturaMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataApiService.MetadataAddFromUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/metadata_metadata/action/addFromUrl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadataDeleteRequest struct {
	ctx context.Context
	ApiService *MetadataApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiMetadataDeleteRequest) Ks(ks string) ApiMetadataDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiMetadataDeleteRequest) Format(format int32) ApiMetadataDeleteRequest {
	r.format = &format
	return r
}

func (r ApiMetadataDeleteRequest) ClientTag(clientTag string) ApiMetadataDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiMetadataDeleteRequest) PartnerId(partnerId int32) ApiMetadataDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiMetadataDeleteRequest) Body(body AccessControlDeleteRequest) ApiMetadataDeleteRequest {
	r.body = &body
	return r
}

func (r ApiMetadataDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.MetadataDeleteExecute(r)
}

/*
MetadataDelete Method for MetadataDelete

Delete an existing metadata

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataDeleteRequest
*/
func (a *MetadataApiService) MetadataDelete(ctx context.Context) ApiMetadataDeleteRequest {
	return ApiMetadataDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MetadataApiService) MetadataDeleteExecute(r ApiMetadataDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataApiService.MetadataDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/metadata_metadata/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMetadataGetRequest struct {
	ctx context.Context
	ApiService *MetadataApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiMetadataGetRequest) Ks(ks string) ApiMetadataGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiMetadataGetRequest) Format(format int32) ApiMetadataGetRequest {
	r.format = &format
	return r
}

func (r ApiMetadataGetRequest) ClientTag(clientTag string) ApiMetadataGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiMetadataGetRequest) PartnerId(partnerId int32) ApiMetadataGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiMetadataGetRequest) Body(body AccessControlDeleteRequest) ApiMetadataGetRequest {
	r.body = &body
	return r
}

func (r ApiMetadataGetRequest) Execute() (*KalturaMetadata, *http.Response, error) {
	return r.ApiService.MetadataGetExecute(r)
}

/*
MetadataGet Method for MetadataGet

Retrieve a metadata object by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataGetRequest
*/
func (a *MetadataApiService) MetadataGet(ctx context.Context) ApiMetadataGetRequest {
	return ApiMetadataGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaMetadata
func (a *MetadataApiService) MetadataGetExecute(r ApiMetadataGetRequest) (*KalturaMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataApiService.MetadataGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/metadata_metadata/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadataIndexRequest struct {
	ctx context.Context
	ApiService *MetadataApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *MetadataIndexRequest
}

func (r ApiMetadataIndexRequest) Ks(ks string) ApiMetadataIndexRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiMetadataIndexRequest) Format(format int32) ApiMetadataIndexRequest {
	r.format = &format
	return r
}

func (r ApiMetadataIndexRequest) ClientTag(clientTag string) ApiMetadataIndexRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiMetadataIndexRequest) PartnerId(partnerId int32) ApiMetadataIndexRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiMetadataIndexRequest) Body(body MetadataIndexRequest) ApiMetadataIndexRequest {
	r.body = &body
	return r
}

func (r ApiMetadataIndexRequest) Execute() (int32, *http.Response, error) {
	return r.ApiService.MetadataIndexExecute(r)
}

/*
MetadataIndex Method for MetadataIndex

Index metadata by id, will also index the related object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataIndexRequest
*/
func (a *MetadataApiService) MetadataIndex(ctx context.Context) ApiMetadataIndexRequest {
	return ApiMetadataIndexRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return int32
func (a *MetadataApiService) MetadataIndexExecute(r ApiMetadataIndexRequest) (int32, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataApiService.MetadataIndex")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/metadata_metadata/action/index"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadataInvalidateRequest struct {
	ctx context.Context
	ApiService *MetadataApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *MetadataInvalidateRequest
}

func (r ApiMetadataInvalidateRequest) Ks(ks string) ApiMetadataInvalidateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiMetadataInvalidateRequest) Format(format int32) ApiMetadataInvalidateRequest {
	r.format = &format
	return r
}

func (r ApiMetadataInvalidateRequest) ClientTag(clientTag string) ApiMetadataInvalidateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiMetadataInvalidateRequest) PartnerId(partnerId int32) ApiMetadataInvalidateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiMetadataInvalidateRequest) Body(body MetadataInvalidateRequest) ApiMetadataInvalidateRequest {
	r.body = &body
	return r
}

func (r ApiMetadataInvalidateRequest) Execute() (*http.Response, error) {
	return r.ApiService.MetadataInvalidateExecute(r)
}

/*
MetadataInvalidate Method for MetadataInvalidate

Mark existing metadata as invalid

Used by batch metadata transform

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataInvalidateRequest
*/
func (a *MetadataApiService) MetadataInvalidate(ctx context.Context) ApiMetadataInvalidateRequest {
	return ApiMetadataInvalidateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MetadataApiService) MetadataInvalidateExecute(r ApiMetadataInvalidateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataApiService.MetadataInvalidate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/metadata_metadata/action/invalidate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMetadataListRequest struct {
	ctx context.Context
	ApiService *MetadataApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *MetadataListRequest
}

func (r ApiMetadataListRequest) Ks(ks string) ApiMetadataListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiMetadataListRequest) Format(format int32) ApiMetadataListRequest {
	r.format = &format
	return r
}

func (r ApiMetadataListRequest) ClientTag(clientTag string) ApiMetadataListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiMetadataListRequest) PartnerId(partnerId int32) ApiMetadataListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiMetadataListRequest) Body(body MetadataListRequest) ApiMetadataListRequest {
	r.body = &body
	return r
}

func (r ApiMetadataListRequest) Execute() (*KalturaMetadataListResponse, *http.Response, error) {
	return r.ApiService.MetadataListExecute(r)
}

/*
MetadataList Method for MetadataList

List metadata objects by filter and pager

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataListRequest
*/
func (a *MetadataApiService) MetadataList(ctx context.Context) ApiMetadataListRequest {
	return ApiMetadataListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaMetadataListResponse
func (a *MetadataApiService) MetadataListExecute(r ApiMetadataListRequest) (*KalturaMetadataListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaMetadataListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataApiService.MetadataList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/metadata_metadata/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadataServeRequest struct {
	ctx context.Context
	ApiService *MetadataApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiMetadataServeRequest) Ks(ks string) ApiMetadataServeRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiMetadataServeRequest) Format(format int32) ApiMetadataServeRequest {
	r.format = &format
	return r
}

func (r ApiMetadataServeRequest) ClientTag(clientTag string) ApiMetadataServeRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiMetadataServeRequest) PartnerId(partnerId int32) ApiMetadataServeRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiMetadataServeRequest) Body(body AccessControlDeleteRequest) ApiMetadataServeRequest {
	r.body = &body
	return r
}

func (r ApiMetadataServeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.MetadataServeExecute(r)
}

/*
MetadataServe Method for MetadataServe

Serves metadata XML file

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataServeRequest
*/
func (a *MetadataApiService) MetadataServe(ctx context.Context) ApiMetadataServeRequest {
	return ApiMetadataServeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *MetadataApiService) MetadataServeExecute(r ApiMetadataServeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataApiService.MetadataServe")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/metadata_metadata/action/serve"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadataUpdateRequest struct {
	ctx context.Context
	ApiService *MetadataApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *MetadataUpdateRequest
}

func (r ApiMetadataUpdateRequest) Ks(ks string) ApiMetadataUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiMetadataUpdateRequest) Format(format int32) ApiMetadataUpdateRequest {
	r.format = &format
	return r
}

func (r ApiMetadataUpdateRequest) ClientTag(clientTag string) ApiMetadataUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiMetadataUpdateRequest) PartnerId(partnerId int32) ApiMetadataUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiMetadataUpdateRequest) Body(body MetadataUpdateRequest) ApiMetadataUpdateRequest {
	r.body = &body
	return r
}

func (r ApiMetadataUpdateRequest) Execute() (*KalturaMetadata, *http.Response, error) {
	return r.ApiService.MetadataUpdateExecute(r)
}

/*
MetadataUpdate Method for MetadataUpdate

Update an existing metadata object with new XML content

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataUpdateRequest
*/
func (a *MetadataApiService) MetadataUpdate(ctx context.Context) ApiMetadataUpdateRequest {
	return ApiMetadataUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaMetadata
func (a *MetadataApiService) MetadataUpdateExecute(r ApiMetadataUpdateRequest) (*KalturaMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataApiService.MetadataUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/metadata_metadata/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadataUpdateFromFileRequest struct {
	ctx context.Context
	ApiService *MetadataApiService
	id *int32
	ks *string
	format *int32
	xmlFile **os.File
}

func (r ApiMetadataUpdateFromFileRequest) Id(id int32) ApiMetadataUpdateFromFileRequest {
	r.id = &id
	return r
}

func (r ApiMetadataUpdateFromFileRequest) Ks(ks string) ApiMetadataUpdateFromFileRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiMetadataUpdateFromFileRequest) Format(format int32) ApiMetadataUpdateFromFileRequest {
	r.format = &format
	return r
}

// XML metadata
func (r ApiMetadataUpdateFromFileRequest) XmlFile(xmlFile *os.File) ApiMetadataUpdateFromFileRequest {
	r.xmlFile = &xmlFile
	return r
}

func (r ApiMetadataUpdateFromFileRequest) Execute() (*KalturaMetadata, *http.Response, error) {
	return r.ApiService.MetadataUpdateFromFileExecute(r)
}

/*
MetadataUpdateFromFile Method for MetadataUpdateFromFile

Update an existing metadata object with new XML file

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataUpdateFromFileRequest
*/
func (a *MetadataApiService) MetadataUpdateFromFile(ctx context.Context) ApiMetadataUpdateFromFileRequest {
	return ApiMetadataUpdateFromFileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaMetadata
func (a *MetadataApiService) MetadataUpdateFromFileExecute(r ApiMetadataUpdateFromFileRequest) (*KalturaMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataApiService.MetadataUpdateFromFile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/metadata_metadata/action/updateFromFile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var xmlFileLocalVarFormFileName string
	var xmlFileLocalVarFileName     string
	var xmlFileLocalVarFileBytes    []byte

	xmlFileLocalVarFormFileName = "xmlFile"

	var xmlFileLocalVarFile *os.File
	if r.xmlFile != nil {
		xmlFileLocalVarFile = *r.xmlFile
	}
	if xmlFileLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(xmlFileLocalVarFile)
		xmlFileLocalVarFileBytes = fbs
		xmlFileLocalVarFileName = xmlFileLocalVarFile.Name()
		xmlFileLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: xmlFileLocalVarFileBytes, fileName: xmlFileLocalVarFileName, formFileName: xmlFileLocalVarFormFileName})
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadataUpdateFromXSLRequest struct {
	ctx context.Context
	ApiService *MetadataApiService
	id *int32
	xslFile **os.File
	ks *string
	format *int32
}

func (r ApiMetadataUpdateFromXSLRequest) Id(id int32) ApiMetadataUpdateFromXSLRequest {
	r.id = &id
	return r
}

func (r ApiMetadataUpdateFromXSLRequest) XslFile(xslFile *os.File) ApiMetadataUpdateFromXSLRequest {
	r.xslFile = &xslFile
	return r
}

func (r ApiMetadataUpdateFromXSLRequest) Ks(ks string) ApiMetadataUpdateFromXSLRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiMetadataUpdateFromXSLRequest) Format(format int32) ApiMetadataUpdateFromXSLRequest {
	r.format = &format
	return r
}

func (r ApiMetadataUpdateFromXSLRequest) Execute() (*KalturaMetadata, *http.Response, error) {
	return r.ApiService.MetadataUpdateFromXSLExecute(r)
}

/*
MetadataUpdateFromXSL Method for MetadataUpdateFromXSL

Action transforms current metadata object XML using a provided XSL.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMetadataUpdateFromXSLRequest
*/
func (a *MetadataApiService) MetadataUpdateFromXSL(ctx context.Context) ApiMetadataUpdateFromXSLRequest {
	return ApiMetadataUpdateFromXSLRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaMetadata
func (a *MetadataApiService) MetadataUpdateFromXSLExecute(r ApiMetadataUpdateFromXSLRequest) (*KalturaMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataApiService.MetadataUpdateFromXSL")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/metadata_metadata/action/updateFromXSL"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}
	if r.xslFile == nil {
		return localVarReturnValue, nil, reportError("xslFile is required and must be specified")
	}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var xslFileLocalVarFormFileName string
	var xslFileLocalVarFileName     string
	var xslFileLocalVarFileBytes    []byte

	xslFileLocalVarFormFileName = "xslFile"

	xslFileLocalVarFile := *r.xslFile
	if xslFileLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(xslFileLocalVarFile)
		xslFileLocalVarFileBytes = fbs
		xslFileLocalVarFileName = xslFileLocalVarFile.Name()
		xslFileLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: xslFileLocalVarFileBytes, fileName: xslFileLocalVarFileName, formFileName: xslFileLocalVarFormFileName})
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
