/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// ResponseProfileApiService ResponseProfileApi service
type ResponseProfileApiService service

type ApiResponseProfileAddRequest struct {
	ctx context.Context
	ApiService *ResponseProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ResponseProfileAddRequest
}

func (r ApiResponseProfileAddRequest) Ks(ks string) ApiResponseProfileAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiResponseProfileAddRequest) Format(format int32) ApiResponseProfileAddRequest {
	r.format = &format
	return r
}

func (r ApiResponseProfileAddRequest) ClientTag(clientTag string) ApiResponseProfileAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiResponseProfileAddRequest) PartnerId(partnerId int32) ApiResponseProfileAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiResponseProfileAddRequest) Body(body ResponseProfileAddRequest) ApiResponseProfileAddRequest {
	r.body = &body
	return r
}

func (r ApiResponseProfileAddRequest) Execute() (*KalturaResponseProfile, *http.Response, error) {
	return r.ApiService.ResponseProfileAddExecute(r)
}

/*
ResponseProfileAdd Method for ResponseProfileAdd

Add new response profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiResponseProfileAddRequest
*/
func (a *ResponseProfileApiService) ResponseProfileAdd(ctx context.Context) ApiResponseProfileAddRequest {
	return ApiResponseProfileAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaResponseProfile
func (a *ResponseProfileApiService) ResponseProfileAddExecute(r ApiResponseProfileAddRequest) (*KalturaResponseProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaResponseProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResponseProfileApiService.ResponseProfileAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/responseprofile/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResponseProfileCloneRequest struct {
	ctx context.Context
	ApiService *ResponseProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ResponseProfileCloneRequest
}

func (r ApiResponseProfileCloneRequest) Ks(ks string) ApiResponseProfileCloneRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiResponseProfileCloneRequest) Format(format int32) ApiResponseProfileCloneRequest {
	r.format = &format
	return r
}

func (r ApiResponseProfileCloneRequest) ClientTag(clientTag string) ApiResponseProfileCloneRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiResponseProfileCloneRequest) PartnerId(partnerId int32) ApiResponseProfileCloneRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiResponseProfileCloneRequest) Body(body ResponseProfileCloneRequest) ApiResponseProfileCloneRequest {
	r.body = &body
	return r
}

func (r ApiResponseProfileCloneRequest) Execute() (*KalturaResponseProfile, *http.Response, error) {
	return r.ApiService.ResponseProfileCloneExecute(r)
}

/*
ResponseProfileClone Method for ResponseProfileClone

Clone an existing response profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiResponseProfileCloneRequest
*/
func (a *ResponseProfileApiService) ResponseProfileClone(ctx context.Context) ApiResponseProfileCloneRequest {
	return ApiResponseProfileCloneRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaResponseProfile
func (a *ResponseProfileApiService) ResponseProfileCloneExecute(r ApiResponseProfileCloneRequest) (*KalturaResponseProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaResponseProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResponseProfileApiService.ResponseProfileClone")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/responseprofile/action/clone"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResponseProfileDeleteRequest struct {
	ctx context.Context
	ApiService *ResponseProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiResponseProfileDeleteRequest) Ks(ks string) ApiResponseProfileDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiResponseProfileDeleteRequest) Format(format int32) ApiResponseProfileDeleteRequest {
	r.format = &format
	return r
}

func (r ApiResponseProfileDeleteRequest) ClientTag(clientTag string) ApiResponseProfileDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiResponseProfileDeleteRequest) PartnerId(partnerId int32) ApiResponseProfileDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiResponseProfileDeleteRequest) Body(body AccessControlDeleteRequest) ApiResponseProfileDeleteRequest {
	r.body = &body
	return r
}

func (r ApiResponseProfileDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResponseProfileDeleteExecute(r)
}

/*
ResponseProfileDelete Method for ResponseProfileDelete

Delete response profile by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiResponseProfileDeleteRequest
*/
func (a *ResponseProfileApiService) ResponseProfileDelete(ctx context.Context) ApiResponseProfileDeleteRequest {
	return ApiResponseProfileDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ResponseProfileApiService) ResponseProfileDeleteExecute(r ApiResponseProfileDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResponseProfileApiService.ResponseProfileDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/responseprofile/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiResponseProfileGetRequest struct {
	ctx context.Context
	ApiService *ResponseProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiResponseProfileGetRequest) Ks(ks string) ApiResponseProfileGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiResponseProfileGetRequest) Format(format int32) ApiResponseProfileGetRequest {
	r.format = &format
	return r
}

func (r ApiResponseProfileGetRequest) ClientTag(clientTag string) ApiResponseProfileGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiResponseProfileGetRequest) PartnerId(partnerId int32) ApiResponseProfileGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiResponseProfileGetRequest) Body(body AccessControlDeleteRequest) ApiResponseProfileGetRequest {
	r.body = &body
	return r
}

func (r ApiResponseProfileGetRequest) Execute() (*KalturaResponseProfile, *http.Response, error) {
	return r.ApiService.ResponseProfileGetExecute(r)
}

/*
ResponseProfileGet Method for ResponseProfileGet

Get response profile by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiResponseProfileGetRequest
*/
func (a *ResponseProfileApiService) ResponseProfileGet(ctx context.Context) ApiResponseProfileGetRequest {
	return ApiResponseProfileGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaResponseProfile
func (a *ResponseProfileApiService) ResponseProfileGetExecute(r ApiResponseProfileGetRequest) (*KalturaResponseProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaResponseProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResponseProfileApiService.ResponseProfileGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/responseprofile/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResponseProfileListRequest struct {
	ctx context.Context
	ApiService *ResponseProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ResponseProfileListRequest
}

func (r ApiResponseProfileListRequest) Ks(ks string) ApiResponseProfileListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiResponseProfileListRequest) Format(format int32) ApiResponseProfileListRequest {
	r.format = &format
	return r
}

func (r ApiResponseProfileListRequest) ClientTag(clientTag string) ApiResponseProfileListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiResponseProfileListRequest) PartnerId(partnerId int32) ApiResponseProfileListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiResponseProfileListRequest) Body(body ResponseProfileListRequest) ApiResponseProfileListRequest {
	r.body = &body
	return r
}

func (r ApiResponseProfileListRequest) Execute() (*KalturaResponseProfileListResponse, *http.Response, error) {
	return r.ApiService.ResponseProfileListExecute(r)
}

/*
ResponseProfileList Method for ResponseProfileList

List response profiles by filter and pager

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiResponseProfileListRequest
*/
func (a *ResponseProfileApiService) ResponseProfileList(ctx context.Context) ApiResponseProfileListRequest {
	return ApiResponseProfileListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaResponseProfileListResponse
func (a *ResponseProfileApiService) ResponseProfileListExecute(r ApiResponseProfileListRequest) (*KalturaResponseProfileListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaResponseProfileListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResponseProfileApiService.ResponseProfileList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/responseprofile/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResponseProfileRecalculateRequest struct {
	ctx context.Context
	ApiService *ResponseProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ResponseProfileRecalculateRequest
}

func (r ApiResponseProfileRecalculateRequest) Ks(ks string) ApiResponseProfileRecalculateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiResponseProfileRecalculateRequest) Format(format int32) ApiResponseProfileRecalculateRequest {
	r.format = &format
	return r
}

func (r ApiResponseProfileRecalculateRequest) ClientTag(clientTag string) ApiResponseProfileRecalculateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiResponseProfileRecalculateRequest) PartnerId(partnerId int32) ApiResponseProfileRecalculateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiResponseProfileRecalculateRequest) Body(body ResponseProfileRecalculateRequest) ApiResponseProfileRecalculateRequest {
	r.body = &body
	return r
}

func (r ApiResponseProfileRecalculateRequest) Execute() (*KalturaResponseProfileCacheRecalculateResults, *http.Response, error) {
	return r.ApiService.ResponseProfileRecalculateExecute(r)
}

/*
ResponseProfileRecalculate Method for ResponseProfileRecalculate

Recalculate response profile cached objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiResponseProfileRecalculateRequest
*/
func (a *ResponseProfileApiService) ResponseProfileRecalculate(ctx context.Context) ApiResponseProfileRecalculateRequest {
	return ApiResponseProfileRecalculateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaResponseProfileCacheRecalculateResults
func (a *ResponseProfileApiService) ResponseProfileRecalculateExecute(r ApiResponseProfileRecalculateRequest) (*KalturaResponseProfileCacheRecalculateResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaResponseProfileCacheRecalculateResults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResponseProfileApiService.ResponseProfileRecalculate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/responseprofile/action/recalculate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResponseProfileUpdateRequest struct {
	ctx context.Context
	ApiService *ResponseProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ResponseProfileUpdateRequest
}

func (r ApiResponseProfileUpdateRequest) Ks(ks string) ApiResponseProfileUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiResponseProfileUpdateRequest) Format(format int32) ApiResponseProfileUpdateRequest {
	r.format = &format
	return r
}

func (r ApiResponseProfileUpdateRequest) ClientTag(clientTag string) ApiResponseProfileUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiResponseProfileUpdateRequest) PartnerId(partnerId int32) ApiResponseProfileUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiResponseProfileUpdateRequest) Body(body ResponseProfileUpdateRequest) ApiResponseProfileUpdateRequest {
	r.body = &body
	return r
}

func (r ApiResponseProfileUpdateRequest) Execute() (*KalturaResponseProfile, *http.Response, error) {
	return r.ApiService.ResponseProfileUpdateExecute(r)
}

/*
ResponseProfileUpdate Method for ResponseProfileUpdate

Update response profile by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiResponseProfileUpdateRequest
*/
func (a *ResponseProfileApiService) ResponseProfileUpdate(ctx context.Context) ApiResponseProfileUpdateRequest {
	return ApiResponseProfileUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaResponseProfile
func (a *ResponseProfileApiService) ResponseProfileUpdateExecute(r ApiResponseProfileUpdateRequest) (*KalturaResponseProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaResponseProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResponseProfileApiService.ResponseProfileUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/responseprofile/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResponseProfileUpdateStatusRequest struct {
	ctx context.Context
	ApiService *ResponseProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *ResponseProfileUpdateStatusRequest
}

func (r ApiResponseProfileUpdateStatusRequest) Ks(ks string) ApiResponseProfileUpdateStatusRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiResponseProfileUpdateStatusRequest) Format(format int32) ApiResponseProfileUpdateStatusRequest {
	r.format = &format
	return r
}

func (r ApiResponseProfileUpdateStatusRequest) ClientTag(clientTag string) ApiResponseProfileUpdateStatusRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiResponseProfileUpdateStatusRequest) PartnerId(partnerId int32) ApiResponseProfileUpdateStatusRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiResponseProfileUpdateStatusRequest) Body(body ResponseProfileUpdateStatusRequest) ApiResponseProfileUpdateStatusRequest {
	r.body = &body
	return r
}

func (r ApiResponseProfileUpdateStatusRequest) Execute() (*KalturaResponseProfile, *http.Response, error) {
	return r.ApiService.ResponseProfileUpdateStatusExecute(r)
}

/*
ResponseProfileUpdateStatus Method for ResponseProfileUpdateStatus

Update response profile status by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiResponseProfileUpdateStatusRequest
*/
func (a *ResponseProfileApiService) ResponseProfileUpdateStatus(ctx context.Context) ApiResponseProfileUpdateStatusRequest {
	return ApiResponseProfileUpdateStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaResponseProfile
func (a *ResponseProfileApiService) ResponseProfileUpdateStatusExecute(r ApiResponseProfileUpdateStatusRequest) (*KalturaResponseProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaResponseProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResponseProfileApiService.ResponseProfileUpdateStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/responseprofile/action/updateStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
