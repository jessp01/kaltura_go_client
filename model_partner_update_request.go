/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PartnerUpdateRequest struct for PartnerUpdateRequest
type PartnerUpdateRequest struct {
	AllowEmpty *bool `json:"allowEmpty,omitempty"`
	Partner KalturaPartner `json:"partner"`
}

// NewPartnerUpdateRequest instantiates a new PartnerUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartnerUpdateRequest(partner KalturaPartner) *PartnerUpdateRequest {
	this := PartnerUpdateRequest{}
	var allowEmpty bool = false
	this.AllowEmpty = &allowEmpty
	this.Partner = partner
	return &this
}

// NewPartnerUpdateRequestWithDefaults instantiates a new PartnerUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartnerUpdateRequestWithDefaults() *PartnerUpdateRequest {
	this := PartnerUpdateRequest{}
	var allowEmpty bool = false
	this.AllowEmpty = &allowEmpty
	return &this
}

// GetAllowEmpty returns the AllowEmpty field value if set, zero value otherwise.
func (o *PartnerUpdateRequest) GetAllowEmpty() bool {
	if o == nil || o.AllowEmpty == nil {
		var ret bool
		return ret
	}
	return *o.AllowEmpty
}

// GetAllowEmptyOk returns a tuple with the AllowEmpty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerUpdateRequest) GetAllowEmptyOk() (*bool, bool) {
	if o == nil || o.AllowEmpty == nil {
		return nil, false
	}
	return o.AllowEmpty, true
}

// HasAllowEmpty returns a boolean if a field has been set.
func (o *PartnerUpdateRequest) HasAllowEmpty() bool {
	if o != nil && o.AllowEmpty != nil {
		return true
	}

	return false
}

// SetAllowEmpty gets a reference to the given bool and assigns it to the AllowEmpty field.
func (o *PartnerUpdateRequest) SetAllowEmpty(v bool) {
	o.AllowEmpty = &v
}

// GetPartner returns the Partner field value
func (o *PartnerUpdateRequest) GetPartner() KalturaPartner {
	if o == nil {
		var ret KalturaPartner
		return ret
	}

	return o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value
// and a boolean to check if the value has been set.
func (o *PartnerUpdateRequest) GetPartnerOk() (*KalturaPartner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Partner, true
}

// SetPartner sets field value
func (o *PartnerUpdateRequest) SetPartner(v KalturaPartner) {
	o.Partner = v
}

func (o PartnerUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowEmpty != nil {
		toSerialize["allowEmpty"] = o.AllowEmpty
	}
	if true {
		toSerialize["partner"] = o.Partner
	}
	return json.Marshal(toSerialize)
}

type NullablePartnerUpdateRequest struct {
	value *PartnerUpdateRequest
	isSet bool
}

func (v NullablePartnerUpdateRequest) Get() *PartnerUpdateRequest {
	return v.value
}

func (v *NullablePartnerUpdateRequest) Set(val *PartnerUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePartnerUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePartnerUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartnerUpdateRequest(val *PartnerUpdateRequest) *NullablePartnerUpdateRequest {
	return &NullablePartnerUpdateRequest{value: val, isSet: true}
}

func (v NullablePartnerUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartnerUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


