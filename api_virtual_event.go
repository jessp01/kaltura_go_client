/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// VirtualEventApiService VirtualEventApi service
type VirtualEventApiService service

type ApiVirtualEventAddRequest struct {
	ctx context.Context
	ApiService *VirtualEventApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VirtualEventAddRequest
}

func (r ApiVirtualEventAddRequest) Ks(ks string) ApiVirtualEventAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVirtualEventAddRequest) Format(format int32) ApiVirtualEventAddRequest {
	r.format = &format
	return r
}

func (r ApiVirtualEventAddRequest) ClientTag(clientTag string) ApiVirtualEventAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVirtualEventAddRequest) PartnerId(partnerId int32) ApiVirtualEventAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVirtualEventAddRequest) Body(body VirtualEventAddRequest) ApiVirtualEventAddRequest {
	r.body = &body
	return r
}

func (r ApiVirtualEventAddRequest) Execute() (*KalturaVirtualEvent, *http.Response, error) {
	return r.ApiService.VirtualEventAddExecute(r)
}

/*
VirtualEventAdd Method for VirtualEventAdd

Add a new virtual event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualEventAddRequest
*/
func (a *VirtualEventApiService) VirtualEventAdd(ctx context.Context) ApiVirtualEventAddRequest {
	return ApiVirtualEventAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaVirtualEvent
func (a *VirtualEventApiService) VirtualEventAddExecute(r ApiVirtualEventAddRequest) (*KalturaVirtualEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaVirtualEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualEventApiService.VirtualEventAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/virtualevent_virtualevent/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualEventDeleteRequest struct {
	ctx context.Context
	ApiService *VirtualEventApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiVirtualEventDeleteRequest) Ks(ks string) ApiVirtualEventDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVirtualEventDeleteRequest) Format(format int32) ApiVirtualEventDeleteRequest {
	r.format = &format
	return r
}

func (r ApiVirtualEventDeleteRequest) ClientTag(clientTag string) ApiVirtualEventDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVirtualEventDeleteRequest) PartnerId(partnerId int32) ApiVirtualEventDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVirtualEventDeleteRequest) Body(body AccessControlDeleteRequest) ApiVirtualEventDeleteRequest {
	r.body = &body
	return r
}

func (r ApiVirtualEventDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualEventDeleteExecute(r)
}

/*
VirtualEventDelete Method for VirtualEventDelete

Delete a virtual event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualEventDeleteRequest
*/
func (a *VirtualEventApiService) VirtualEventDelete(ctx context.Context) ApiVirtualEventDeleteRequest {
	return ApiVirtualEventDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VirtualEventApiService) VirtualEventDeleteExecute(r ApiVirtualEventDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualEventApiService.VirtualEventDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/virtualevent_virtualevent/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualEventGetRequest struct {
	ctx context.Context
	ApiService *VirtualEventApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiVirtualEventGetRequest) Ks(ks string) ApiVirtualEventGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVirtualEventGetRequest) Format(format int32) ApiVirtualEventGetRequest {
	r.format = &format
	return r
}

func (r ApiVirtualEventGetRequest) ClientTag(clientTag string) ApiVirtualEventGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVirtualEventGetRequest) PartnerId(partnerId int32) ApiVirtualEventGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVirtualEventGetRequest) Body(body AccessControlDeleteRequest) ApiVirtualEventGetRequest {
	r.body = &body
	return r
}

func (r ApiVirtualEventGetRequest) Execute() (*KalturaVirtualEvent, *http.Response, error) {
	return r.ApiService.VirtualEventGetExecute(r)
}

/*
VirtualEventGet Method for VirtualEventGet

Retrieve a virtual event by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualEventGetRequest
*/
func (a *VirtualEventApiService) VirtualEventGet(ctx context.Context) ApiVirtualEventGetRequest {
	return ApiVirtualEventGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaVirtualEvent
func (a *VirtualEventApiService) VirtualEventGetExecute(r ApiVirtualEventGetRequest) (*KalturaVirtualEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaVirtualEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualEventApiService.VirtualEventGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/virtualevent_virtualevent/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualEventListRequest struct {
	ctx context.Context
	ApiService *VirtualEventApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VirtualEventListRequest
}

func (r ApiVirtualEventListRequest) Ks(ks string) ApiVirtualEventListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVirtualEventListRequest) Format(format int32) ApiVirtualEventListRequest {
	r.format = &format
	return r
}

func (r ApiVirtualEventListRequest) ClientTag(clientTag string) ApiVirtualEventListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVirtualEventListRequest) PartnerId(partnerId int32) ApiVirtualEventListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVirtualEventListRequest) Body(body VirtualEventListRequest) ApiVirtualEventListRequest {
	r.body = &body
	return r
}

func (r ApiVirtualEventListRequest) Execute() (*KalturaVirtualEventListResponse, *http.Response, error) {
	return r.ApiService.VirtualEventListExecute(r)
}

/*
VirtualEventList Method for VirtualEventList

List virtual events

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualEventListRequest
*/
func (a *VirtualEventApiService) VirtualEventList(ctx context.Context) ApiVirtualEventListRequest {
	return ApiVirtualEventListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaVirtualEventListResponse
func (a *VirtualEventApiService) VirtualEventListExecute(r ApiVirtualEventListRequest) (*KalturaVirtualEventListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaVirtualEventListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualEventApiService.VirtualEventList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/virtualevent_virtualevent/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualEventUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualEventApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VirtualEventUpdateRequest
}

func (r ApiVirtualEventUpdateRequest) Ks(ks string) ApiVirtualEventUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVirtualEventUpdateRequest) Format(format int32) ApiVirtualEventUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirtualEventUpdateRequest) ClientTag(clientTag string) ApiVirtualEventUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVirtualEventUpdateRequest) PartnerId(partnerId int32) ApiVirtualEventUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVirtualEventUpdateRequest) Body(body VirtualEventUpdateRequest) ApiVirtualEventUpdateRequest {
	r.body = &body
	return r
}

func (r ApiVirtualEventUpdateRequest) Execute() (*KalturaVirtualEvent, *http.Response, error) {
	return r.ApiService.VirtualEventUpdateExecute(r)
}

/*
VirtualEventUpdate Method for VirtualEventUpdate

Update an existing virtual event

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualEventUpdateRequest
*/
func (a *VirtualEventApiService) VirtualEventUpdate(ctx context.Context) ApiVirtualEventUpdateRequest {
	return ApiVirtualEventUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaVirtualEvent
func (a *VirtualEventApiService) VirtualEventUpdateExecute(r ApiVirtualEventUpdateRequest) (*KalturaVirtualEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaVirtualEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualEventApiService.VirtualEventUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/virtualevent_virtualevent/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
