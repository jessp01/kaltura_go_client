/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// VirusScanProfileApiService VirusScanProfileApi service
type VirusScanProfileApiService service

type ApiVirusScanProfileAddRequest struct {
	ctx context.Context
	ApiService *VirusScanProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VirusScanProfileAddRequest
}

func (r ApiVirusScanProfileAddRequest) Ks(ks string) ApiVirusScanProfileAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVirusScanProfileAddRequest) Format(format int32) ApiVirusScanProfileAddRequest {
	r.format = &format
	return r
}

func (r ApiVirusScanProfileAddRequest) ClientTag(clientTag string) ApiVirusScanProfileAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVirusScanProfileAddRequest) PartnerId(partnerId int32) ApiVirusScanProfileAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVirusScanProfileAddRequest) Body(body VirusScanProfileAddRequest) ApiVirusScanProfileAddRequest {
	r.body = &body
	return r
}

func (r ApiVirusScanProfileAddRequest) Execute() (*KalturaVirusScanProfile, *http.Response, error) {
	return r.ApiService.VirusScanProfileAddExecute(r)
}

/*
VirusScanProfileAdd Method for VirusScanProfileAdd

Allows you to add an virus scan profile object and virus scan profile content associated with Kaltura object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirusScanProfileAddRequest
*/
func (a *VirusScanProfileApiService) VirusScanProfileAdd(ctx context.Context) ApiVirusScanProfileAddRequest {
	return ApiVirusScanProfileAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaVirusScanProfile
func (a *VirusScanProfileApiService) VirusScanProfileAddExecute(r ApiVirusScanProfileAddRequest) (*KalturaVirusScanProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaVirusScanProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirusScanProfileApiService.VirusScanProfileAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/virusscan_virusscanprofile/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirusScanProfileDeleteRequest struct {
	ctx context.Context
	ApiService *VirusScanProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VirusScanProfileDeleteRequest
}

func (r ApiVirusScanProfileDeleteRequest) Ks(ks string) ApiVirusScanProfileDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVirusScanProfileDeleteRequest) Format(format int32) ApiVirusScanProfileDeleteRequest {
	r.format = &format
	return r
}

func (r ApiVirusScanProfileDeleteRequest) ClientTag(clientTag string) ApiVirusScanProfileDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVirusScanProfileDeleteRequest) PartnerId(partnerId int32) ApiVirusScanProfileDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVirusScanProfileDeleteRequest) Body(body VirusScanProfileDeleteRequest) ApiVirusScanProfileDeleteRequest {
	r.body = &body
	return r
}

func (r ApiVirusScanProfileDeleteRequest) Execute() (*KalturaVirusScanProfile, *http.Response, error) {
	return r.ApiService.VirusScanProfileDeleteExecute(r)
}

/*
VirusScanProfileDelete Method for VirusScanProfileDelete

Mark the virus scan profile as deleted

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirusScanProfileDeleteRequest
*/
func (a *VirusScanProfileApiService) VirusScanProfileDelete(ctx context.Context) ApiVirusScanProfileDeleteRequest {
	return ApiVirusScanProfileDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaVirusScanProfile
func (a *VirusScanProfileApiService) VirusScanProfileDeleteExecute(r ApiVirusScanProfileDeleteRequest) (*KalturaVirusScanProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaVirusScanProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirusScanProfileApiService.VirusScanProfileDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/virusscan_virusscanprofile/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirusScanProfileGetRequest struct {
	ctx context.Context
	ApiService *VirusScanProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VirusScanProfileDeleteRequest
}

func (r ApiVirusScanProfileGetRequest) Ks(ks string) ApiVirusScanProfileGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVirusScanProfileGetRequest) Format(format int32) ApiVirusScanProfileGetRequest {
	r.format = &format
	return r
}

func (r ApiVirusScanProfileGetRequest) ClientTag(clientTag string) ApiVirusScanProfileGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVirusScanProfileGetRequest) PartnerId(partnerId int32) ApiVirusScanProfileGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVirusScanProfileGetRequest) Body(body VirusScanProfileDeleteRequest) ApiVirusScanProfileGetRequest {
	r.body = &body
	return r
}

func (r ApiVirusScanProfileGetRequest) Execute() (*KalturaVirusScanProfile, *http.Response, error) {
	return r.ApiService.VirusScanProfileGetExecute(r)
}

/*
VirusScanProfileGet Method for VirusScanProfileGet

Retrieve an virus scan profile object by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirusScanProfileGetRequest
*/
func (a *VirusScanProfileApiService) VirusScanProfileGet(ctx context.Context) ApiVirusScanProfileGetRequest {
	return ApiVirusScanProfileGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaVirusScanProfile
func (a *VirusScanProfileApiService) VirusScanProfileGetExecute(r ApiVirusScanProfileGetRequest) (*KalturaVirusScanProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaVirusScanProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirusScanProfileApiService.VirusScanProfileGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/virusscan_virusscanprofile/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirusScanProfileListRequest struct {
	ctx context.Context
	ApiService *VirusScanProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VirusScanProfileListRequest
}

func (r ApiVirusScanProfileListRequest) Ks(ks string) ApiVirusScanProfileListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVirusScanProfileListRequest) Format(format int32) ApiVirusScanProfileListRequest {
	r.format = &format
	return r
}

func (r ApiVirusScanProfileListRequest) ClientTag(clientTag string) ApiVirusScanProfileListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVirusScanProfileListRequest) PartnerId(partnerId int32) ApiVirusScanProfileListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVirusScanProfileListRequest) Body(body VirusScanProfileListRequest) ApiVirusScanProfileListRequest {
	r.body = &body
	return r
}

func (r ApiVirusScanProfileListRequest) Execute() (*KalturaVirusScanProfileListResponse, *http.Response, error) {
	return r.ApiService.VirusScanProfileListExecute(r)
}

/*
VirusScanProfileList Method for VirusScanProfileList

List virus scan profile objects by filter and pager

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirusScanProfileListRequest
*/
func (a *VirusScanProfileApiService) VirusScanProfileList(ctx context.Context) ApiVirusScanProfileListRequest {
	return ApiVirusScanProfileListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaVirusScanProfileListResponse
func (a *VirusScanProfileApiService) VirusScanProfileListExecute(r ApiVirusScanProfileListRequest) (*KalturaVirusScanProfileListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaVirusScanProfileListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirusScanProfileApiService.VirusScanProfileList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/virusscan_virusscanprofile/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirusScanProfileScanRequest struct {
	ctx context.Context
	ApiService *VirusScanProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VirusScanProfileScanRequest
}

func (r ApiVirusScanProfileScanRequest) Ks(ks string) ApiVirusScanProfileScanRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVirusScanProfileScanRequest) Format(format int32) ApiVirusScanProfileScanRequest {
	r.format = &format
	return r
}

func (r ApiVirusScanProfileScanRequest) ClientTag(clientTag string) ApiVirusScanProfileScanRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVirusScanProfileScanRequest) PartnerId(partnerId int32) ApiVirusScanProfileScanRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVirusScanProfileScanRequest) Body(body VirusScanProfileScanRequest) ApiVirusScanProfileScanRequest {
	r.body = &body
	return r
}

func (r ApiVirusScanProfileScanRequest) Execute() (int32, *http.Response, error) {
	return r.ApiService.VirusScanProfileScanExecute(r)
}

/*
VirusScanProfileScan Method for VirusScanProfileScan

Scan flavor asset according to virus scan profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirusScanProfileScanRequest
*/
func (a *VirusScanProfileApiService) VirusScanProfileScan(ctx context.Context) ApiVirusScanProfileScanRequest {
	return ApiVirusScanProfileScanRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return int32
func (a *VirusScanProfileApiService) VirusScanProfileScanExecute(r ApiVirusScanProfileScanRequest) (int32, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirusScanProfileApiService.VirusScanProfileScan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/virusscan_virusscanprofile/action/scan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirusScanProfileUpdateRequest struct {
	ctx context.Context
	ApiService *VirusScanProfileApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VirusScanProfileUpdateRequest
}

func (r ApiVirusScanProfileUpdateRequest) Ks(ks string) ApiVirusScanProfileUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVirusScanProfileUpdateRequest) Format(format int32) ApiVirusScanProfileUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVirusScanProfileUpdateRequest) ClientTag(clientTag string) ApiVirusScanProfileUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVirusScanProfileUpdateRequest) PartnerId(partnerId int32) ApiVirusScanProfileUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVirusScanProfileUpdateRequest) Body(body VirusScanProfileUpdateRequest) ApiVirusScanProfileUpdateRequest {
	r.body = &body
	return r
}

func (r ApiVirusScanProfileUpdateRequest) Execute() (*KalturaVirusScanProfile, *http.Response, error) {
	return r.ApiService.VirusScanProfileUpdateExecute(r)
}

/*
VirusScanProfileUpdate Method for VirusScanProfileUpdate

Update existing virus scan profile, it is possible to update the virus scan profile id too

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirusScanProfileUpdateRequest
*/
func (a *VirusScanProfileApiService) VirusScanProfileUpdate(ctx context.Context) ApiVirusScanProfileUpdateRequest {
	return ApiVirusScanProfileUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaVirusScanProfile
func (a *VirusScanProfileApiService) VirusScanProfileUpdateExecute(r ApiVirusScanProfileUpdateRequest) (*KalturaVirusScanProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaVirusScanProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirusScanProfileApiService.VirusScanProfileUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/virusscan_virusscanprofile/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
