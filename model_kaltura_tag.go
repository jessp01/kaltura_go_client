/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaTag struct for KalturaTag
type KalturaTag struct {
	// `readOnly`
	CreatedAt *int32 `json:"createdAt,omitempty"`
	// `readOnly`
	Id *int32 `json:"id,omitempty"`
	// `readOnly`
	InstanceCount *int32 `json:"instanceCount,omitempty"`
	// `readOnly`
	PartnerId *int32 `json:"partnerId,omitempty"`
	// `readOnly`
	Tag *string `json:"tag,omitempty"`
	// `readOnly`  Enum Type: `KalturaTaggedObjectType`
	TaggedObjectType *string `json:"taggedObjectType,omitempty"`
	// `readOnly`
	UpdatedAt *int32 `json:"updatedAt,omitempty"`
}

// NewKalturaTag instantiates a new KalturaTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaTag() *KalturaTag {
	this := KalturaTag{}
	return &this
}

// NewKalturaTagWithDefaults instantiates a new KalturaTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaTagWithDefaults() *KalturaTag {
	this := KalturaTag{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *KalturaTag) GetCreatedAt() int32 {
	if o == nil || o.CreatedAt == nil {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaTag) GetCreatedAtOk() (*int32, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *KalturaTag) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *KalturaTag) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KalturaTag) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaTag) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KalturaTag) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *KalturaTag) SetId(v int32) {
	o.Id = &v
}

// GetInstanceCount returns the InstanceCount field value if set, zero value otherwise.
func (o *KalturaTag) GetInstanceCount() int32 {
	if o == nil || o.InstanceCount == nil {
		var ret int32
		return ret
	}
	return *o.InstanceCount
}

// GetInstanceCountOk returns a tuple with the InstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaTag) GetInstanceCountOk() (*int32, bool) {
	if o == nil || o.InstanceCount == nil {
		return nil, false
	}
	return o.InstanceCount, true
}

// HasInstanceCount returns a boolean if a field has been set.
func (o *KalturaTag) HasInstanceCount() bool {
	if o != nil && o.InstanceCount != nil {
		return true
	}

	return false
}

// SetInstanceCount gets a reference to the given int32 and assigns it to the InstanceCount field.
func (o *KalturaTag) SetInstanceCount(v int32) {
	o.InstanceCount = &v
}

// GetPartnerId returns the PartnerId field value if set, zero value otherwise.
func (o *KalturaTag) GetPartnerId() int32 {
	if o == nil || o.PartnerId == nil {
		var ret int32
		return ret
	}
	return *o.PartnerId
}

// GetPartnerIdOk returns a tuple with the PartnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaTag) GetPartnerIdOk() (*int32, bool) {
	if o == nil || o.PartnerId == nil {
		return nil, false
	}
	return o.PartnerId, true
}

// HasPartnerId returns a boolean if a field has been set.
func (o *KalturaTag) HasPartnerId() bool {
	if o != nil && o.PartnerId != nil {
		return true
	}

	return false
}

// SetPartnerId gets a reference to the given int32 and assigns it to the PartnerId field.
func (o *KalturaTag) SetPartnerId(v int32) {
	o.PartnerId = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *KalturaTag) GetTag() string {
	if o == nil || o.Tag == nil {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaTag) GetTagOk() (*string, bool) {
	if o == nil || o.Tag == nil {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *KalturaTag) HasTag() bool {
	if o != nil && o.Tag != nil {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *KalturaTag) SetTag(v string) {
	o.Tag = &v
}

// GetTaggedObjectType returns the TaggedObjectType field value if set, zero value otherwise.
func (o *KalturaTag) GetTaggedObjectType() string {
	if o == nil || o.TaggedObjectType == nil {
		var ret string
		return ret
	}
	return *o.TaggedObjectType
}

// GetTaggedObjectTypeOk returns a tuple with the TaggedObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaTag) GetTaggedObjectTypeOk() (*string, bool) {
	if o == nil || o.TaggedObjectType == nil {
		return nil, false
	}
	return o.TaggedObjectType, true
}

// HasTaggedObjectType returns a boolean if a field has been set.
func (o *KalturaTag) HasTaggedObjectType() bool {
	if o != nil && o.TaggedObjectType != nil {
		return true
	}

	return false
}

// SetTaggedObjectType gets a reference to the given string and assigns it to the TaggedObjectType field.
func (o *KalturaTag) SetTaggedObjectType(v string) {
	o.TaggedObjectType = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *KalturaTag) GetUpdatedAt() int32 {
	if o == nil || o.UpdatedAt == nil {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaTag) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *KalturaTag) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *KalturaTag) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

func (o KalturaTag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.InstanceCount != nil {
		toSerialize["instanceCount"] = o.InstanceCount
	}
	if o.PartnerId != nil {
		toSerialize["partnerId"] = o.PartnerId
	}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	if o.TaggedObjectType != nil {
		toSerialize["taggedObjectType"] = o.TaggedObjectType
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaTag struct {
	value *KalturaTag
	isSet bool
}

func (v NullableKalturaTag) Get() *KalturaTag {
	return v.value
}

func (v *NullableKalturaTag) Set(val *KalturaTag) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaTag) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaTag(val *KalturaTag) *NullableKalturaTag {
	return &NullableKalturaTag{value: val, isSet: true}
}

func (v NullableKalturaTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


