/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// BusinessProcessServerApiService BusinessProcessServerApi service
type BusinessProcessServerApiService service

type ApiBusinessProcessServerAddRequest struct {
	ctx context.Context
	ApiService *BusinessProcessServerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BusinessProcessServerAddRequest
}

func (r ApiBusinessProcessServerAddRequest) Ks(ks string) ApiBusinessProcessServerAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBusinessProcessServerAddRequest) Format(format int32) ApiBusinessProcessServerAddRequest {
	r.format = &format
	return r
}

func (r ApiBusinessProcessServerAddRequest) ClientTag(clientTag string) ApiBusinessProcessServerAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBusinessProcessServerAddRequest) PartnerId(partnerId int32) ApiBusinessProcessServerAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBusinessProcessServerAddRequest) Body(body BusinessProcessServerAddRequest) ApiBusinessProcessServerAddRequest {
	r.body = &body
	return r
}

func (r ApiBusinessProcessServerAddRequest) Execute() (*KalturaBusinessProcessServer, *http.Response, error) {
	return r.ApiService.BusinessProcessServerAddExecute(r)
}

/*
BusinessProcessServerAdd Method for BusinessProcessServerAdd

Allows you to add a new Business-Process server object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBusinessProcessServerAddRequest
*/
func (a *BusinessProcessServerApiService) BusinessProcessServerAdd(ctx context.Context) ApiBusinessProcessServerAddRequest {
	return ApiBusinessProcessServerAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaBusinessProcessServer
func (a *BusinessProcessServerApiService) BusinessProcessServerAddExecute(r ApiBusinessProcessServerAddRequest) (*KalturaBusinessProcessServer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaBusinessProcessServer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessProcessServerApiService.BusinessProcessServerAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/businessprocessnotification_businessprocessserver/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessProcessServerDeleteRequest struct {
	ctx context.Context
	ApiService *BusinessProcessServerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiBusinessProcessServerDeleteRequest) Ks(ks string) ApiBusinessProcessServerDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBusinessProcessServerDeleteRequest) Format(format int32) ApiBusinessProcessServerDeleteRequest {
	r.format = &format
	return r
}

func (r ApiBusinessProcessServerDeleteRequest) ClientTag(clientTag string) ApiBusinessProcessServerDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBusinessProcessServerDeleteRequest) PartnerId(partnerId int32) ApiBusinessProcessServerDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBusinessProcessServerDeleteRequest) Body(body AccessControlDeleteRequest) ApiBusinessProcessServerDeleteRequest {
	r.body = &body
	return r
}

func (r ApiBusinessProcessServerDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.BusinessProcessServerDeleteExecute(r)
}

/*
BusinessProcessServerDelete Method for BusinessProcessServerDelete

Delete an Business-Process server object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBusinessProcessServerDeleteRequest
*/
func (a *BusinessProcessServerApiService) BusinessProcessServerDelete(ctx context.Context) ApiBusinessProcessServerDeleteRequest {
	return ApiBusinessProcessServerDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *BusinessProcessServerApiService) BusinessProcessServerDeleteExecute(r ApiBusinessProcessServerDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessProcessServerApiService.BusinessProcessServerDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/businessprocessnotification_businessprocessserver/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBusinessProcessServerGetRequest struct {
	ctx context.Context
	ApiService *BusinessProcessServerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiBusinessProcessServerGetRequest) Ks(ks string) ApiBusinessProcessServerGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBusinessProcessServerGetRequest) Format(format int32) ApiBusinessProcessServerGetRequest {
	r.format = &format
	return r
}

func (r ApiBusinessProcessServerGetRequest) ClientTag(clientTag string) ApiBusinessProcessServerGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBusinessProcessServerGetRequest) PartnerId(partnerId int32) ApiBusinessProcessServerGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBusinessProcessServerGetRequest) Body(body AccessControlDeleteRequest) ApiBusinessProcessServerGetRequest {
	r.body = &body
	return r
}

func (r ApiBusinessProcessServerGetRequest) Execute() (*KalturaBusinessProcessServer, *http.Response, error) {
	return r.ApiService.BusinessProcessServerGetExecute(r)
}

/*
BusinessProcessServerGet Method for BusinessProcessServerGet

Retrieve an Business-Process server object by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBusinessProcessServerGetRequest
*/
func (a *BusinessProcessServerApiService) BusinessProcessServerGet(ctx context.Context) ApiBusinessProcessServerGetRequest {
	return ApiBusinessProcessServerGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaBusinessProcessServer
func (a *BusinessProcessServerApiService) BusinessProcessServerGetExecute(r ApiBusinessProcessServerGetRequest) (*KalturaBusinessProcessServer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaBusinessProcessServer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessProcessServerApiService.BusinessProcessServerGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/businessprocessnotification_businessprocessserver/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessProcessServerListRequest struct {
	ctx context.Context
	ApiService *BusinessProcessServerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BusinessProcessServerListRequest
}

func (r ApiBusinessProcessServerListRequest) Ks(ks string) ApiBusinessProcessServerListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBusinessProcessServerListRequest) Format(format int32) ApiBusinessProcessServerListRequest {
	r.format = &format
	return r
}

func (r ApiBusinessProcessServerListRequest) ClientTag(clientTag string) ApiBusinessProcessServerListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBusinessProcessServerListRequest) PartnerId(partnerId int32) ApiBusinessProcessServerListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBusinessProcessServerListRequest) Body(body BusinessProcessServerListRequest) ApiBusinessProcessServerListRequest {
	r.body = &body
	return r
}

func (r ApiBusinessProcessServerListRequest) Execute() (*KalturaBusinessProcessServerListResponse, *http.Response, error) {
	return r.ApiService.BusinessProcessServerListExecute(r)
}

/*
BusinessProcessServerList Method for BusinessProcessServerList

list Business-Process server objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBusinessProcessServerListRequest
*/
func (a *BusinessProcessServerApiService) BusinessProcessServerList(ctx context.Context) ApiBusinessProcessServerListRequest {
	return ApiBusinessProcessServerListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaBusinessProcessServerListResponse
func (a *BusinessProcessServerApiService) BusinessProcessServerListExecute(r ApiBusinessProcessServerListRequest) (*KalturaBusinessProcessServerListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaBusinessProcessServerListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessProcessServerApiService.BusinessProcessServerList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/businessprocessnotification_businessprocessserver/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessProcessServerUpdateRequest struct {
	ctx context.Context
	ApiService *BusinessProcessServerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BusinessProcessServerUpdateRequest
}

func (r ApiBusinessProcessServerUpdateRequest) Ks(ks string) ApiBusinessProcessServerUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBusinessProcessServerUpdateRequest) Format(format int32) ApiBusinessProcessServerUpdateRequest {
	r.format = &format
	return r
}

func (r ApiBusinessProcessServerUpdateRequest) ClientTag(clientTag string) ApiBusinessProcessServerUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBusinessProcessServerUpdateRequest) PartnerId(partnerId int32) ApiBusinessProcessServerUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBusinessProcessServerUpdateRequest) Body(body BusinessProcessServerUpdateRequest) ApiBusinessProcessServerUpdateRequest {
	r.body = &body
	return r
}

func (r ApiBusinessProcessServerUpdateRequest) Execute() (*KalturaBusinessProcessServer, *http.Response, error) {
	return r.ApiService.BusinessProcessServerUpdateExecute(r)
}

/*
BusinessProcessServerUpdate Method for BusinessProcessServerUpdate

Update an existing Business-Process server object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBusinessProcessServerUpdateRequest
*/
func (a *BusinessProcessServerApiService) BusinessProcessServerUpdate(ctx context.Context) ApiBusinessProcessServerUpdateRequest {
	return ApiBusinessProcessServerUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaBusinessProcessServer
func (a *BusinessProcessServerApiService) BusinessProcessServerUpdateExecute(r ApiBusinessProcessServerUpdateRequest) (*KalturaBusinessProcessServer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaBusinessProcessServer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessProcessServerApiService.BusinessProcessServerUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/businessprocessnotification_businessprocessserver/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBusinessProcessServerUpdateStatusRequest struct {
	ctx context.Context
	ApiService *BusinessProcessServerApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BusinessProcessServerUpdateStatusRequest
}

func (r ApiBusinessProcessServerUpdateStatusRequest) Ks(ks string) ApiBusinessProcessServerUpdateStatusRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBusinessProcessServerUpdateStatusRequest) Format(format int32) ApiBusinessProcessServerUpdateStatusRequest {
	r.format = &format
	return r
}

func (r ApiBusinessProcessServerUpdateStatusRequest) ClientTag(clientTag string) ApiBusinessProcessServerUpdateStatusRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBusinessProcessServerUpdateStatusRequest) PartnerId(partnerId int32) ApiBusinessProcessServerUpdateStatusRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBusinessProcessServerUpdateStatusRequest) Body(body BusinessProcessServerUpdateStatusRequest) ApiBusinessProcessServerUpdateStatusRequest {
	r.body = &body
	return r
}

func (r ApiBusinessProcessServerUpdateStatusRequest) Execute() (*KalturaBusinessProcessServer, *http.Response, error) {
	return r.ApiService.BusinessProcessServerUpdateStatusExecute(r)
}

/*
BusinessProcessServerUpdateStatus Method for BusinessProcessServerUpdateStatus

Update Business-Process server status by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBusinessProcessServerUpdateStatusRequest
*/
func (a *BusinessProcessServerApiService) BusinessProcessServerUpdateStatus(ctx context.Context) ApiBusinessProcessServerUpdateStatusRequest {
	return ApiBusinessProcessServerUpdateStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaBusinessProcessServer
func (a *BusinessProcessServerApiService) BusinessProcessServerUpdateStatusExecute(r ApiBusinessProcessServerUpdateStatusRequest) (*KalturaBusinessProcessServer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaBusinessProcessServer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BusinessProcessServerApiService.BusinessProcessServerUpdateStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/businessprocessnotification_businessprocessserver/action/updateStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
