/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaConfMaps struct for KalturaConfMaps
type KalturaConfMaps struct {
	ChangeDescription *string `json:"changeDescription,omitempty"`
	// Ini file content
	Content *string `json:"content,omitempty"`
	// `readOnly`  Time of the last update
	CreatedAt *int32 `json:"createdAt,omitempty"`
	// `readOnly`  IsEditable - true / false
	IsEditable *bool `json:"isEditable,omitempty"`
	// `insertOnly`  Name of the map
	Name *string `json:"name,omitempty"`
	RawData *string `json:"rawData,omitempty"`
	// Regex that represent the host/s that this map affect
	RelatedHost *string `json:"relatedHost,omitempty"`
	// `insertOnly`
	Remarks *string `json:"remarks,omitempty"`
	// `insertOnly`  Enum Type: `KalturaConfMapsSourceLocation`
	SourceLocation *string `json:"sourceLocation,omitempty"`
	// Enum Type: `KalturaConfMapsStatus`  map status
	Status *int32 `json:"status,omitempty"`
	UserId *string `json:"userId,omitempty"`
	// `readOnly`
	Version *int32 `json:"version,omitempty"`
}

// NewKalturaConfMaps instantiates a new KalturaConfMaps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaConfMaps() *KalturaConfMaps {
	this := KalturaConfMaps{}
	return &this
}

// NewKalturaConfMapsWithDefaults instantiates a new KalturaConfMaps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaConfMapsWithDefaults() *KalturaConfMaps {
	this := KalturaConfMaps{}
	return &this
}

// GetChangeDescription returns the ChangeDescription field value if set, zero value otherwise.
func (o *KalturaConfMaps) GetChangeDescription() string {
	if o == nil || o.ChangeDescription == nil {
		var ret string
		return ret
	}
	return *o.ChangeDescription
}

// GetChangeDescriptionOk returns a tuple with the ChangeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaConfMaps) GetChangeDescriptionOk() (*string, bool) {
	if o == nil || o.ChangeDescription == nil {
		return nil, false
	}
	return o.ChangeDescription, true
}

// HasChangeDescription returns a boolean if a field has been set.
func (o *KalturaConfMaps) HasChangeDescription() bool {
	if o != nil && o.ChangeDescription != nil {
		return true
	}

	return false
}

// SetChangeDescription gets a reference to the given string and assigns it to the ChangeDescription field.
func (o *KalturaConfMaps) SetChangeDescription(v string) {
	o.ChangeDescription = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *KalturaConfMaps) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaConfMaps) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *KalturaConfMaps) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *KalturaConfMaps) SetContent(v string) {
	o.Content = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *KalturaConfMaps) GetCreatedAt() int32 {
	if o == nil || o.CreatedAt == nil {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaConfMaps) GetCreatedAtOk() (*int32, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *KalturaConfMaps) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *KalturaConfMaps) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

// GetIsEditable returns the IsEditable field value if set, zero value otherwise.
func (o *KalturaConfMaps) GetIsEditable() bool {
	if o == nil || o.IsEditable == nil {
		var ret bool
		return ret
	}
	return *o.IsEditable
}

// GetIsEditableOk returns a tuple with the IsEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaConfMaps) GetIsEditableOk() (*bool, bool) {
	if o == nil || o.IsEditable == nil {
		return nil, false
	}
	return o.IsEditable, true
}

// HasIsEditable returns a boolean if a field has been set.
func (o *KalturaConfMaps) HasIsEditable() bool {
	if o != nil && o.IsEditable != nil {
		return true
	}

	return false
}

// SetIsEditable gets a reference to the given bool and assigns it to the IsEditable field.
func (o *KalturaConfMaps) SetIsEditable(v bool) {
	o.IsEditable = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KalturaConfMaps) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaConfMaps) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KalturaConfMaps) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KalturaConfMaps) SetName(v string) {
	o.Name = &v
}

// GetRawData returns the RawData field value if set, zero value otherwise.
func (o *KalturaConfMaps) GetRawData() string {
	if o == nil || o.RawData == nil {
		var ret string
		return ret
	}
	return *o.RawData
}

// GetRawDataOk returns a tuple with the RawData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaConfMaps) GetRawDataOk() (*string, bool) {
	if o == nil || o.RawData == nil {
		return nil, false
	}
	return o.RawData, true
}

// HasRawData returns a boolean if a field has been set.
func (o *KalturaConfMaps) HasRawData() bool {
	if o != nil && o.RawData != nil {
		return true
	}

	return false
}

// SetRawData gets a reference to the given string and assigns it to the RawData field.
func (o *KalturaConfMaps) SetRawData(v string) {
	o.RawData = &v
}

// GetRelatedHost returns the RelatedHost field value if set, zero value otherwise.
func (o *KalturaConfMaps) GetRelatedHost() string {
	if o == nil || o.RelatedHost == nil {
		var ret string
		return ret
	}
	return *o.RelatedHost
}

// GetRelatedHostOk returns a tuple with the RelatedHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaConfMaps) GetRelatedHostOk() (*string, bool) {
	if o == nil || o.RelatedHost == nil {
		return nil, false
	}
	return o.RelatedHost, true
}

// HasRelatedHost returns a boolean if a field has been set.
func (o *KalturaConfMaps) HasRelatedHost() bool {
	if o != nil && o.RelatedHost != nil {
		return true
	}

	return false
}

// SetRelatedHost gets a reference to the given string and assigns it to the RelatedHost field.
func (o *KalturaConfMaps) SetRelatedHost(v string) {
	o.RelatedHost = &v
}

// GetRemarks returns the Remarks field value if set, zero value otherwise.
func (o *KalturaConfMaps) GetRemarks() string {
	if o == nil || o.Remarks == nil {
		var ret string
		return ret
	}
	return *o.Remarks
}

// GetRemarksOk returns a tuple with the Remarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaConfMaps) GetRemarksOk() (*string, bool) {
	if o == nil || o.Remarks == nil {
		return nil, false
	}
	return o.Remarks, true
}

// HasRemarks returns a boolean if a field has been set.
func (o *KalturaConfMaps) HasRemarks() bool {
	if o != nil && o.Remarks != nil {
		return true
	}

	return false
}

// SetRemarks gets a reference to the given string and assigns it to the Remarks field.
func (o *KalturaConfMaps) SetRemarks(v string) {
	o.Remarks = &v
}

// GetSourceLocation returns the SourceLocation field value if set, zero value otherwise.
func (o *KalturaConfMaps) GetSourceLocation() string {
	if o == nil || o.SourceLocation == nil {
		var ret string
		return ret
	}
	return *o.SourceLocation
}

// GetSourceLocationOk returns a tuple with the SourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaConfMaps) GetSourceLocationOk() (*string, bool) {
	if o == nil || o.SourceLocation == nil {
		return nil, false
	}
	return o.SourceLocation, true
}

// HasSourceLocation returns a boolean if a field has been set.
func (o *KalturaConfMaps) HasSourceLocation() bool {
	if o != nil && o.SourceLocation != nil {
		return true
	}

	return false
}

// SetSourceLocation gets a reference to the given string and assigns it to the SourceLocation field.
func (o *KalturaConfMaps) SetSourceLocation(v string) {
	o.SourceLocation = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *KalturaConfMaps) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaConfMaps) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *KalturaConfMaps) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *KalturaConfMaps) SetStatus(v int32) {
	o.Status = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *KalturaConfMaps) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaConfMaps) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *KalturaConfMaps) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *KalturaConfMaps) SetUserId(v string) {
	o.UserId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *KalturaConfMaps) GetVersion() int32 {
	if o == nil || o.Version == nil {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaConfMaps) GetVersionOk() (*int32, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *KalturaConfMaps) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *KalturaConfMaps) SetVersion(v int32) {
	o.Version = &v
}

func (o KalturaConfMaps) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ChangeDescription != nil {
		toSerialize["changeDescription"] = o.ChangeDescription
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.IsEditable != nil {
		toSerialize["isEditable"] = o.IsEditable
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.RawData != nil {
		toSerialize["rawData"] = o.RawData
	}
	if o.RelatedHost != nil {
		toSerialize["relatedHost"] = o.RelatedHost
	}
	if o.Remarks != nil {
		toSerialize["remarks"] = o.Remarks
	}
	if o.SourceLocation != nil {
		toSerialize["sourceLocation"] = o.SourceLocation
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaConfMaps struct {
	value *KalturaConfMaps
	isSet bool
}

func (v NullableKalturaConfMaps) Get() *KalturaConfMaps {
	return v.value
}

func (v *NullableKalturaConfMaps) Set(val *KalturaConfMaps) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaConfMaps) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaConfMaps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaConfMaps(val *KalturaConfMaps) *NullableKalturaConfMaps {
	return &NullableKalturaConfMaps{value: val, isSet: true}
}

func (v NullableKalturaConfMaps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaConfMaps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


