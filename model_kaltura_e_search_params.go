/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaESearchParams `abstract`
type KalturaESearchParams struct {
	ObjectId *string `json:"objectId,omitempty"`
	ObjectStatuses *string `json:"objectStatuses,omitempty"`
	ObjectType *string `json:"objectType,omitempty"`
	OrderBy *KalturaESearchOrderBy `json:"orderBy,omitempty"`
}

// NewKalturaESearchParams instantiates a new KalturaESearchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaESearchParams() *KalturaESearchParams {
	this := KalturaESearchParams{}
	return &this
}

// NewKalturaESearchParamsWithDefaults instantiates a new KalturaESearchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaESearchParamsWithDefaults() *KalturaESearchParams {
	this := KalturaESearchParams{}
	return &this
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *KalturaESearchParams) GetObjectId() string {
	if o == nil || o.ObjectId == nil {
		var ret string
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchParams) GetObjectIdOk() (*string, bool) {
	if o == nil || o.ObjectId == nil {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *KalturaESearchParams) HasObjectId() bool {
	if o != nil && o.ObjectId != nil {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given string and assigns it to the ObjectId field.
func (o *KalturaESearchParams) SetObjectId(v string) {
	o.ObjectId = &v
}

// GetObjectStatuses returns the ObjectStatuses field value if set, zero value otherwise.
func (o *KalturaESearchParams) GetObjectStatuses() string {
	if o == nil || o.ObjectStatuses == nil {
		var ret string
		return ret
	}
	return *o.ObjectStatuses
}

// GetObjectStatusesOk returns a tuple with the ObjectStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchParams) GetObjectStatusesOk() (*string, bool) {
	if o == nil || o.ObjectStatuses == nil {
		return nil, false
	}
	return o.ObjectStatuses, true
}

// HasObjectStatuses returns a boolean if a field has been set.
func (o *KalturaESearchParams) HasObjectStatuses() bool {
	if o != nil && o.ObjectStatuses != nil {
		return true
	}

	return false
}

// SetObjectStatuses gets a reference to the given string and assigns it to the ObjectStatuses field.
func (o *KalturaESearchParams) SetObjectStatuses(v string) {
	o.ObjectStatuses = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *KalturaESearchParams) GetObjectType() string {
	if o == nil || o.ObjectType == nil {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchParams) GetObjectTypeOk() (*string, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *KalturaESearchParams) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *KalturaESearchParams) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *KalturaESearchParams) GetOrderBy() KalturaESearchOrderBy {
	if o == nil || o.OrderBy == nil {
		var ret KalturaESearchOrderBy
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchParams) GetOrderByOk() (*KalturaESearchOrderBy, bool) {
	if o == nil || o.OrderBy == nil {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *KalturaESearchParams) HasOrderBy() bool {
	if o != nil && o.OrderBy != nil {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given KalturaESearchOrderBy and assigns it to the OrderBy field.
func (o *KalturaESearchParams) SetOrderBy(v KalturaESearchOrderBy) {
	o.OrderBy = &v
}

func (o KalturaESearchParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectId != nil {
		toSerialize["objectId"] = o.ObjectId
	}
	if o.ObjectStatuses != nil {
		toSerialize["objectStatuses"] = o.ObjectStatuses
	}
	if o.ObjectType != nil {
		toSerialize["objectType"] = o.ObjectType
	}
	if o.OrderBy != nil {
		toSerialize["orderBy"] = o.OrderBy
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaESearchParams struct {
	value *KalturaESearchParams
	isSet bool
}

func (v NullableKalturaESearchParams) Get() *KalturaESearchParams {
	return v.value
}

func (v *NullableKalturaESearchParams) Set(val *KalturaESearchParams) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaESearchParams) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaESearchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaESearchParams(val *KalturaESearchParams) *NullableKalturaESearchParams {
	return &NullableKalturaESearchParams{value: val, isSet: true}
}

func (v NullableKalturaESearchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaESearchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


