/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// VendorIntegrationApiService VendorIntegrationApi service
type VendorIntegrationApiService service

type ApiVendorIntegrationAddRequest struct {
	ctx context.Context
	ApiService *VendorIntegrationApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VendorIntegrationAddRequest
}

func (r ApiVendorIntegrationAddRequest) Ks(ks string) ApiVendorIntegrationAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVendorIntegrationAddRequest) Format(format int32) ApiVendorIntegrationAddRequest {
	r.format = &format
	return r
}

func (r ApiVendorIntegrationAddRequest) ClientTag(clientTag string) ApiVendorIntegrationAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVendorIntegrationAddRequest) PartnerId(partnerId int32) ApiVendorIntegrationAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVendorIntegrationAddRequest) Body(body VendorIntegrationAddRequest) ApiVendorIntegrationAddRequest {
	r.body = &body
	return r
}

func (r ApiVendorIntegrationAddRequest) Execute() (*KalturaIntegrationSetting, *http.Response, error) {
	return r.ApiService.VendorIntegrationAddExecute(r)
}

/*
VendorIntegrationAdd Method for VendorIntegrationAdd

Add new integration setting object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVendorIntegrationAddRequest
*/
func (a *VendorIntegrationApiService) VendorIntegrationAdd(ctx context.Context) ApiVendorIntegrationAddRequest {
	return ApiVendorIntegrationAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaIntegrationSetting
func (a *VendorIntegrationApiService) VendorIntegrationAddExecute(r ApiVendorIntegrationAddRequest) (*KalturaIntegrationSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaIntegrationSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VendorIntegrationApiService.VendorIntegrationAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/vendor_vendorintegration/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVendorIntegrationDeleteRequest struct {
	ctx context.Context
	ApiService *VendorIntegrationApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VendorIntegrationDeleteRequest
}

func (r ApiVendorIntegrationDeleteRequest) Ks(ks string) ApiVendorIntegrationDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVendorIntegrationDeleteRequest) Format(format int32) ApiVendorIntegrationDeleteRequest {
	r.format = &format
	return r
}

func (r ApiVendorIntegrationDeleteRequest) ClientTag(clientTag string) ApiVendorIntegrationDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVendorIntegrationDeleteRequest) PartnerId(partnerId int32) ApiVendorIntegrationDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVendorIntegrationDeleteRequest) Body(body VendorIntegrationDeleteRequest) ApiVendorIntegrationDeleteRequest {
	r.body = &body
	return r
}

func (r ApiVendorIntegrationDeleteRequest) Execute() (*KalturaIntegrationSetting, *http.Response, error) {
	return r.ApiService.VendorIntegrationDeleteExecute(r)
}

/*
VendorIntegrationDelete Method for VendorIntegrationDelete

Delete integration object by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVendorIntegrationDeleteRequest
*/
func (a *VendorIntegrationApiService) VendorIntegrationDelete(ctx context.Context) ApiVendorIntegrationDeleteRequest {
	return ApiVendorIntegrationDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaIntegrationSetting
func (a *VendorIntegrationApiService) VendorIntegrationDeleteExecute(r ApiVendorIntegrationDeleteRequest) (*KalturaIntegrationSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaIntegrationSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VendorIntegrationApiService.VendorIntegrationDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/vendor_vendorintegration/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVendorIntegrationGetRequest struct {
	ctx context.Context
	ApiService *VendorIntegrationApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VendorIntegrationDeleteRequest
}

func (r ApiVendorIntegrationGetRequest) Ks(ks string) ApiVendorIntegrationGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVendorIntegrationGetRequest) Format(format int32) ApiVendorIntegrationGetRequest {
	r.format = &format
	return r
}

func (r ApiVendorIntegrationGetRequest) ClientTag(clientTag string) ApiVendorIntegrationGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVendorIntegrationGetRequest) PartnerId(partnerId int32) ApiVendorIntegrationGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVendorIntegrationGetRequest) Body(body VendorIntegrationDeleteRequest) ApiVendorIntegrationGetRequest {
	r.body = &body
	return r
}

func (r ApiVendorIntegrationGetRequest) Execute() (*KalturaIntegrationSetting, *http.Response, error) {
	return r.ApiService.VendorIntegrationGetExecute(r)
}

/*
VendorIntegrationGet Method for VendorIntegrationGet

Retrieve integration setting object by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVendorIntegrationGetRequest
*/
func (a *VendorIntegrationApiService) VendorIntegrationGet(ctx context.Context) ApiVendorIntegrationGetRequest {
	return ApiVendorIntegrationGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaIntegrationSetting
func (a *VendorIntegrationApiService) VendorIntegrationGetExecute(r ApiVendorIntegrationGetRequest) (*KalturaIntegrationSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaIntegrationSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VendorIntegrationApiService.VendorIntegrationGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/vendor_vendorintegration/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVendorIntegrationUpdateRequest struct {
	ctx context.Context
	ApiService *VendorIntegrationApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VendorIntegrationUpdateRequest
}

func (r ApiVendorIntegrationUpdateRequest) Ks(ks string) ApiVendorIntegrationUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVendorIntegrationUpdateRequest) Format(format int32) ApiVendorIntegrationUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVendorIntegrationUpdateRequest) ClientTag(clientTag string) ApiVendorIntegrationUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVendorIntegrationUpdateRequest) PartnerId(partnerId int32) ApiVendorIntegrationUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVendorIntegrationUpdateRequest) Body(body VendorIntegrationUpdateRequest) ApiVendorIntegrationUpdateRequest {
	r.body = &body
	return r
}

func (r ApiVendorIntegrationUpdateRequest) Execute() (*KalturaIntegrationSetting, *http.Response, error) {
	return r.ApiService.VendorIntegrationUpdateExecute(r)
}

/*
VendorIntegrationUpdate Method for VendorIntegrationUpdate

Update an existing vedor catalog item object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVendorIntegrationUpdateRequest
*/
func (a *VendorIntegrationApiService) VendorIntegrationUpdate(ctx context.Context) ApiVendorIntegrationUpdateRequest {
	return ApiVendorIntegrationUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaIntegrationSetting
func (a *VendorIntegrationApiService) VendorIntegrationUpdateExecute(r ApiVendorIntegrationUpdateRequest) (*KalturaIntegrationSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaIntegrationSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VendorIntegrationApiService.VendorIntegrationUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/vendor_vendorintegration/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVendorIntegrationUpdateStatusRequest struct {
	ctx context.Context
	ApiService *VendorIntegrationApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VendorIntegrationUpdateStatusRequest
}

func (r ApiVendorIntegrationUpdateStatusRequest) Ks(ks string) ApiVendorIntegrationUpdateStatusRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVendorIntegrationUpdateStatusRequest) Format(format int32) ApiVendorIntegrationUpdateStatusRequest {
	r.format = &format
	return r
}

func (r ApiVendorIntegrationUpdateStatusRequest) ClientTag(clientTag string) ApiVendorIntegrationUpdateStatusRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVendorIntegrationUpdateStatusRequest) PartnerId(partnerId int32) ApiVendorIntegrationUpdateStatusRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVendorIntegrationUpdateStatusRequest) Body(body VendorIntegrationUpdateStatusRequest) ApiVendorIntegrationUpdateStatusRequest {
	r.body = &body
	return r
}

func (r ApiVendorIntegrationUpdateStatusRequest) Execute() (*KalturaIntegrationSetting, *http.Response, error) {
	return r.ApiService.VendorIntegrationUpdateStatusExecute(r)
}

/*
VendorIntegrationUpdateStatus Method for VendorIntegrationUpdateStatus

Update vendor catalog item status by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVendorIntegrationUpdateStatusRequest
*/
func (a *VendorIntegrationApiService) VendorIntegrationUpdateStatus(ctx context.Context) ApiVendorIntegrationUpdateStatusRequest {
	return ApiVendorIntegrationUpdateStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaIntegrationSetting
func (a *VendorIntegrationApiService) VendorIntegrationUpdateStatusExecute(r ApiVendorIntegrationUpdateStatusRequest) (*KalturaIntegrationSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaIntegrationSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VendorIntegrationApiService.VendorIntegrationUpdateStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/vendor_vendorintegration/action/updateStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
