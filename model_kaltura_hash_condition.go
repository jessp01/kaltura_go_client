/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaHashCondition struct for KalturaHashCondition
type KalturaHashCondition struct {
	KalturaCondition
}

// NewKalturaHashCondition instantiates a new KalturaHashCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaHashCondition() *KalturaHashCondition {
	this := KalturaHashCondition{}
	return &this
}

// NewKalturaHashConditionWithDefaults instantiates a new KalturaHashCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaHashConditionWithDefaults() *KalturaHashCondition {
	this := KalturaHashCondition{}
	return &this
}

func (o KalturaHashCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedKalturaCondition, errKalturaCondition := json.Marshal(o.KalturaCondition)
	if errKalturaCondition != nil {
		return []byte{}, errKalturaCondition
	}
	errKalturaCondition = json.Unmarshal([]byte(serializedKalturaCondition), &toSerialize)
	if errKalturaCondition != nil {
		return []byte{}, errKalturaCondition
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaHashCondition struct {
	value *KalturaHashCondition
	isSet bool
}

func (v NullableKalturaHashCondition) Get() *KalturaHashCondition {
	return v.value
}

func (v *NullableKalturaHashCondition) Set(val *KalturaHashCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaHashCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaHashCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaHashCondition(val *KalturaHashCondition) *NullableKalturaHashCondition {
	return &NullableKalturaHashCondition{value: val, isSet: true}
}

func (v NullableKalturaHashCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaHashCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


