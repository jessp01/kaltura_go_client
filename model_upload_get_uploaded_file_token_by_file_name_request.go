/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UploadGetUploadedFileTokenByFileNameRequest struct for UploadGetUploadedFileTokenByFileNameRequest
type UploadGetUploadedFileTokenByFileNameRequest struct {
	FileName string `json:"fileName"`
}

// NewUploadGetUploadedFileTokenByFileNameRequest instantiates a new UploadGetUploadedFileTokenByFileNameRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadGetUploadedFileTokenByFileNameRequest(fileName string) *UploadGetUploadedFileTokenByFileNameRequest {
	this := UploadGetUploadedFileTokenByFileNameRequest{}
	this.FileName = fileName
	return &this
}

// NewUploadGetUploadedFileTokenByFileNameRequestWithDefaults instantiates a new UploadGetUploadedFileTokenByFileNameRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadGetUploadedFileTokenByFileNameRequestWithDefaults() *UploadGetUploadedFileTokenByFileNameRequest {
	this := UploadGetUploadedFileTokenByFileNameRequest{}
	return &this
}

// GetFileName returns the FileName field value
func (o *UploadGetUploadedFileTokenByFileNameRequest) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *UploadGetUploadedFileTokenByFileNameRequest) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *UploadGetUploadedFileTokenByFileNameRequest) SetFileName(v string) {
	o.FileName = v
}

func (o UploadGetUploadedFileTokenByFileNameRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["fileName"] = o.FileName
	}
	return json.Marshal(toSerialize)
}

type NullableUploadGetUploadedFileTokenByFileNameRequest struct {
	value *UploadGetUploadedFileTokenByFileNameRequest
	isSet bool
}

func (v NullableUploadGetUploadedFileTokenByFileNameRequest) Get() *UploadGetUploadedFileTokenByFileNameRequest {
	return v.value
}

func (v *NullableUploadGetUploadedFileTokenByFileNameRequest) Set(val *UploadGetUploadedFileTokenByFileNameRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadGetUploadedFileTokenByFileNameRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadGetUploadedFileTokenByFileNameRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadGetUploadedFileTokenByFileNameRequest(val *UploadGetUploadedFileTokenByFileNameRequest) *NullableUploadGetUploadedFileTokenByFileNameRequest {
	return &NullableUploadGetUploadedFileTokenByFileNameRequest{value: val, isSet: true}
}

func (v NullableUploadGetUploadedFileTokenByFileNameRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadGetUploadedFileTokenByFileNameRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


