/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserScoreUpdateRequest struct for UserScoreUpdateRequest
type UserScoreUpdateRequest struct {
	GameObjectId string `json:"gameObjectId"`
	GameObjectType string `json:"gameObjectType"`
	Score int32 `json:"score"`
	UserId string `json:"userId"`
}

// NewUserScoreUpdateRequest instantiates a new UserScoreUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserScoreUpdateRequest(gameObjectId string, gameObjectType string, score int32, userId string) *UserScoreUpdateRequest {
	this := UserScoreUpdateRequest{}
	this.GameObjectId = gameObjectId
	this.GameObjectType = gameObjectType
	this.Score = score
	this.UserId = userId
	return &this
}

// NewUserScoreUpdateRequestWithDefaults instantiates a new UserScoreUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserScoreUpdateRequestWithDefaults() *UserScoreUpdateRequest {
	this := UserScoreUpdateRequest{}
	return &this
}

// GetGameObjectId returns the GameObjectId field value
func (o *UserScoreUpdateRequest) GetGameObjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GameObjectId
}

// GetGameObjectIdOk returns a tuple with the GameObjectId field value
// and a boolean to check if the value has been set.
func (o *UserScoreUpdateRequest) GetGameObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GameObjectId, true
}

// SetGameObjectId sets field value
func (o *UserScoreUpdateRequest) SetGameObjectId(v string) {
	o.GameObjectId = v
}

// GetGameObjectType returns the GameObjectType field value
func (o *UserScoreUpdateRequest) GetGameObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GameObjectType
}

// GetGameObjectTypeOk returns a tuple with the GameObjectType field value
// and a boolean to check if the value has been set.
func (o *UserScoreUpdateRequest) GetGameObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GameObjectType, true
}

// SetGameObjectType sets field value
func (o *UserScoreUpdateRequest) SetGameObjectType(v string) {
	o.GameObjectType = v
}

// GetScore returns the Score field value
func (o *UserScoreUpdateRequest) GetScore() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *UserScoreUpdateRequest) GetScoreOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *UserScoreUpdateRequest) SetScore(v int32) {
	o.Score = v
}

// GetUserId returns the UserId field value
func (o *UserScoreUpdateRequest) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *UserScoreUpdateRequest) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *UserScoreUpdateRequest) SetUserId(v string) {
	o.UserId = v
}

func (o UserScoreUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["gameObjectId"] = o.GameObjectId
	}
	if true {
		toSerialize["gameObjectType"] = o.GameObjectType
	}
	if true {
		toSerialize["score"] = o.Score
	}
	if true {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableUserScoreUpdateRequest struct {
	value *UserScoreUpdateRequest
	isSet bool
}

func (v NullableUserScoreUpdateRequest) Get() *UserScoreUpdateRequest {
	return v.value
}

func (v *NullableUserScoreUpdateRequest) Set(val *UserScoreUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserScoreUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserScoreUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserScoreUpdateRequest(val *UserScoreUpdateRequest) *NullableUserScoreUpdateRequest {
	return &NullableUserScoreUpdateRequest{value: val, isSet: true}
}

func (v NullableUserScoreUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserScoreUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


