/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaAccessControlScope struct for KalturaAccessControlScope
type KalturaAccessControlScope struct {
	Contexts []KalturaAccessControlContextTypeHolder `json:"contexts,omitempty"`
	Hashes []KalturaKeyValue `json:"hashes,omitempty"`
	// IP to be used to test geographic location conditions.
	Ip *string `json:"ip,omitempty"`
	// Kaltura session to be used to test session and user conditions.
	Ks *string `json:"ks,omitempty"`
	ObjectType *string `json:"objectType,omitempty"`
	// URL to be used to test domain conditions.
	Referrer *string `json:"referrer,omitempty"`
	// Unix timestamp (In seconds) to be used to test entry scheduling, keep null to use now.
	Time *int32 `json:"time,omitempty"`
	// Browser or client application to be used to test agent conditions.
	UserAgent *string `json:"userAgent,omitempty"`
}

// NewKalturaAccessControlScope instantiates a new KalturaAccessControlScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaAccessControlScope() *KalturaAccessControlScope {
	this := KalturaAccessControlScope{}
	return &this
}

// NewKalturaAccessControlScopeWithDefaults instantiates a new KalturaAccessControlScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaAccessControlScopeWithDefaults() *KalturaAccessControlScope {
	this := KalturaAccessControlScope{}
	return &this
}

// GetContexts returns the Contexts field value if set, zero value otherwise.
func (o *KalturaAccessControlScope) GetContexts() []KalturaAccessControlContextTypeHolder {
	if o == nil || o.Contexts == nil {
		var ret []KalturaAccessControlContextTypeHolder
		return ret
	}
	return o.Contexts
}

// GetContextsOk returns a tuple with the Contexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaAccessControlScope) GetContextsOk() ([]KalturaAccessControlContextTypeHolder, bool) {
	if o == nil || o.Contexts == nil {
		return nil, false
	}
	return o.Contexts, true
}

// HasContexts returns a boolean if a field has been set.
func (o *KalturaAccessControlScope) HasContexts() bool {
	if o != nil && o.Contexts != nil {
		return true
	}

	return false
}

// SetContexts gets a reference to the given []KalturaAccessControlContextTypeHolder and assigns it to the Contexts field.
func (o *KalturaAccessControlScope) SetContexts(v []KalturaAccessControlContextTypeHolder) {
	o.Contexts = v
}

// GetHashes returns the Hashes field value if set, zero value otherwise.
func (o *KalturaAccessControlScope) GetHashes() []KalturaKeyValue {
	if o == nil || o.Hashes == nil {
		var ret []KalturaKeyValue
		return ret
	}
	return o.Hashes
}

// GetHashesOk returns a tuple with the Hashes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaAccessControlScope) GetHashesOk() ([]KalturaKeyValue, bool) {
	if o == nil || o.Hashes == nil {
		return nil, false
	}
	return o.Hashes, true
}

// HasHashes returns a boolean if a field has been set.
func (o *KalturaAccessControlScope) HasHashes() bool {
	if o != nil && o.Hashes != nil {
		return true
	}

	return false
}

// SetHashes gets a reference to the given []KalturaKeyValue and assigns it to the Hashes field.
func (o *KalturaAccessControlScope) SetHashes(v []KalturaKeyValue) {
	o.Hashes = v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *KalturaAccessControlScope) GetIp() string {
	if o == nil || o.Ip == nil {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaAccessControlScope) GetIpOk() (*string, bool) {
	if o == nil || o.Ip == nil {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *KalturaAccessControlScope) HasIp() bool {
	if o != nil && o.Ip != nil {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *KalturaAccessControlScope) SetIp(v string) {
	o.Ip = &v
}

// GetKs returns the Ks field value if set, zero value otherwise.
func (o *KalturaAccessControlScope) GetKs() string {
	if o == nil || o.Ks == nil {
		var ret string
		return ret
	}
	return *o.Ks
}

// GetKsOk returns a tuple with the Ks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaAccessControlScope) GetKsOk() (*string, bool) {
	if o == nil || o.Ks == nil {
		return nil, false
	}
	return o.Ks, true
}

// HasKs returns a boolean if a field has been set.
func (o *KalturaAccessControlScope) HasKs() bool {
	if o != nil && o.Ks != nil {
		return true
	}

	return false
}

// SetKs gets a reference to the given string and assigns it to the Ks field.
func (o *KalturaAccessControlScope) SetKs(v string) {
	o.Ks = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *KalturaAccessControlScope) GetObjectType() string {
	if o == nil || o.ObjectType == nil {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaAccessControlScope) GetObjectTypeOk() (*string, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *KalturaAccessControlScope) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *KalturaAccessControlScope) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetReferrer returns the Referrer field value if set, zero value otherwise.
func (o *KalturaAccessControlScope) GetReferrer() string {
	if o == nil || o.Referrer == nil {
		var ret string
		return ret
	}
	return *o.Referrer
}

// GetReferrerOk returns a tuple with the Referrer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaAccessControlScope) GetReferrerOk() (*string, bool) {
	if o == nil || o.Referrer == nil {
		return nil, false
	}
	return o.Referrer, true
}

// HasReferrer returns a boolean if a field has been set.
func (o *KalturaAccessControlScope) HasReferrer() bool {
	if o != nil && o.Referrer != nil {
		return true
	}

	return false
}

// SetReferrer gets a reference to the given string and assigns it to the Referrer field.
func (o *KalturaAccessControlScope) SetReferrer(v string) {
	o.Referrer = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *KalturaAccessControlScope) GetTime() int32 {
	if o == nil || o.Time == nil {
		var ret int32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaAccessControlScope) GetTimeOk() (*int32, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *KalturaAccessControlScope) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given int32 and assigns it to the Time field.
func (o *KalturaAccessControlScope) SetTime(v int32) {
	o.Time = &v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *KalturaAccessControlScope) GetUserAgent() string {
	if o == nil || o.UserAgent == nil {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaAccessControlScope) GetUserAgentOk() (*string, bool) {
	if o == nil || o.UserAgent == nil {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *KalturaAccessControlScope) HasUserAgent() bool {
	if o != nil && o.UserAgent != nil {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *KalturaAccessControlScope) SetUserAgent(v string) {
	o.UserAgent = &v
}

func (o KalturaAccessControlScope) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Contexts != nil {
		toSerialize["contexts"] = o.Contexts
	}
	if o.Hashes != nil {
		toSerialize["hashes"] = o.Hashes
	}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	if o.Ks != nil {
		toSerialize["ks"] = o.Ks
	}
	if o.ObjectType != nil {
		toSerialize["objectType"] = o.ObjectType
	}
	if o.Referrer != nil {
		toSerialize["referrer"] = o.Referrer
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.UserAgent != nil {
		toSerialize["userAgent"] = o.UserAgent
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaAccessControlScope struct {
	value *KalturaAccessControlScope
	isSet bool
}

func (v NullableKalturaAccessControlScope) Get() *KalturaAccessControlScope {
	return v.value
}

func (v *NullableKalturaAccessControlScope) Set(val *KalturaAccessControlScope) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaAccessControlScope) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaAccessControlScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaAccessControlScope(val *KalturaAccessControlScope) *NullableKalturaAccessControlScope {
	return &NullableKalturaAccessControlScope{value: val, isSet: true}
}

func (v NullableKalturaAccessControlScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaAccessControlScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


