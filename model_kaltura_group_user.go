/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaGroupUser struct for KalturaGroupUser
type KalturaGroupUser struct {
	// `readOnly`  Creation date as Unix timestamp (In seconds)
	CreatedAt *int32 `json:"createdAt,omitempty"`
	// `insertOnly`  Enum Type: `KalturaGroupUserCreationMode`
	CreationMode *int32 `json:"creationMode,omitempty"`
	// `insertOnly`
	GroupId *string `json:"groupId,omitempty"`
	// `readOnly`
	Id *string `json:"id,omitempty"`
	// `readOnly`
	PartnerId *int32 `json:"partnerId,omitempty"`
	// `readOnly`  Enum Type: `KalturaGroupUserStatus`
	Status *int32 `json:"status,omitempty"`
	// `readOnly`  Last update date as Unix timestamp (In seconds)
	UpdatedAt *int32 `json:"updatedAt,omitempty"`
	// `insertOnly`
	UserId *string `json:"userId,omitempty"`
	// Enum Type: `KalturaGroupUserRole`
	UserRole *int32 `json:"userRole,omitempty"`
}

// NewKalturaGroupUser instantiates a new KalturaGroupUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaGroupUser() *KalturaGroupUser {
	this := KalturaGroupUser{}
	return &this
}

// NewKalturaGroupUserWithDefaults instantiates a new KalturaGroupUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaGroupUserWithDefaults() *KalturaGroupUser {
	this := KalturaGroupUser{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *KalturaGroupUser) GetCreatedAt() int32 {
	if o == nil || o.CreatedAt == nil {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaGroupUser) GetCreatedAtOk() (*int32, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *KalturaGroupUser) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *KalturaGroupUser) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

// GetCreationMode returns the CreationMode field value if set, zero value otherwise.
func (o *KalturaGroupUser) GetCreationMode() int32 {
	if o == nil || o.CreationMode == nil {
		var ret int32
		return ret
	}
	return *o.CreationMode
}

// GetCreationModeOk returns a tuple with the CreationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaGroupUser) GetCreationModeOk() (*int32, bool) {
	if o == nil || o.CreationMode == nil {
		return nil, false
	}
	return o.CreationMode, true
}

// HasCreationMode returns a boolean if a field has been set.
func (o *KalturaGroupUser) HasCreationMode() bool {
	if o != nil && o.CreationMode != nil {
		return true
	}

	return false
}

// SetCreationMode gets a reference to the given int32 and assigns it to the CreationMode field.
func (o *KalturaGroupUser) SetCreationMode(v int32) {
	o.CreationMode = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *KalturaGroupUser) GetGroupId() string {
	if o == nil || o.GroupId == nil {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaGroupUser) GetGroupIdOk() (*string, bool) {
	if o == nil || o.GroupId == nil {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *KalturaGroupUser) HasGroupId() bool {
	if o != nil && o.GroupId != nil {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *KalturaGroupUser) SetGroupId(v string) {
	o.GroupId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KalturaGroupUser) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaGroupUser) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KalturaGroupUser) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KalturaGroupUser) SetId(v string) {
	o.Id = &v
}

// GetPartnerId returns the PartnerId field value if set, zero value otherwise.
func (o *KalturaGroupUser) GetPartnerId() int32 {
	if o == nil || o.PartnerId == nil {
		var ret int32
		return ret
	}
	return *o.PartnerId
}

// GetPartnerIdOk returns a tuple with the PartnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaGroupUser) GetPartnerIdOk() (*int32, bool) {
	if o == nil || o.PartnerId == nil {
		return nil, false
	}
	return o.PartnerId, true
}

// HasPartnerId returns a boolean if a field has been set.
func (o *KalturaGroupUser) HasPartnerId() bool {
	if o != nil && o.PartnerId != nil {
		return true
	}

	return false
}

// SetPartnerId gets a reference to the given int32 and assigns it to the PartnerId field.
func (o *KalturaGroupUser) SetPartnerId(v int32) {
	o.PartnerId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *KalturaGroupUser) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaGroupUser) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *KalturaGroupUser) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *KalturaGroupUser) SetStatus(v int32) {
	o.Status = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *KalturaGroupUser) GetUpdatedAt() int32 {
	if o == nil || o.UpdatedAt == nil {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaGroupUser) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *KalturaGroupUser) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *KalturaGroupUser) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *KalturaGroupUser) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaGroupUser) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *KalturaGroupUser) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *KalturaGroupUser) SetUserId(v string) {
	o.UserId = &v
}

// GetUserRole returns the UserRole field value if set, zero value otherwise.
func (o *KalturaGroupUser) GetUserRole() int32 {
	if o == nil || o.UserRole == nil {
		var ret int32
		return ret
	}
	return *o.UserRole
}

// GetUserRoleOk returns a tuple with the UserRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaGroupUser) GetUserRoleOk() (*int32, bool) {
	if o == nil || o.UserRole == nil {
		return nil, false
	}
	return o.UserRole, true
}

// HasUserRole returns a boolean if a field has been set.
func (o *KalturaGroupUser) HasUserRole() bool {
	if o != nil && o.UserRole != nil {
		return true
	}

	return false
}

// SetUserRole gets a reference to the given int32 and assigns it to the UserRole field.
func (o *KalturaGroupUser) SetUserRole(v int32) {
	o.UserRole = &v
}

func (o KalturaGroupUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.CreationMode != nil {
		toSerialize["creationMode"] = o.CreationMode
	}
	if o.GroupId != nil {
		toSerialize["groupId"] = o.GroupId
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.PartnerId != nil {
		toSerialize["partnerId"] = o.PartnerId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.UserRole != nil {
		toSerialize["userRole"] = o.UserRole
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaGroupUser struct {
	value *KalturaGroupUser
	isSet bool
}

func (v NullableKalturaGroupUser) Get() *KalturaGroupUser {
	return v.value
}

func (v *NullableKalturaGroupUser) Set(val *KalturaGroupUser) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaGroupUser) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaGroupUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaGroupUser(val *KalturaGroupUser) *NullableKalturaGroupUser {
	return &NullableKalturaGroupUser{value: val, isSet: true}
}

func (v NullableKalturaGroupUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaGroupUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


