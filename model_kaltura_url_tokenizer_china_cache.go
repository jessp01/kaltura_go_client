/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaUrlTokenizerChinaCache struct for KalturaUrlTokenizerChinaCache
type KalturaUrlTokenizerChinaCache struct {
	KalturaUrlTokenizer
}

// NewKalturaUrlTokenizerChinaCache instantiates a new KalturaUrlTokenizerChinaCache object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaUrlTokenizerChinaCache() *KalturaUrlTokenizerChinaCache {
	this := KalturaUrlTokenizerChinaCache{}
	return &this
}

// NewKalturaUrlTokenizerChinaCacheWithDefaults instantiates a new KalturaUrlTokenizerChinaCache object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaUrlTokenizerChinaCacheWithDefaults() *KalturaUrlTokenizerChinaCache {
	this := KalturaUrlTokenizerChinaCache{}
	return &this
}

func (o KalturaUrlTokenizerChinaCache) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedKalturaUrlTokenizer, errKalturaUrlTokenizer := json.Marshal(o.KalturaUrlTokenizer)
	if errKalturaUrlTokenizer != nil {
		return []byte{}, errKalturaUrlTokenizer
	}
	errKalturaUrlTokenizer = json.Unmarshal([]byte(serializedKalturaUrlTokenizer), &toSerialize)
	if errKalturaUrlTokenizer != nil {
		return []byte{}, errKalturaUrlTokenizer
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaUrlTokenizerChinaCache struct {
	value *KalturaUrlTokenizerChinaCache
	isSet bool
}

func (v NullableKalturaUrlTokenizerChinaCache) Get() *KalturaUrlTokenizerChinaCache {
	return v.value
}

func (v *NullableKalturaUrlTokenizerChinaCache) Set(val *KalturaUrlTokenizerChinaCache) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaUrlTokenizerChinaCache) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaUrlTokenizerChinaCache) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaUrlTokenizerChinaCache(val *KalturaUrlTokenizerChinaCache) *NullableKalturaUrlTokenizerChinaCache {
	return &NullableKalturaUrlTokenizerChinaCache{value: val, isSet: true}
}

func (v NullableKalturaUrlTokenizerChinaCache) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaUrlTokenizerChinaCache) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


