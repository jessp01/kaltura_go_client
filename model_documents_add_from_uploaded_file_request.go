/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DocumentsAddFromUploadedFileRequest struct for DocumentsAddFromUploadedFileRequest
type DocumentsAddFromUploadedFileRequest struct {
	DocumentEntry KalturaDocumentEntry `json:"documentEntry"`
	UploadTokenId string `json:"uploadTokenId"`
}

// NewDocumentsAddFromUploadedFileRequest instantiates a new DocumentsAddFromUploadedFileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentsAddFromUploadedFileRequest(documentEntry KalturaDocumentEntry, uploadTokenId string) *DocumentsAddFromUploadedFileRequest {
	this := DocumentsAddFromUploadedFileRequest{}
	this.DocumentEntry = documentEntry
	this.UploadTokenId = uploadTokenId
	return &this
}

// NewDocumentsAddFromUploadedFileRequestWithDefaults instantiates a new DocumentsAddFromUploadedFileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentsAddFromUploadedFileRequestWithDefaults() *DocumentsAddFromUploadedFileRequest {
	this := DocumentsAddFromUploadedFileRequest{}
	return &this
}

// GetDocumentEntry returns the DocumentEntry field value
func (o *DocumentsAddFromUploadedFileRequest) GetDocumentEntry() KalturaDocumentEntry {
	if o == nil {
		var ret KalturaDocumentEntry
		return ret
	}

	return o.DocumentEntry
}

// GetDocumentEntryOk returns a tuple with the DocumentEntry field value
// and a boolean to check if the value has been set.
func (o *DocumentsAddFromUploadedFileRequest) GetDocumentEntryOk() (*KalturaDocumentEntry, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentEntry, true
}

// SetDocumentEntry sets field value
func (o *DocumentsAddFromUploadedFileRequest) SetDocumentEntry(v KalturaDocumentEntry) {
	o.DocumentEntry = v
}

// GetUploadTokenId returns the UploadTokenId field value
func (o *DocumentsAddFromUploadedFileRequest) GetUploadTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadTokenId
}

// GetUploadTokenIdOk returns a tuple with the UploadTokenId field value
// and a boolean to check if the value has been set.
func (o *DocumentsAddFromUploadedFileRequest) GetUploadTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadTokenId, true
}

// SetUploadTokenId sets field value
func (o *DocumentsAddFromUploadedFileRequest) SetUploadTokenId(v string) {
	o.UploadTokenId = v
}

func (o DocumentsAddFromUploadedFileRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["documentEntry"] = o.DocumentEntry
	}
	if true {
		toSerialize["uploadTokenId"] = o.UploadTokenId
	}
	return json.Marshal(toSerialize)
}

type NullableDocumentsAddFromUploadedFileRequest struct {
	value *DocumentsAddFromUploadedFileRequest
	isSet bool
}

func (v NullableDocumentsAddFromUploadedFileRequest) Get() *DocumentsAddFromUploadedFileRequest {
	return v.value
}

func (v *NullableDocumentsAddFromUploadedFileRequest) Set(val *DocumentsAddFromUploadedFileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentsAddFromUploadedFileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentsAddFromUploadedFileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentsAddFromUploadedFileRequest(val *DocumentsAddFromUploadedFileRequest) *NullableDocumentsAddFromUploadedFileRequest {
	return &NullableDocumentsAddFromUploadedFileRequest{value: val, isSet: true}
}

func (v NullableDocumentsAddFromUploadedFileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentsAddFromUploadedFileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


