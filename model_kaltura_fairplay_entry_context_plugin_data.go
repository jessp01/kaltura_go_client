/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaFairplayEntryContextPluginData struct for KalturaFairplayEntryContextPluginData
type KalturaFairplayEntryContextPluginData struct {
	KalturaPluginData
}

// NewKalturaFairplayEntryContextPluginData instantiates a new KalturaFairplayEntryContextPluginData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaFairplayEntryContextPluginData() *KalturaFairplayEntryContextPluginData {
	this := KalturaFairplayEntryContextPluginData{}
	return &this
}

// NewKalturaFairplayEntryContextPluginDataWithDefaults instantiates a new KalturaFairplayEntryContextPluginData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaFairplayEntryContextPluginDataWithDefaults() *KalturaFairplayEntryContextPluginData {
	this := KalturaFairplayEntryContextPluginData{}
	return &this
}

func (o KalturaFairplayEntryContextPluginData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedKalturaPluginData, errKalturaPluginData := json.Marshal(o.KalturaPluginData)
	if errKalturaPluginData != nil {
		return []byte{}, errKalturaPluginData
	}
	errKalturaPluginData = json.Unmarshal([]byte(serializedKalturaPluginData), &toSerialize)
	if errKalturaPluginData != nil {
		return []byte{}, errKalturaPluginData
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaFairplayEntryContextPluginData struct {
	value *KalturaFairplayEntryContextPluginData
	isSet bool
}

func (v NullableKalturaFairplayEntryContextPluginData) Get() *KalturaFairplayEntryContextPluginData {
	return v.value
}

func (v *NullableKalturaFairplayEntryContextPluginData) Set(val *KalturaFairplayEntryContextPluginData) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaFairplayEntryContextPluginData) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaFairplayEntryContextPluginData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaFairplayEntryContextPluginData(val *KalturaFairplayEntryContextPluginData) *NullableKalturaFairplayEntryContextPluginData {
	return &NullableKalturaFairplayEntryContextPluginData{value: val, isSet: true}
}

func (v NullableKalturaFairplayEntryContextPluginData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaFairplayEntryContextPluginData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


