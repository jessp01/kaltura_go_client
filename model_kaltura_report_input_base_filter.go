/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaReportInputBaseFilter struct for KalturaReportInputBaseFilter
type KalturaReportInputBaseFilter struct {
	// Start date as Unix timestamp (In seconds)
	FromDate *int32 `json:"fromDate,omitempty"`
	// Start day as string (YYYYMMDD)
	FromDay *string `json:"fromDay,omitempty"`
	ObjectType *string `json:"objectType,omitempty"`
	// End date as Unix timestamp (In seconds)
	ToDate *int32 `json:"toDate,omitempty"`
	// End date as string (YYYYMMDD)
	ToDay *string `json:"toDay,omitempty"`
}

// NewKalturaReportInputBaseFilter instantiates a new KalturaReportInputBaseFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaReportInputBaseFilter() *KalturaReportInputBaseFilter {
	this := KalturaReportInputBaseFilter{}
	return &this
}

// NewKalturaReportInputBaseFilterWithDefaults instantiates a new KalturaReportInputBaseFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaReportInputBaseFilterWithDefaults() *KalturaReportInputBaseFilter {
	this := KalturaReportInputBaseFilter{}
	return &this
}

// GetFromDate returns the FromDate field value if set, zero value otherwise.
func (o *KalturaReportInputBaseFilter) GetFromDate() int32 {
	if o == nil || o.FromDate == nil {
		var ret int32
		return ret
	}
	return *o.FromDate
}

// GetFromDateOk returns a tuple with the FromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaReportInputBaseFilter) GetFromDateOk() (*int32, bool) {
	if o == nil || o.FromDate == nil {
		return nil, false
	}
	return o.FromDate, true
}

// HasFromDate returns a boolean if a field has been set.
func (o *KalturaReportInputBaseFilter) HasFromDate() bool {
	if o != nil && o.FromDate != nil {
		return true
	}

	return false
}

// SetFromDate gets a reference to the given int32 and assigns it to the FromDate field.
func (o *KalturaReportInputBaseFilter) SetFromDate(v int32) {
	o.FromDate = &v
}

// GetFromDay returns the FromDay field value if set, zero value otherwise.
func (o *KalturaReportInputBaseFilter) GetFromDay() string {
	if o == nil || o.FromDay == nil {
		var ret string
		return ret
	}
	return *o.FromDay
}

// GetFromDayOk returns a tuple with the FromDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaReportInputBaseFilter) GetFromDayOk() (*string, bool) {
	if o == nil || o.FromDay == nil {
		return nil, false
	}
	return o.FromDay, true
}

// HasFromDay returns a boolean if a field has been set.
func (o *KalturaReportInputBaseFilter) HasFromDay() bool {
	if o != nil && o.FromDay != nil {
		return true
	}

	return false
}

// SetFromDay gets a reference to the given string and assigns it to the FromDay field.
func (o *KalturaReportInputBaseFilter) SetFromDay(v string) {
	o.FromDay = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *KalturaReportInputBaseFilter) GetObjectType() string {
	if o == nil || o.ObjectType == nil {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaReportInputBaseFilter) GetObjectTypeOk() (*string, bool) {
	if o == nil || o.ObjectType == nil {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *KalturaReportInputBaseFilter) HasObjectType() bool {
	if o != nil && o.ObjectType != nil {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *KalturaReportInputBaseFilter) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetToDate returns the ToDate field value if set, zero value otherwise.
func (o *KalturaReportInputBaseFilter) GetToDate() int32 {
	if o == nil || o.ToDate == nil {
		var ret int32
		return ret
	}
	return *o.ToDate
}

// GetToDateOk returns a tuple with the ToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaReportInputBaseFilter) GetToDateOk() (*int32, bool) {
	if o == nil || o.ToDate == nil {
		return nil, false
	}
	return o.ToDate, true
}

// HasToDate returns a boolean if a field has been set.
func (o *KalturaReportInputBaseFilter) HasToDate() bool {
	if o != nil && o.ToDate != nil {
		return true
	}

	return false
}

// SetToDate gets a reference to the given int32 and assigns it to the ToDate field.
func (o *KalturaReportInputBaseFilter) SetToDate(v int32) {
	o.ToDate = &v
}

// GetToDay returns the ToDay field value if set, zero value otherwise.
func (o *KalturaReportInputBaseFilter) GetToDay() string {
	if o == nil || o.ToDay == nil {
		var ret string
		return ret
	}
	return *o.ToDay
}

// GetToDayOk returns a tuple with the ToDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaReportInputBaseFilter) GetToDayOk() (*string, bool) {
	if o == nil || o.ToDay == nil {
		return nil, false
	}
	return o.ToDay, true
}

// HasToDay returns a boolean if a field has been set.
func (o *KalturaReportInputBaseFilter) HasToDay() bool {
	if o != nil && o.ToDay != nil {
		return true
	}

	return false
}

// SetToDay gets a reference to the given string and assigns it to the ToDay field.
func (o *KalturaReportInputBaseFilter) SetToDay(v string) {
	o.ToDay = &v
}

func (o KalturaReportInputBaseFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FromDate != nil {
		toSerialize["fromDate"] = o.FromDate
	}
	if o.FromDay != nil {
		toSerialize["fromDay"] = o.FromDay
	}
	if o.ObjectType != nil {
		toSerialize["objectType"] = o.ObjectType
	}
	if o.ToDate != nil {
		toSerialize["toDate"] = o.ToDate
	}
	if o.ToDay != nil {
		toSerialize["toDay"] = o.ToDay
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaReportInputBaseFilter struct {
	value *KalturaReportInputBaseFilter
	isSet bool
}

func (v NullableKalturaReportInputBaseFilter) Get() *KalturaReportInputBaseFilter {
	return v.value
}

func (v *NullableKalturaReportInputBaseFilter) Set(val *KalturaReportInputBaseFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaReportInputBaseFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaReportInputBaseFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaReportInputBaseFilter(val *KalturaReportInputBaseFilter) *NullableKalturaReportInputBaseFilter {
	return &NullableKalturaReportInputBaseFilter{value: val, isSet: true}
}

func (v NullableKalturaReportInputBaseFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaReportInputBaseFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


