/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaUrlTokenizerWowzaSecureToken struct for KalturaUrlTokenizerWowzaSecureToken
type KalturaUrlTokenizerWowzaSecureToken struct {
	KalturaUrlTokenizer
}

// NewKalturaUrlTokenizerWowzaSecureToken instantiates a new KalturaUrlTokenizerWowzaSecureToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaUrlTokenizerWowzaSecureToken() *KalturaUrlTokenizerWowzaSecureToken {
	this := KalturaUrlTokenizerWowzaSecureToken{}
	return &this
}

// NewKalturaUrlTokenizerWowzaSecureTokenWithDefaults instantiates a new KalturaUrlTokenizerWowzaSecureToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaUrlTokenizerWowzaSecureTokenWithDefaults() *KalturaUrlTokenizerWowzaSecureToken {
	this := KalturaUrlTokenizerWowzaSecureToken{}
	return &this
}

func (o KalturaUrlTokenizerWowzaSecureToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedKalturaUrlTokenizer, errKalturaUrlTokenizer := json.Marshal(o.KalturaUrlTokenizer)
	if errKalturaUrlTokenizer != nil {
		return []byte{}, errKalturaUrlTokenizer
	}
	errKalturaUrlTokenizer = json.Unmarshal([]byte(serializedKalturaUrlTokenizer), &toSerialize)
	if errKalturaUrlTokenizer != nil {
		return []byte{}, errKalturaUrlTokenizer
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaUrlTokenizerWowzaSecureToken struct {
	value *KalturaUrlTokenizerWowzaSecureToken
	isSet bool
}

func (v NullableKalturaUrlTokenizerWowzaSecureToken) Get() *KalturaUrlTokenizerWowzaSecureToken {
	return v.value
}

func (v *NullableKalturaUrlTokenizerWowzaSecureToken) Set(val *KalturaUrlTokenizerWowzaSecureToken) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaUrlTokenizerWowzaSecureToken) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaUrlTokenizerWowzaSecureToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaUrlTokenizerWowzaSecureToken(val *KalturaUrlTokenizerWowzaSecureToken) *NullableKalturaUrlTokenizerWowzaSecureToken {
	return &NullableKalturaUrlTokenizerWowzaSecureToken{value: val, isSet: true}
}

func (v NullableKalturaUrlTokenizerWowzaSecureToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaUrlTokenizerWowzaSecureToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


