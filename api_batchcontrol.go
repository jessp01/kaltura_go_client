/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// BatchcontrolApiService BatchcontrolApi service
type BatchcontrolApiService service

type ApiBatchcontrolConfigLoadedRequest struct {
	ctx context.Context
	ApiService *BatchcontrolApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BatchcontrolConfigLoadedRequest
}

func (r ApiBatchcontrolConfigLoadedRequest) Ks(ks string) ApiBatchcontrolConfigLoadedRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBatchcontrolConfigLoadedRequest) Format(format int32) ApiBatchcontrolConfigLoadedRequest {
	r.format = &format
	return r
}

func (r ApiBatchcontrolConfigLoadedRequest) ClientTag(clientTag string) ApiBatchcontrolConfigLoadedRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBatchcontrolConfigLoadedRequest) PartnerId(partnerId int32) ApiBatchcontrolConfigLoadedRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBatchcontrolConfigLoadedRequest) Body(body BatchcontrolConfigLoadedRequest) ApiBatchcontrolConfigLoadedRequest {
	r.body = &body
	return r
}

func (r ApiBatchcontrolConfigLoadedRequest) Execute() (*KalturaSchedulerConfig, *http.Response, error) {
	return r.ApiService.BatchcontrolConfigLoadedExecute(r)
}

/*
BatchcontrolConfigLoaded Method for BatchcontrolConfigLoaded

batch configLoaded action saves the configuration as loaded by a remote scheduler

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchcontrolConfigLoadedRequest
*/
func (a *BatchcontrolApiService) BatchcontrolConfigLoaded(ctx context.Context) ApiBatchcontrolConfigLoadedRequest {
	return ApiBatchcontrolConfigLoadedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaSchedulerConfig
func (a *BatchcontrolApiService) BatchcontrolConfigLoadedExecute(r ApiBatchcontrolConfigLoadedRequest) (*KalturaSchedulerConfig, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaSchedulerConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchcontrolApiService.BatchcontrolConfigLoaded")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/batchcontrol/action/configLoaded"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchcontrolGetCommandRequest struct {
	ctx context.Context
	ApiService *BatchcontrolApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BatchcontrolGetCommandRequest
}

func (r ApiBatchcontrolGetCommandRequest) Ks(ks string) ApiBatchcontrolGetCommandRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBatchcontrolGetCommandRequest) Format(format int32) ApiBatchcontrolGetCommandRequest {
	r.format = &format
	return r
}

func (r ApiBatchcontrolGetCommandRequest) ClientTag(clientTag string) ApiBatchcontrolGetCommandRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBatchcontrolGetCommandRequest) PartnerId(partnerId int32) ApiBatchcontrolGetCommandRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBatchcontrolGetCommandRequest) Body(body BatchcontrolGetCommandRequest) ApiBatchcontrolGetCommandRequest {
	r.body = &body
	return r
}

func (r ApiBatchcontrolGetCommandRequest) Execute() (*KalturaControlPanelCommand, *http.Response, error) {
	return r.ApiService.BatchcontrolGetCommandExecute(r)
}

/*
BatchcontrolGetCommand Method for BatchcontrolGetCommand

batch getCommand action returns the command with its current status

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchcontrolGetCommandRequest
*/
func (a *BatchcontrolApiService) BatchcontrolGetCommand(ctx context.Context) ApiBatchcontrolGetCommandRequest {
	return ApiBatchcontrolGetCommandRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaControlPanelCommand
func (a *BatchcontrolApiService) BatchcontrolGetCommandExecute(r ApiBatchcontrolGetCommandRequest) (*KalturaControlPanelCommand, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaControlPanelCommand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchcontrolApiService.BatchcontrolGetCommand")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/batchcontrol/action/getCommand"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchcontrolGetFullStatusRequest struct {
	ctx context.Context
	ApiService *BatchcontrolApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	batchCleanExclusiveJobsRequest *BatchCleanExclusiveJobsRequest
}

func (r ApiBatchcontrolGetFullStatusRequest) Ks(ks string) ApiBatchcontrolGetFullStatusRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBatchcontrolGetFullStatusRequest) Format(format int32) ApiBatchcontrolGetFullStatusRequest {
	r.format = &format
	return r
}

func (r ApiBatchcontrolGetFullStatusRequest) ClientTag(clientTag string) ApiBatchcontrolGetFullStatusRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBatchcontrolGetFullStatusRequest) PartnerId(partnerId int32) ApiBatchcontrolGetFullStatusRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBatchcontrolGetFullStatusRequest) BatchCleanExclusiveJobsRequest(batchCleanExclusiveJobsRequest BatchCleanExclusiveJobsRequest) ApiBatchcontrolGetFullStatusRequest {
	r.batchCleanExclusiveJobsRequest = &batchCleanExclusiveJobsRequest
	return r
}

func (r ApiBatchcontrolGetFullStatusRequest) Execute() (*KalturaFullStatusResponse, *http.Response, error) {
	return r.ApiService.BatchcontrolGetFullStatusExecute(r)
}

/*
BatchcontrolGetFullStatus Method for BatchcontrolGetFullStatus

batch getFullStatus action returns the status of all schedulers and queues

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchcontrolGetFullStatusRequest
*/
func (a *BatchcontrolApiService) BatchcontrolGetFullStatus(ctx context.Context) ApiBatchcontrolGetFullStatusRequest {
	return ApiBatchcontrolGetFullStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaFullStatusResponse
func (a *BatchcontrolApiService) BatchcontrolGetFullStatusExecute(r ApiBatchcontrolGetFullStatusRequest) (*KalturaFullStatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaFullStatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchcontrolApiService.BatchcontrolGetFullStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/batchcontrol/action/getFullStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchCleanExclusiveJobsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchcontrolGetOrCreateSchedulerRequest struct {
	ctx context.Context
	ApiService *BatchcontrolApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BatchcontrolGetOrCreateSchedulerRequest
}

func (r ApiBatchcontrolGetOrCreateSchedulerRequest) Ks(ks string) ApiBatchcontrolGetOrCreateSchedulerRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBatchcontrolGetOrCreateSchedulerRequest) Format(format int32) ApiBatchcontrolGetOrCreateSchedulerRequest {
	r.format = &format
	return r
}

func (r ApiBatchcontrolGetOrCreateSchedulerRequest) ClientTag(clientTag string) ApiBatchcontrolGetOrCreateSchedulerRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBatchcontrolGetOrCreateSchedulerRequest) PartnerId(partnerId int32) ApiBatchcontrolGetOrCreateSchedulerRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBatchcontrolGetOrCreateSchedulerRequest) Body(body BatchcontrolGetOrCreateSchedulerRequest) ApiBatchcontrolGetOrCreateSchedulerRequest {
	r.body = &body
	return r
}

func (r ApiBatchcontrolGetOrCreateSchedulerRequest) Execute() (*KalturaScheduler, *http.Response, error) {
	return r.ApiService.BatchcontrolGetOrCreateSchedulerExecute(r)
}

/*
BatchcontrolGetOrCreateScheduler Method for BatchcontrolGetOrCreateScheduler

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchcontrolGetOrCreateSchedulerRequest
*/
func (a *BatchcontrolApiService) BatchcontrolGetOrCreateScheduler(ctx context.Context) ApiBatchcontrolGetOrCreateSchedulerRequest {
	return ApiBatchcontrolGetOrCreateSchedulerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaScheduler
func (a *BatchcontrolApiService) BatchcontrolGetOrCreateSchedulerExecute(r ApiBatchcontrolGetOrCreateSchedulerRequest) (*KalturaScheduler, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaScheduler
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchcontrolApiService.BatchcontrolGetOrCreateScheduler")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/batchcontrol/action/getOrCreateScheduler"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchcontrolKillRequest struct {
	ctx context.Context
	ApiService *BatchcontrolApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BatchcontrolKillRequest
}

func (r ApiBatchcontrolKillRequest) Ks(ks string) ApiBatchcontrolKillRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBatchcontrolKillRequest) Format(format int32) ApiBatchcontrolKillRequest {
	r.format = &format
	return r
}

func (r ApiBatchcontrolKillRequest) ClientTag(clientTag string) ApiBatchcontrolKillRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBatchcontrolKillRequest) PartnerId(partnerId int32) ApiBatchcontrolKillRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBatchcontrolKillRequest) Body(body BatchcontrolKillRequest) ApiBatchcontrolKillRequest {
	r.body = &body
	return r
}

func (r ApiBatchcontrolKillRequest) Execute() (*KalturaControlPanelCommand, *http.Response, error) {
	return r.ApiService.BatchcontrolKillExecute(r)
}

/*
BatchcontrolKill Method for BatchcontrolKill

batch kill action forces stop of a batch on a remote scheduler

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchcontrolKillRequest
*/
func (a *BatchcontrolApiService) BatchcontrolKill(ctx context.Context) ApiBatchcontrolKillRequest {
	return ApiBatchcontrolKillRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaControlPanelCommand
func (a *BatchcontrolApiService) BatchcontrolKillExecute(r ApiBatchcontrolKillRequest) (*KalturaControlPanelCommand, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaControlPanelCommand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchcontrolApiService.BatchcontrolKill")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/batchcontrol/action/kill"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchcontrolListCommandsRequest struct {
	ctx context.Context
	ApiService *BatchcontrolApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BatchcontrolListCommandsRequest
}

func (r ApiBatchcontrolListCommandsRequest) Ks(ks string) ApiBatchcontrolListCommandsRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBatchcontrolListCommandsRequest) Format(format int32) ApiBatchcontrolListCommandsRequest {
	r.format = &format
	return r
}

func (r ApiBatchcontrolListCommandsRequest) ClientTag(clientTag string) ApiBatchcontrolListCommandsRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBatchcontrolListCommandsRequest) PartnerId(partnerId int32) ApiBatchcontrolListCommandsRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBatchcontrolListCommandsRequest) Body(body BatchcontrolListCommandsRequest) ApiBatchcontrolListCommandsRequest {
	r.body = &body
	return r
}

func (r ApiBatchcontrolListCommandsRequest) Execute() (*KalturaControlPanelCommandListResponse, *http.Response, error) {
	return r.ApiService.BatchcontrolListCommandsExecute(r)
}

/*
BatchcontrolListCommands Method for BatchcontrolListCommands

list batch control commands

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchcontrolListCommandsRequest
*/
func (a *BatchcontrolApiService) BatchcontrolListCommands(ctx context.Context) ApiBatchcontrolListCommandsRequest {
	return ApiBatchcontrolListCommandsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaControlPanelCommandListResponse
func (a *BatchcontrolApiService) BatchcontrolListCommandsExecute(r ApiBatchcontrolListCommandsRequest) (*KalturaControlPanelCommandListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaControlPanelCommandListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchcontrolApiService.BatchcontrolListCommands")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/batchcontrol/action/listCommands"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchcontrolListSchedulersRequest struct {
	ctx context.Context
	ApiService *BatchcontrolApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	batchCleanExclusiveJobsRequest *BatchCleanExclusiveJobsRequest
}

func (r ApiBatchcontrolListSchedulersRequest) Ks(ks string) ApiBatchcontrolListSchedulersRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBatchcontrolListSchedulersRequest) Format(format int32) ApiBatchcontrolListSchedulersRequest {
	r.format = &format
	return r
}

func (r ApiBatchcontrolListSchedulersRequest) ClientTag(clientTag string) ApiBatchcontrolListSchedulersRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBatchcontrolListSchedulersRequest) PartnerId(partnerId int32) ApiBatchcontrolListSchedulersRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBatchcontrolListSchedulersRequest) BatchCleanExclusiveJobsRequest(batchCleanExclusiveJobsRequest BatchCleanExclusiveJobsRequest) ApiBatchcontrolListSchedulersRequest {
	r.batchCleanExclusiveJobsRequest = &batchCleanExclusiveJobsRequest
	return r
}

func (r ApiBatchcontrolListSchedulersRequest) Execute() (*KalturaSchedulerListResponse, *http.Response, error) {
	return r.ApiService.BatchcontrolListSchedulersExecute(r)
}

/*
BatchcontrolListSchedulers Method for BatchcontrolListSchedulers

list all Schedulers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchcontrolListSchedulersRequest
*/
func (a *BatchcontrolApiService) BatchcontrolListSchedulers(ctx context.Context) ApiBatchcontrolListSchedulersRequest {
	return ApiBatchcontrolListSchedulersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaSchedulerListResponse
func (a *BatchcontrolApiService) BatchcontrolListSchedulersExecute(r ApiBatchcontrolListSchedulersRequest) (*KalturaSchedulerListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaSchedulerListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchcontrolApiService.BatchcontrolListSchedulers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/batchcontrol/action/listSchedulers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchCleanExclusiveJobsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchcontrolListWorkersRequest struct {
	ctx context.Context
	ApiService *BatchcontrolApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	batchCleanExclusiveJobsRequest *BatchCleanExclusiveJobsRequest
}

func (r ApiBatchcontrolListWorkersRequest) Ks(ks string) ApiBatchcontrolListWorkersRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBatchcontrolListWorkersRequest) Format(format int32) ApiBatchcontrolListWorkersRequest {
	r.format = &format
	return r
}

func (r ApiBatchcontrolListWorkersRequest) ClientTag(clientTag string) ApiBatchcontrolListWorkersRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBatchcontrolListWorkersRequest) PartnerId(partnerId int32) ApiBatchcontrolListWorkersRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBatchcontrolListWorkersRequest) BatchCleanExclusiveJobsRequest(batchCleanExclusiveJobsRequest BatchCleanExclusiveJobsRequest) ApiBatchcontrolListWorkersRequest {
	r.batchCleanExclusiveJobsRequest = &batchCleanExclusiveJobsRequest
	return r
}

func (r ApiBatchcontrolListWorkersRequest) Execute() (*KalturaSchedulerWorkerListResponse, *http.Response, error) {
	return r.ApiService.BatchcontrolListWorkersExecute(r)
}

/*
BatchcontrolListWorkers Method for BatchcontrolListWorkers

list all Workers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchcontrolListWorkersRequest
*/
func (a *BatchcontrolApiService) BatchcontrolListWorkers(ctx context.Context) ApiBatchcontrolListWorkersRequest {
	return ApiBatchcontrolListWorkersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaSchedulerWorkerListResponse
func (a *BatchcontrolApiService) BatchcontrolListWorkersExecute(r ApiBatchcontrolListWorkersRequest) (*KalturaSchedulerWorkerListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaSchedulerWorkerListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchcontrolApiService.BatchcontrolListWorkers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/batchcontrol/action/listWorkers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchCleanExclusiveJobsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchcontrolReportStatusRequest struct {
	ctx context.Context
	ApiService *BatchcontrolApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BatchcontrolReportStatusRequest
}

func (r ApiBatchcontrolReportStatusRequest) Ks(ks string) ApiBatchcontrolReportStatusRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBatchcontrolReportStatusRequest) Format(format int32) ApiBatchcontrolReportStatusRequest {
	r.format = &format
	return r
}

func (r ApiBatchcontrolReportStatusRequest) ClientTag(clientTag string) ApiBatchcontrolReportStatusRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBatchcontrolReportStatusRequest) PartnerId(partnerId int32) ApiBatchcontrolReportStatusRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBatchcontrolReportStatusRequest) Body(body BatchcontrolReportStatusRequest) ApiBatchcontrolReportStatusRequest {
	r.body = &body
	return r
}

func (r ApiBatchcontrolReportStatusRequest) Execute() (*KalturaSchedulerStatusResponse, *http.Response, error) {
	return r.ApiService.BatchcontrolReportStatusExecute(r)
}

/*
BatchcontrolReportStatus Method for BatchcontrolReportStatus

batch reportStatus action saves the status attribute from a remote scheduler and returns pending commands for the scheduler

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchcontrolReportStatusRequest
*/
func (a *BatchcontrolApiService) BatchcontrolReportStatus(ctx context.Context) ApiBatchcontrolReportStatusRequest {
	return ApiBatchcontrolReportStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaSchedulerStatusResponse
func (a *BatchcontrolApiService) BatchcontrolReportStatusExecute(r ApiBatchcontrolReportStatusRequest) (*KalturaSchedulerStatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaSchedulerStatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchcontrolApiService.BatchcontrolReportStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/batchcontrol/action/reportStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchcontrolSetCommandResultRequest struct {
	ctx context.Context
	ApiService *BatchcontrolApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BatchcontrolSetCommandResultRequest
}

func (r ApiBatchcontrolSetCommandResultRequest) Ks(ks string) ApiBatchcontrolSetCommandResultRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBatchcontrolSetCommandResultRequest) Format(format int32) ApiBatchcontrolSetCommandResultRequest {
	r.format = &format
	return r
}

func (r ApiBatchcontrolSetCommandResultRequest) ClientTag(clientTag string) ApiBatchcontrolSetCommandResultRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBatchcontrolSetCommandResultRequest) PartnerId(partnerId int32) ApiBatchcontrolSetCommandResultRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBatchcontrolSetCommandResultRequest) Body(body BatchcontrolSetCommandResultRequest) ApiBatchcontrolSetCommandResultRequest {
	r.body = &body
	return r
}

func (r ApiBatchcontrolSetCommandResultRequest) Execute() (*KalturaControlPanelCommand, *http.Response, error) {
	return r.ApiService.BatchcontrolSetCommandResultExecute(r)
}

/*
BatchcontrolSetCommandResult Method for BatchcontrolSetCommandResult

batch setCommandResult action saves the results of a command as received from a remote scheduler

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchcontrolSetCommandResultRequest
*/
func (a *BatchcontrolApiService) BatchcontrolSetCommandResult(ctx context.Context) ApiBatchcontrolSetCommandResultRequest {
	return ApiBatchcontrolSetCommandResultRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaControlPanelCommand
func (a *BatchcontrolApiService) BatchcontrolSetCommandResultExecute(r ApiBatchcontrolSetCommandResultRequest) (*KalturaControlPanelCommand, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaControlPanelCommand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchcontrolApiService.BatchcontrolSetCommandResult")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/batchcontrol/action/setCommandResult"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchcontrolSetSchedulerConfigRequest struct {
	ctx context.Context
	ApiService *BatchcontrolApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BatchcontrolSetSchedulerConfigRequest
}

func (r ApiBatchcontrolSetSchedulerConfigRequest) Ks(ks string) ApiBatchcontrolSetSchedulerConfigRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBatchcontrolSetSchedulerConfigRequest) Format(format int32) ApiBatchcontrolSetSchedulerConfigRequest {
	r.format = &format
	return r
}

func (r ApiBatchcontrolSetSchedulerConfigRequest) ClientTag(clientTag string) ApiBatchcontrolSetSchedulerConfigRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBatchcontrolSetSchedulerConfigRequest) PartnerId(partnerId int32) ApiBatchcontrolSetSchedulerConfigRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBatchcontrolSetSchedulerConfigRequest) Body(body BatchcontrolSetSchedulerConfigRequest) ApiBatchcontrolSetSchedulerConfigRequest {
	r.body = &body
	return r
}

func (r ApiBatchcontrolSetSchedulerConfigRequest) Execute() (*KalturaControlPanelCommand, *http.Response, error) {
	return r.ApiService.BatchcontrolSetSchedulerConfigExecute(r)
}

/*
BatchcontrolSetSchedulerConfig Method for BatchcontrolSetSchedulerConfig

batch sets a configuration parameter to be loaded by a scheduler

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchcontrolSetSchedulerConfigRequest
*/
func (a *BatchcontrolApiService) BatchcontrolSetSchedulerConfig(ctx context.Context) ApiBatchcontrolSetSchedulerConfigRequest {
	return ApiBatchcontrolSetSchedulerConfigRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaControlPanelCommand
func (a *BatchcontrolApiService) BatchcontrolSetSchedulerConfigExecute(r ApiBatchcontrolSetSchedulerConfigRequest) (*KalturaControlPanelCommand, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaControlPanelCommand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchcontrolApiService.BatchcontrolSetSchedulerConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/batchcontrol/action/setSchedulerConfig"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchcontrolSetWorkerConfigRequest struct {
	ctx context.Context
	ApiService *BatchcontrolApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BatchcontrolSetWorkerConfigRequest
}

func (r ApiBatchcontrolSetWorkerConfigRequest) Ks(ks string) ApiBatchcontrolSetWorkerConfigRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBatchcontrolSetWorkerConfigRequest) Format(format int32) ApiBatchcontrolSetWorkerConfigRequest {
	r.format = &format
	return r
}

func (r ApiBatchcontrolSetWorkerConfigRequest) ClientTag(clientTag string) ApiBatchcontrolSetWorkerConfigRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBatchcontrolSetWorkerConfigRequest) PartnerId(partnerId int32) ApiBatchcontrolSetWorkerConfigRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBatchcontrolSetWorkerConfigRequest) Body(body BatchcontrolSetWorkerConfigRequest) ApiBatchcontrolSetWorkerConfigRequest {
	r.body = &body
	return r
}

func (r ApiBatchcontrolSetWorkerConfigRequest) Execute() (*KalturaControlPanelCommand, *http.Response, error) {
	return r.ApiService.BatchcontrolSetWorkerConfigExecute(r)
}

/*
BatchcontrolSetWorkerConfig Method for BatchcontrolSetWorkerConfig

batch sets a configuration parameter to be loaded by a worker

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchcontrolSetWorkerConfigRequest
*/
func (a *BatchcontrolApiService) BatchcontrolSetWorkerConfig(ctx context.Context) ApiBatchcontrolSetWorkerConfigRequest {
	return ApiBatchcontrolSetWorkerConfigRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaControlPanelCommand
func (a *BatchcontrolApiService) BatchcontrolSetWorkerConfigExecute(r ApiBatchcontrolSetWorkerConfigRequest) (*KalturaControlPanelCommand, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaControlPanelCommand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchcontrolApiService.BatchcontrolSetWorkerConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/batchcontrol/action/setWorkerConfig"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchcontrolStartWorkerRequest struct {
	ctx context.Context
	ApiService *BatchcontrolApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BatchcontrolStartWorkerRequest
}

func (r ApiBatchcontrolStartWorkerRequest) Ks(ks string) ApiBatchcontrolStartWorkerRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBatchcontrolStartWorkerRequest) Format(format int32) ApiBatchcontrolStartWorkerRequest {
	r.format = &format
	return r
}

func (r ApiBatchcontrolStartWorkerRequest) ClientTag(clientTag string) ApiBatchcontrolStartWorkerRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBatchcontrolStartWorkerRequest) PartnerId(partnerId int32) ApiBatchcontrolStartWorkerRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBatchcontrolStartWorkerRequest) Body(body BatchcontrolStartWorkerRequest) ApiBatchcontrolStartWorkerRequest {
	r.body = &body
	return r
}

func (r ApiBatchcontrolStartWorkerRequest) Execute() (*KalturaControlPanelCommand, *http.Response, error) {
	return r.ApiService.BatchcontrolStartWorkerExecute(r)
}

/*
BatchcontrolStartWorker Method for BatchcontrolStartWorker

batch start action starts a job

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchcontrolStartWorkerRequest
*/
func (a *BatchcontrolApiService) BatchcontrolStartWorker(ctx context.Context) ApiBatchcontrolStartWorkerRequest {
	return ApiBatchcontrolStartWorkerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaControlPanelCommand
func (a *BatchcontrolApiService) BatchcontrolStartWorkerExecute(r ApiBatchcontrolStartWorkerRequest) (*KalturaControlPanelCommand, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaControlPanelCommand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchcontrolApiService.BatchcontrolStartWorker")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/batchcontrol/action/startWorker"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchcontrolStopSchedulerRequest struct {
	ctx context.Context
	ApiService *BatchcontrolApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BatchcontrolStopSchedulerRequest
}

func (r ApiBatchcontrolStopSchedulerRequest) Ks(ks string) ApiBatchcontrolStopSchedulerRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBatchcontrolStopSchedulerRequest) Format(format int32) ApiBatchcontrolStopSchedulerRequest {
	r.format = &format
	return r
}

func (r ApiBatchcontrolStopSchedulerRequest) ClientTag(clientTag string) ApiBatchcontrolStopSchedulerRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBatchcontrolStopSchedulerRequest) PartnerId(partnerId int32) ApiBatchcontrolStopSchedulerRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBatchcontrolStopSchedulerRequest) Body(body BatchcontrolStopSchedulerRequest) ApiBatchcontrolStopSchedulerRequest {
	r.body = &body
	return r
}

func (r ApiBatchcontrolStopSchedulerRequest) Execute() (*KalturaControlPanelCommand, *http.Response, error) {
	return r.ApiService.BatchcontrolStopSchedulerExecute(r)
}

/*
BatchcontrolStopScheduler Method for BatchcontrolStopScheduler

batch stop action stops a scheduler

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchcontrolStopSchedulerRequest
*/
func (a *BatchcontrolApiService) BatchcontrolStopScheduler(ctx context.Context) ApiBatchcontrolStopSchedulerRequest {
	return ApiBatchcontrolStopSchedulerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaControlPanelCommand
func (a *BatchcontrolApiService) BatchcontrolStopSchedulerExecute(r ApiBatchcontrolStopSchedulerRequest) (*KalturaControlPanelCommand, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaControlPanelCommand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchcontrolApiService.BatchcontrolStopScheduler")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/batchcontrol/action/stopScheduler"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBatchcontrolStopWorkerRequest struct {
	ctx context.Context
	ApiService *BatchcontrolApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *BatchcontrolStopWorkerRequest
}

func (r ApiBatchcontrolStopWorkerRequest) Ks(ks string) ApiBatchcontrolStopWorkerRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiBatchcontrolStopWorkerRequest) Format(format int32) ApiBatchcontrolStopWorkerRequest {
	r.format = &format
	return r
}

func (r ApiBatchcontrolStopWorkerRequest) ClientTag(clientTag string) ApiBatchcontrolStopWorkerRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiBatchcontrolStopWorkerRequest) PartnerId(partnerId int32) ApiBatchcontrolStopWorkerRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiBatchcontrolStopWorkerRequest) Body(body BatchcontrolStopWorkerRequest) ApiBatchcontrolStopWorkerRequest {
	r.body = &body
	return r
}

func (r ApiBatchcontrolStopWorkerRequest) Execute() (*KalturaControlPanelCommand, *http.Response, error) {
	return r.ApiService.BatchcontrolStopWorkerExecute(r)
}

/*
BatchcontrolStopWorker Method for BatchcontrolStopWorker

batch stop action stops a worker

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBatchcontrolStopWorkerRequest
*/
func (a *BatchcontrolApiService) BatchcontrolStopWorker(ctx context.Context) ApiBatchcontrolStopWorkerRequest {
	return ApiBatchcontrolStopWorkerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaControlPanelCommand
func (a *BatchcontrolApiService) BatchcontrolStopWorkerExecute(r ApiBatchcontrolStopWorkerRequest) (*KalturaControlPanelCommand, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaControlPanelCommand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchcontrolApiService.BatchcontrolStopWorker")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/batchcontrol/action/stopWorker"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
