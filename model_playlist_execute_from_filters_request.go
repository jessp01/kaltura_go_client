/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PlaylistExecuteFromFiltersRequest struct for PlaylistExecuteFromFiltersRequest
type PlaylistExecuteFromFiltersRequest struct {
	Detailed *string `json:"detailed,omitempty"`
	Filters []KalturaMediaEntryFilterForPlaylist `json:"filters"`
	Pager *KalturaFilterPager `json:"pager,omitempty"`
	TotalResults int32 `json:"totalResults"`
}

// NewPlaylistExecuteFromFiltersRequest instantiates a new PlaylistExecuteFromFiltersRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaylistExecuteFromFiltersRequest(filters []KalturaMediaEntryFilterForPlaylist, totalResults int32) *PlaylistExecuteFromFiltersRequest {
	this := PlaylistExecuteFromFiltersRequest{}
	var detailed string = "1"
	this.Detailed = &detailed
	this.Filters = filters
	this.TotalResults = totalResults
	return &this
}

// NewPlaylistExecuteFromFiltersRequestWithDefaults instantiates a new PlaylistExecuteFromFiltersRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaylistExecuteFromFiltersRequestWithDefaults() *PlaylistExecuteFromFiltersRequest {
	this := PlaylistExecuteFromFiltersRequest{}
	var detailed string = "1"
	this.Detailed = &detailed
	return &this
}

// GetDetailed returns the Detailed field value if set, zero value otherwise.
func (o *PlaylistExecuteFromFiltersRequest) GetDetailed() string {
	if o == nil || o.Detailed == nil {
		var ret string
		return ret
	}
	return *o.Detailed
}

// GetDetailedOk returns a tuple with the Detailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistExecuteFromFiltersRequest) GetDetailedOk() (*string, bool) {
	if o == nil || o.Detailed == nil {
		return nil, false
	}
	return o.Detailed, true
}

// HasDetailed returns a boolean if a field has been set.
func (o *PlaylistExecuteFromFiltersRequest) HasDetailed() bool {
	if o != nil && o.Detailed != nil {
		return true
	}

	return false
}

// SetDetailed gets a reference to the given string and assigns it to the Detailed field.
func (o *PlaylistExecuteFromFiltersRequest) SetDetailed(v string) {
	o.Detailed = &v
}

// GetFilters returns the Filters field value
func (o *PlaylistExecuteFromFiltersRequest) GetFilters() []KalturaMediaEntryFilterForPlaylist {
	if o == nil {
		var ret []KalturaMediaEntryFilterForPlaylist
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *PlaylistExecuteFromFiltersRequest) GetFiltersOk() ([]KalturaMediaEntryFilterForPlaylist, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filters, true
}

// SetFilters sets field value
func (o *PlaylistExecuteFromFiltersRequest) SetFilters(v []KalturaMediaEntryFilterForPlaylist) {
	o.Filters = v
}

// GetPager returns the Pager field value if set, zero value otherwise.
func (o *PlaylistExecuteFromFiltersRequest) GetPager() KalturaFilterPager {
	if o == nil || o.Pager == nil {
		var ret KalturaFilterPager
		return ret
	}
	return *o.Pager
}

// GetPagerOk returns a tuple with the Pager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistExecuteFromFiltersRequest) GetPagerOk() (*KalturaFilterPager, bool) {
	if o == nil || o.Pager == nil {
		return nil, false
	}
	return o.Pager, true
}

// HasPager returns a boolean if a field has been set.
func (o *PlaylistExecuteFromFiltersRequest) HasPager() bool {
	if o != nil && o.Pager != nil {
		return true
	}

	return false
}

// SetPager gets a reference to the given KalturaFilterPager and assigns it to the Pager field.
func (o *PlaylistExecuteFromFiltersRequest) SetPager(v KalturaFilterPager) {
	o.Pager = &v
}

// GetTotalResults returns the TotalResults field value
func (o *PlaylistExecuteFromFiltersRequest) GetTotalResults() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value
// and a boolean to check if the value has been set.
func (o *PlaylistExecuteFromFiltersRequest) GetTotalResultsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalResults, true
}

// SetTotalResults sets field value
func (o *PlaylistExecuteFromFiltersRequest) SetTotalResults(v int32) {
	o.TotalResults = v
}

func (o PlaylistExecuteFromFiltersRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Detailed != nil {
		toSerialize["detailed"] = o.Detailed
	}
	if true {
		toSerialize["filters"] = o.Filters
	}
	if o.Pager != nil {
		toSerialize["pager"] = o.Pager
	}
	if true {
		toSerialize["totalResults"] = o.TotalResults
	}
	return json.Marshal(toSerialize)
}

type NullablePlaylistExecuteFromFiltersRequest struct {
	value *PlaylistExecuteFromFiltersRequest
	isSet bool
}

func (v NullablePlaylistExecuteFromFiltersRequest) Get() *PlaylistExecuteFromFiltersRequest {
	return v.value
}

func (v *NullablePlaylistExecuteFromFiltersRequest) Set(val *PlaylistExecuteFromFiltersRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaylistExecuteFromFiltersRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaylistExecuteFromFiltersRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaylistExecuteFromFiltersRequest(val *PlaylistExecuteFromFiltersRequest) *NullablePlaylistExecuteFromFiltersRequest {
	return &NullablePlaylistExecuteFromFiltersRequest{value: val, isSet: true}
}

func (v NullablePlaylistExecuteFromFiltersRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaylistExecuteFromFiltersRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


