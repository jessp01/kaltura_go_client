/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ZoomVendorSubmitRegistrationRequest struct for ZoomVendorSubmitRegistrationRequest
type ZoomVendorSubmitRegistrationRequest struct {
	AccountId string `json:"accountId"`
	IntegrationSetting KalturaZoomIntegrationSetting `json:"integrationSetting"`
}

// NewZoomVendorSubmitRegistrationRequest instantiates a new ZoomVendorSubmitRegistrationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoomVendorSubmitRegistrationRequest(accountId string, integrationSetting KalturaZoomIntegrationSetting) *ZoomVendorSubmitRegistrationRequest {
	this := ZoomVendorSubmitRegistrationRequest{}
	this.AccountId = accountId
	this.IntegrationSetting = integrationSetting
	return &this
}

// NewZoomVendorSubmitRegistrationRequestWithDefaults instantiates a new ZoomVendorSubmitRegistrationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoomVendorSubmitRegistrationRequestWithDefaults() *ZoomVendorSubmitRegistrationRequest {
	this := ZoomVendorSubmitRegistrationRequest{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *ZoomVendorSubmitRegistrationRequest) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *ZoomVendorSubmitRegistrationRequest) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *ZoomVendorSubmitRegistrationRequest) SetAccountId(v string) {
	o.AccountId = v
}

// GetIntegrationSetting returns the IntegrationSetting field value
func (o *ZoomVendorSubmitRegistrationRequest) GetIntegrationSetting() KalturaZoomIntegrationSetting {
	if o == nil {
		var ret KalturaZoomIntegrationSetting
		return ret
	}

	return o.IntegrationSetting
}

// GetIntegrationSettingOk returns a tuple with the IntegrationSetting field value
// and a boolean to check if the value has been set.
func (o *ZoomVendorSubmitRegistrationRequest) GetIntegrationSettingOk() (*KalturaZoomIntegrationSetting, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegrationSetting, true
}

// SetIntegrationSetting sets field value
func (o *ZoomVendorSubmitRegistrationRequest) SetIntegrationSetting(v KalturaZoomIntegrationSetting) {
	o.IntegrationSetting = v
}

func (o ZoomVendorSubmitRegistrationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["integrationSetting"] = o.IntegrationSetting
	}
	return json.Marshal(toSerialize)
}

type NullableZoomVendorSubmitRegistrationRequest struct {
	value *ZoomVendorSubmitRegistrationRequest
	isSet bool
}

func (v NullableZoomVendorSubmitRegistrationRequest) Get() *ZoomVendorSubmitRegistrationRequest {
	return v.value
}

func (v *NullableZoomVendorSubmitRegistrationRequest) Set(val *ZoomVendorSubmitRegistrationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableZoomVendorSubmitRegistrationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableZoomVendorSubmitRegistrationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoomVendorSubmitRegistrationRequest(val *ZoomVendorSubmitRegistrationRequest) *NullableZoomVendorSubmitRegistrationRequest {
	return &NullableZoomVendorSubmitRegistrationRequest{value: val, isSet: true}
}

func (v NullableZoomVendorSubmitRegistrationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoomVendorSubmitRegistrationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


