/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserCheckLoginDataExistsRequest struct for UserCheckLoginDataExistsRequest
type UserCheckLoginDataExistsRequest struct {
	Filter KalturaUserLoginDataFilter `json:"filter"`
}

// NewUserCheckLoginDataExistsRequest instantiates a new UserCheckLoginDataExistsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCheckLoginDataExistsRequest(filter KalturaUserLoginDataFilter) *UserCheckLoginDataExistsRequest {
	this := UserCheckLoginDataExistsRequest{}
	this.Filter = filter
	return &this
}

// NewUserCheckLoginDataExistsRequestWithDefaults instantiates a new UserCheckLoginDataExistsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCheckLoginDataExistsRequestWithDefaults() *UserCheckLoginDataExistsRequest {
	this := UserCheckLoginDataExistsRequest{}
	return &this
}

// GetFilter returns the Filter field value
func (o *UserCheckLoginDataExistsRequest) GetFilter() KalturaUserLoginDataFilter {
	if o == nil {
		var ret KalturaUserLoginDataFilter
		return ret
	}

	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value
// and a boolean to check if the value has been set.
func (o *UserCheckLoginDataExistsRequest) GetFilterOk() (*KalturaUserLoginDataFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filter, true
}

// SetFilter sets field value
func (o *UserCheckLoginDataExistsRequest) SetFilter(v KalturaUserLoginDataFilter) {
	o.Filter = v
}

func (o UserCheckLoginDataExistsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["filter"] = o.Filter
	}
	return json.Marshal(toSerialize)
}

type NullableUserCheckLoginDataExistsRequest struct {
	value *UserCheckLoginDataExistsRequest
	isSet bool
}

func (v NullableUserCheckLoginDataExistsRequest) Get() *UserCheckLoginDataExistsRequest {
	return v.value
}

func (v *NullableUserCheckLoginDataExistsRequest) Set(val *UserCheckLoginDataExistsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCheckLoginDataExistsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCheckLoginDataExistsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCheckLoginDataExistsRequest(val *UserCheckLoginDataExistsRequest) *NullableUserCheckLoginDataExistsRequest {
	return &NullableUserCheckLoginDataExistsRequest{value: val, isSet: true}
}

func (v NullableUserCheckLoginDataExistsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCheckLoginDataExistsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


