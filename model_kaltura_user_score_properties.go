/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaUserScoreProperties struct for KalturaUserScoreProperties
type KalturaUserScoreProperties struct {
	Rank *int32 `json:"rank,omitempty"`
	Score *int32 `json:"score,omitempty"`
	UserId *string `json:"userId,omitempty"`
}

// NewKalturaUserScoreProperties instantiates a new KalturaUserScoreProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaUserScoreProperties() *KalturaUserScoreProperties {
	this := KalturaUserScoreProperties{}
	return &this
}

// NewKalturaUserScorePropertiesWithDefaults instantiates a new KalturaUserScoreProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaUserScorePropertiesWithDefaults() *KalturaUserScoreProperties {
	this := KalturaUserScoreProperties{}
	return &this
}

// GetRank returns the Rank field value if set, zero value otherwise.
func (o *KalturaUserScoreProperties) GetRank() int32 {
	if o == nil || o.Rank == nil {
		var ret int32
		return ret
	}
	return *o.Rank
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaUserScoreProperties) GetRankOk() (*int32, bool) {
	if o == nil || o.Rank == nil {
		return nil, false
	}
	return o.Rank, true
}

// HasRank returns a boolean if a field has been set.
func (o *KalturaUserScoreProperties) HasRank() bool {
	if o != nil && o.Rank != nil {
		return true
	}

	return false
}

// SetRank gets a reference to the given int32 and assigns it to the Rank field.
func (o *KalturaUserScoreProperties) SetRank(v int32) {
	o.Rank = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *KalturaUserScoreProperties) GetScore() int32 {
	if o == nil || o.Score == nil {
		var ret int32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaUserScoreProperties) GetScoreOk() (*int32, bool) {
	if o == nil || o.Score == nil {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *KalturaUserScoreProperties) HasScore() bool {
	if o != nil && o.Score != nil {
		return true
	}

	return false
}

// SetScore gets a reference to the given int32 and assigns it to the Score field.
func (o *KalturaUserScoreProperties) SetScore(v int32) {
	o.Score = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *KalturaUserScoreProperties) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaUserScoreProperties) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *KalturaUserScoreProperties) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *KalturaUserScoreProperties) SetUserId(v string) {
	o.UserId = &v
}

func (o KalturaUserScoreProperties) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Rank != nil {
		toSerialize["rank"] = o.Rank
	}
	if o.Score != nil {
		toSerialize["score"] = o.Score
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaUserScoreProperties struct {
	value *KalturaUserScoreProperties
	isSet bool
}

func (v NullableKalturaUserScoreProperties) Get() *KalturaUserScoreProperties {
	return v.value
}

func (v *NullableKalturaUserScoreProperties) Set(val *KalturaUserScoreProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaUserScoreProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaUserScoreProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaUserScoreProperties(val *KalturaUserScoreProperties) *NullableKalturaUserScoreProperties {
	return &NullableKalturaUserScoreProperties{value: val, isSet: true}
}

func (v NullableKalturaUserScoreProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaUserScoreProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


