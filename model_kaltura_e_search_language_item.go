/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaESearchLanguageItem struct for KalturaESearchLanguageItem
type KalturaESearchLanguageItem struct {
	// Enum Type: `KalturaESearchLanguage`
	ESerachLanguage *string `json:"eSerachLanguage,omitempty"`
}

// NewKalturaESearchLanguageItem instantiates a new KalturaESearchLanguageItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaESearchLanguageItem() *KalturaESearchLanguageItem {
	this := KalturaESearchLanguageItem{}
	return &this
}

// NewKalturaESearchLanguageItemWithDefaults instantiates a new KalturaESearchLanguageItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaESearchLanguageItemWithDefaults() *KalturaESearchLanguageItem {
	this := KalturaESearchLanguageItem{}
	return &this
}

// GetESerachLanguage returns the ESerachLanguage field value if set, zero value otherwise.
func (o *KalturaESearchLanguageItem) GetESerachLanguage() string {
	if o == nil || o.ESerachLanguage == nil {
		var ret string
		return ret
	}
	return *o.ESerachLanguage
}

// GetESerachLanguageOk returns a tuple with the ESerachLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaESearchLanguageItem) GetESerachLanguageOk() (*string, bool) {
	if o == nil || o.ESerachLanguage == nil {
		return nil, false
	}
	return o.ESerachLanguage, true
}

// HasESerachLanguage returns a boolean if a field has been set.
func (o *KalturaESearchLanguageItem) HasESerachLanguage() bool {
	if o != nil && o.ESerachLanguage != nil {
		return true
	}

	return false
}

// SetESerachLanguage gets a reference to the given string and assigns it to the ESerachLanguage field.
func (o *KalturaESearchLanguageItem) SetESerachLanguage(v string) {
	o.ESerachLanguage = &v
}

func (o KalturaESearchLanguageItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ESerachLanguage != nil {
		toSerialize["eSerachLanguage"] = o.ESerachLanguage
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaESearchLanguageItem struct {
	value *KalturaESearchLanguageItem
	isSet bool
}

func (v NullableKalturaESearchLanguageItem) Get() *KalturaESearchLanguageItem {
	return v.value
}

func (v *NullableKalturaESearchLanguageItem) Set(val *KalturaESearchLanguageItem) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaESearchLanguageItem) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaESearchLanguageItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaESearchLanguageItem(val *KalturaESearchLanguageItem) *NullableKalturaESearchLanguageItem {
	return &NullableKalturaESearchLanguageItem{value: val, isSet: true}
}

func (v NullableKalturaESearchLanguageItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaESearchLanguageItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


