/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// CaptionAssetApiService CaptionAssetApi service
type CaptionAssetApiService service

type ApiCaptionAssetAddRequest struct {
	ctx context.Context
	ApiService *CaptionAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CaptionAssetAddRequest
}

func (r ApiCaptionAssetAddRequest) Ks(ks string) ApiCaptionAssetAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionAssetAddRequest) Format(format int32) ApiCaptionAssetAddRequest {
	r.format = &format
	return r
}

func (r ApiCaptionAssetAddRequest) ClientTag(clientTag string) ApiCaptionAssetAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionAssetAddRequest) PartnerId(partnerId int32) ApiCaptionAssetAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionAssetAddRequest) Body(body CaptionAssetAddRequest) ApiCaptionAssetAddRequest {
	r.body = &body
	return r
}

func (r ApiCaptionAssetAddRequest) Execute() (*KalturaCaptionAsset, *http.Response, error) {
	return r.ApiService.CaptionAssetAddExecute(r)
}

/*
CaptionAssetAdd Method for CaptionAssetAdd

Add caption asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionAssetAddRequest
*/
func (a *CaptionAssetApiService) CaptionAssetAdd(ctx context.Context) ApiCaptionAssetAddRequest {
	return ApiCaptionAssetAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaCaptionAsset
func (a *CaptionAssetApiService) CaptionAssetAddExecute(r ApiCaptionAssetAddRequest) (*KalturaCaptionAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaCaptionAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionAssetApiService.CaptionAssetAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionasset/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCaptionAssetDeleteRequest struct {
	ctx context.Context
	ApiService *CaptionAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CaptionAssetDeleteRequest
}

func (r ApiCaptionAssetDeleteRequest) Ks(ks string) ApiCaptionAssetDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionAssetDeleteRequest) Format(format int32) ApiCaptionAssetDeleteRequest {
	r.format = &format
	return r
}

func (r ApiCaptionAssetDeleteRequest) ClientTag(clientTag string) ApiCaptionAssetDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionAssetDeleteRequest) PartnerId(partnerId int32) ApiCaptionAssetDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionAssetDeleteRequest) Body(body CaptionAssetDeleteRequest) ApiCaptionAssetDeleteRequest {
	r.body = &body
	return r
}

func (r ApiCaptionAssetDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.CaptionAssetDeleteExecute(r)
}

/*
CaptionAssetDelete Method for CaptionAssetDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionAssetDeleteRequest
*/
func (a *CaptionAssetApiService) CaptionAssetDelete(ctx context.Context) ApiCaptionAssetDeleteRequest {
	return ApiCaptionAssetDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CaptionAssetApiService) CaptionAssetDeleteExecute(r ApiCaptionAssetDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionAssetApiService.CaptionAssetDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionasset/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCaptionAssetExportRequest struct {
	ctx context.Context
	ApiService *CaptionAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CaptionAssetExportRequest
}

func (r ApiCaptionAssetExportRequest) Ks(ks string) ApiCaptionAssetExportRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionAssetExportRequest) Format(format int32) ApiCaptionAssetExportRequest {
	r.format = &format
	return r
}

func (r ApiCaptionAssetExportRequest) ClientTag(clientTag string) ApiCaptionAssetExportRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionAssetExportRequest) PartnerId(partnerId int32) ApiCaptionAssetExportRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionAssetExportRequest) Body(body CaptionAssetExportRequest) ApiCaptionAssetExportRequest {
	r.body = &body
	return r
}

func (r ApiCaptionAssetExportRequest) Execute() (*KalturaFlavorAsset, *http.Response, error) {
	return r.ApiService.CaptionAssetExportExecute(r)
}

/*
CaptionAssetExport Method for CaptionAssetExport

manually export an asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionAssetExportRequest
*/
func (a *CaptionAssetApiService) CaptionAssetExport(ctx context.Context) ApiCaptionAssetExportRequest {
	return ApiCaptionAssetExportRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaFlavorAsset
func (a *CaptionAssetApiService) CaptionAssetExportExecute(r ApiCaptionAssetExportRequest) (*KalturaFlavorAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaFlavorAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionAssetApiService.CaptionAssetExport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionasset/action/export"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCaptionAssetGetRequest struct {
	ctx context.Context
	ApiService *CaptionAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CaptionAssetDeleteRequest
}

func (r ApiCaptionAssetGetRequest) Ks(ks string) ApiCaptionAssetGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionAssetGetRequest) Format(format int32) ApiCaptionAssetGetRequest {
	r.format = &format
	return r
}

func (r ApiCaptionAssetGetRequest) ClientTag(clientTag string) ApiCaptionAssetGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionAssetGetRequest) PartnerId(partnerId int32) ApiCaptionAssetGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionAssetGetRequest) Body(body CaptionAssetDeleteRequest) ApiCaptionAssetGetRequest {
	r.body = &body
	return r
}

func (r ApiCaptionAssetGetRequest) Execute() (*KalturaCaptionAsset, *http.Response, error) {
	return r.ApiService.CaptionAssetGetExecute(r)
}

/*
CaptionAssetGet Method for CaptionAssetGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionAssetGetRequest
*/
func (a *CaptionAssetApiService) CaptionAssetGet(ctx context.Context) ApiCaptionAssetGetRequest {
	return ApiCaptionAssetGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaCaptionAsset
func (a *CaptionAssetApiService) CaptionAssetGetExecute(r ApiCaptionAssetGetRequest) (*KalturaCaptionAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaCaptionAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionAssetApiService.CaptionAssetGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionasset/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCaptionAssetGetRemotePathsRequest struct {
	ctx context.Context
	ApiService *CaptionAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AnnotationDeleteRequest
}

func (r ApiCaptionAssetGetRemotePathsRequest) Ks(ks string) ApiCaptionAssetGetRemotePathsRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionAssetGetRemotePathsRequest) Format(format int32) ApiCaptionAssetGetRemotePathsRequest {
	r.format = &format
	return r
}

func (r ApiCaptionAssetGetRemotePathsRequest) ClientTag(clientTag string) ApiCaptionAssetGetRemotePathsRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionAssetGetRemotePathsRequest) PartnerId(partnerId int32) ApiCaptionAssetGetRemotePathsRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionAssetGetRemotePathsRequest) Body(body AnnotationDeleteRequest) ApiCaptionAssetGetRemotePathsRequest {
	r.body = &body
	return r
}

func (r ApiCaptionAssetGetRemotePathsRequest) Execute() (*KalturaRemotePathListResponse, *http.Response, error) {
	return r.ApiService.CaptionAssetGetRemotePathsExecute(r)
}

/*
CaptionAssetGetRemotePaths Method for CaptionAssetGetRemotePaths

Get remote storage existing paths for the asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionAssetGetRemotePathsRequest
*/
func (a *CaptionAssetApiService) CaptionAssetGetRemotePaths(ctx context.Context) ApiCaptionAssetGetRemotePathsRequest {
	return ApiCaptionAssetGetRemotePathsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaRemotePathListResponse
func (a *CaptionAssetApiService) CaptionAssetGetRemotePathsExecute(r ApiCaptionAssetGetRemotePathsRequest) (*KalturaRemotePathListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaRemotePathListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionAssetApiService.CaptionAssetGetRemotePaths")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionasset/action/getRemotePaths"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCaptionAssetGetUrlRequest struct {
	ctx context.Context
	ApiService *CaptionAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AttachmentAssetGetUrlRequest
}

func (r ApiCaptionAssetGetUrlRequest) Ks(ks string) ApiCaptionAssetGetUrlRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionAssetGetUrlRequest) Format(format int32) ApiCaptionAssetGetUrlRequest {
	r.format = &format
	return r
}

func (r ApiCaptionAssetGetUrlRequest) ClientTag(clientTag string) ApiCaptionAssetGetUrlRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionAssetGetUrlRequest) PartnerId(partnerId int32) ApiCaptionAssetGetUrlRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionAssetGetUrlRequest) Body(body AttachmentAssetGetUrlRequest) ApiCaptionAssetGetUrlRequest {
	r.body = &body
	return r
}

func (r ApiCaptionAssetGetUrlRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CaptionAssetGetUrlExecute(r)
}

/*
CaptionAssetGetUrl Method for CaptionAssetGetUrl

Get download URL for the asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionAssetGetUrlRequest
*/
func (a *CaptionAssetApiService) CaptionAssetGetUrl(ctx context.Context) ApiCaptionAssetGetUrlRequest {
	return ApiCaptionAssetGetUrlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *CaptionAssetApiService) CaptionAssetGetUrlExecute(r ApiCaptionAssetGetUrlRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionAssetApiService.CaptionAssetGetUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionasset/action/getUrl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCaptionAssetListRequest struct {
	ctx context.Context
	ApiService *CaptionAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AttachmentAssetListRequest
}

func (r ApiCaptionAssetListRequest) Ks(ks string) ApiCaptionAssetListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionAssetListRequest) Format(format int32) ApiCaptionAssetListRequest {
	r.format = &format
	return r
}

func (r ApiCaptionAssetListRequest) ClientTag(clientTag string) ApiCaptionAssetListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionAssetListRequest) PartnerId(partnerId int32) ApiCaptionAssetListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionAssetListRequest) Body(body AttachmentAssetListRequest) ApiCaptionAssetListRequest {
	r.body = &body
	return r
}

func (r ApiCaptionAssetListRequest) Execute() (*KalturaCaptionAssetListResponse, *http.Response, error) {
	return r.ApiService.CaptionAssetListExecute(r)
}

/*
CaptionAssetList Method for CaptionAssetList

List caption Assets by filter and pager

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionAssetListRequest
*/
func (a *CaptionAssetApiService) CaptionAssetList(ctx context.Context) ApiCaptionAssetListRequest {
	return ApiCaptionAssetListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaCaptionAssetListResponse
func (a *CaptionAssetApiService) CaptionAssetListExecute(r ApiCaptionAssetListRequest) (*KalturaCaptionAssetListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaCaptionAssetListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionAssetApiService.CaptionAssetList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionasset/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCaptionAssetServeRequest struct {
	ctx context.Context
	ApiService *CaptionAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CaptionAssetDeleteRequest
}

func (r ApiCaptionAssetServeRequest) Ks(ks string) ApiCaptionAssetServeRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionAssetServeRequest) Format(format int32) ApiCaptionAssetServeRequest {
	r.format = &format
	return r
}

func (r ApiCaptionAssetServeRequest) ClientTag(clientTag string) ApiCaptionAssetServeRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionAssetServeRequest) PartnerId(partnerId int32) ApiCaptionAssetServeRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionAssetServeRequest) Body(body CaptionAssetDeleteRequest) ApiCaptionAssetServeRequest {
	r.body = &body
	return r
}

func (r ApiCaptionAssetServeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CaptionAssetServeExecute(r)
}

/*
CaptionAssetServe Method for CaptionAssetServe

Serves caption by its id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionAssetServeRequest
*/
func (a *CaptionAssetApiService) CaptionAssetServe(ctx context.Context) ApiCaptionAssetServeRequest {
	return ApiCaptionAssetServeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *CaptionAssetApiService) CaptionAssetServeExecute(r ApiCaptionAssetServeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionAssetApiService.CaptionAssetServe")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionasset/action/serve"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCaptionAssetServeAsJsonRequest struct {
	ctx context.Context
	ApiService *CaptionAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CaptionAssetDeleteRequest
}

func (r ApiCaptionAssetServeAsJsonRequest) Ks(ks string) ApiCaptionAssetServeAsJsonRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionAssetServeAsJsonRequest) Format(format int32) ApiCaptionAssetServeAsJsonRequest {
	r.format = &format
	return r
}

func (r ApiCaptionAssetServeAsJsonRequest) ClientTag(clientTag string) ApiCaptionAssetServeAsJsonRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionAssetServeAsJsonRequest) PartnerId(partnerId int32) ApiCaptionAssetServeAsJsonRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionAssetServeAsJsonRequest) Body(body CaptionAssetDeleteRequest) ApiCaptionAssetServeAsJsonRequest {
	r.body = &body
	return r
}

func (r ApiCaptionAssetServeAsJsonRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CaptionAssetServeAsJsonExecute(r)
}

/*
CaptionAssetServeAsJson Method for CaptionAssetServeAsJson

Serves caption file as Json by its ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionAssetServeAsJsonRequest
*/
func (a *CaptionAssetApiService) CaptionAssetServeAsJson(ctx context.Context) ApiCaptionAssetServeAsJsonRequest {
	return ApiCaptionAssetServeAsJsonRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *CaptionAssetApiService) CaptionAssetServeAsJsonExecute(r ApiCaptionAssetServeAsJsonRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionAssetApiService.CaptionAssetServeAsJson")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionasset/action/serveAsJson"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCaptionAssetServeByEntryIdRequest struct {
	ctx context.Context
	ApiService *CaptionAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CaptionAssetServeByEntryIdRequest
}

func (r ApiCaptionAssetServeByEntryIdRequest) Ks(ks string) ApiCaptionAssetServeByEntryIdRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionAssetServeByEntryIdRequest) Format(format int32) ApiCaptionAssetServeByEntryIdRequest {
	r.format = &format
	return r
}

func (r ApiCaptionAssetServeByEntryIdRequest) ClientTag(clientTag string) ApiCaptionAssetServeByEntryIdRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionAssetServeByEntryIdRequest) PartnerId(partnerId int32) ApiCaptionAssetServeByEntryIdRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionAssetServeByEntryIdRequest) Body(body CaptionAssetServeByEntryIdRequest) ApiCaptionAssetServeByEntryIdRequest {
	r.body = &body
	return r
}

func (r ApiCaptionAssetServeByEntryIdRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CaptionAssetServeByEntryIdExecute(r)
}

/*
CaptionAssetServeByEntryId Method for CaptionAssetServeByEntryId

Serves caption by entry id and thumnail params id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionAssetServeByEntryIdRequest
*/
func (a *CaptionAssetApiService) CaptionAssetServeByEntryId(ctx context.Context) ApiCaptionAssetServeByEntryIdRequest {
	return ApiCaptionAssetServeByEntryIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *CaptionAssetApiService) CaptionAssetServeByEntryIdExecute(r ApiCaptionAssetServeByEntryIdRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionAssetApiService.CaptionAssetServeByEntryId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionasset/action/serveByEntryId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCaptionAssetServeWebVTTRequest struct {
	ctx context.Context
	ApiService *CaptionAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CaptionAssetServeWebVTTRequest
}

func (r ApiCaptionAssetServeWebVTTRequest) Ks(ks string) ApiCaptionAssetServeWebVTTRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionAssetServeWebVTTRequest) Format(format int32) ApiCaptionAssetServeWebVTTRequest {
	r.format = &format
	return r
}

func (r ApiCaptionAssetServeWebVTTRequest) ClientTag(clientTag string) ApiCaptionAssetServeWebVTTRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionAssetServeWebVTTRequest) PartnerId(partnerId int32) ApiCaptionAssetServeWebVTTRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionAssetServeWebVTTRequest) Body(body CaptionAssetServeWebVTTRequest) ApiCaptionAssetServeWebVTTRequest {
	r.body = &body
	return r
}

func (r ApiCaptionAssetServeWebVTTRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.CaptionAssetServeWebVTTExecute(r)
}

/*
CaptionAssetServeWebVTT Method for CaptionAssetServeWebVTT

Serves caption by its id converting it to segmented WebVTT

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionAssetServeWebVTTRequest
*/
func (a *CaptionAssetApiService) CaptionAssetServeWebVTT(ctx context.Context) ApiCaptionAssetServeWebVTTRequest {
	return ApiCaptionAssetServeWebVTTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *CaptionAssetApiService) CaptionAssetServeWebVTTExecute(r ApiCaptionAssetServeWebVTTRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionAssetApiService.CaptionAssetServeWebVTT")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionasset/action/serveWebVTT"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCaptionAssetSetAsDefaultRequest struct {
	ctx context.Context
	ApiService *CaptionAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CaptionAssetDeleteRequest
}

func (r ApiCaptionAssetSetAsDefaultRequest) Ks(ks string) ApiCaptionAssetSetAsDefaultRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionAssetSetAsDefaultRequest) Format(format int32) ApiCaptionAssetSetAsDefaultRequest {
	r.format = &format
	return r
}

func (r ApiCaptionAssetSetAsDefaultRequest) ClientTag(clientTag string) ApiCaptionAssetSetAsDefaultRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionAssetSetAsDefaultRequest) PartnerId(partnerId int32) ApiCaptionAssetSetAsDefaultRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionAssetSetAsDefaultRequest) Body(body CaptionAssetDeleteRequest) ApiCaptionAssetSetAsDefaultRequest {
	r.body = &body
	return r
}

func (r ApiCaptionAssetSetAsDefaultRequest) Execute() (*http.Response, error) {
	return r.ApiService.CaptionAssetSetAsDefaultExecute(r)
}

/*
CaptionAssetSetAsDefault Method for CaptionAssetSetAsDefault

Markss the caption as default and removes that mark from all other caption assets of the entry.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionAssetSetAsDefaultRequest
*/
func (a *CaptionAssetApiService) CaptionAssetSetAsDefault(ctx context.Context) ApiCaptionAssetSetAsDefaultRequest {
	return ApiCaptionAssetSetAsDefaultRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CaptionAssetApiService) CaptionAssetSetAsDefaultExecute(r ApiCaptionAssetSetAsDefaultRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionAssetApiService.CaptionAssetSetAsDefault")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionasset/action/setAsDefault"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCaptionAssetSetContentRequest struct {
	ctx context.Context
	ApiService *CaptionAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AttachmentAssetSetContentRequest
}

func (r ApiCaptionAssetSetContentRequest) Ks(ks string) ApiCaptionAssetSetContentRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionAssetSetContentRequest) Format(format int32) ApiCaptionAssetSetContentRequest {
	r.format = &format
	return r
}

func (r ApiCaptionAssetSetContentRequest) ClientTag(clientTag string) ApiCaptionAssetSetContentRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionAssetSetContentRequest) PartnerId(partnerId int32) ApiCaptionAssetSetContentRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionAssetSetContentRequest) Body(body AttachmentAssetSetContentRequest) ApiCaptionAssetSetContentRequest {
	r.body = &body
	return r
}

func (r ApiCaptionAssetSetContentRequest) Execute() (*KalturaCaptionAsset, *http.Response, error) {
	return r.ApiService.CaptionAssetSetContentExecute(r)
}

/*
CaptionAssetSetContent Method for CaptionAssetSetContent

Update content of caption asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionAssetSetContentRequest
*/
func (a *CaptionAssetApiService) CaptionAssetSetContent(ctx context.Context) ApiCaptionAssetSetContentRequest {
	return ApiCaptionAssetSetContentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaCaptionAsset
func (a *CaptionAssetApiService) CaptionAssetSetContentExecute(r ApiCaptionAssetSetContentRequest) (*KalturaCaptionAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaCaptionAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionAssetApiService.CaptionAssetSetContent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionasset/action/setContent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCaptionAssetUpdateRequest struct {
	ctx context.Context
	ApiService *CaptionAssetApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *CaptionAssetUpdateRequest
}

func (r ApiCaptionAssetUpdateRequest) Ks(ks string) ApiCaptionAssetUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiCaptionAssetUpdateRequest) Format(format int32) ApiCaptionAssetUpdateRequest {
	r.format = &format
	return r
}

func (r ApiCaptionAssetUpdateRequest) ClientTag(clientTag string) ApiCaptionAssetUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiCaptionAssetUpdateRequest) PartnerId(partnerId int32) ApiCaptionAssetUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiCaptionAssetUpdateRequest) Body(body CaptionAssetUpdateRequest) ApiCaptionAssetUpdateRequest {
	r.body = &body
	return r
}

func (r ApiCaptionAssetUpdateRequest) Execute() (*KalturaCaptionAsset, *http.Response, error) {
	return r.ApiService.CaptionAssetUpdateExecute(r)
}

/*
CaptionAssetUpdate Method for CaptionAssetUpdate

Update caption asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCaptionAssetUpdateRequest
*/
func (a *CaptionAssetApiService) CaptionAssetUpdate(ctx context.Context) ApiCaptionAssetUpdateRequest {
	return ApiCaptionAssetUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaCaptionAsset
func (a *CaptionAssetApiService) CaptionAssetUpdateExecute(r ApiCaptionAssetUpdateRequest) (*KalturaCaptionAsset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaCaptionAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CaptionAssetApiService.CaptionAssetUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/caption_captionasset/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
