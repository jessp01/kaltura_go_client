/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaESearchAbstractUserItem `abstract`
type KalturaESearchAbstractUserItem struct {
	KalturaESearchUserBaseItem
}

// NewKalturaESearchAbstractUserItem instantiates a new KalturaESearchAbstractUserItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaESearchAbstractUserItem() *KalturaESearchAbstractUserItem {
	this := KalturaESearchAbstractUserItem{}
	return &this
}

// NewKalturaESearchAbstractUserItemWithDefaults instantiates a new KalturaESearchAbstractUserItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaESearchAbstractUserItemWithDefaults() *KalturaESearchAbstractUserItem {
	this := KalturaESearchAbstractUserItem{}
	return &this
}

func (o KalturaESearchAbstractUserItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedKalturaESearchUserBaseItem, errKalturaESearchUserBaseItem := json.Marshal(o.KalturaESearchUserBaseItem)
	if errKalturaESearchUserBaseItem != nil {
		return []byte{}, errKalturaESearchUserBaseItem
	}
	errKalturaESearchUserBaseItem = json.Unmarshal([]byte(serializedKalturaESearchUserBaseItem), &toSerialize)
	if errKalturaESearchUserBaseItem != nil {
		return []byte{}, errKalturaESearchUserBaseItem
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaESearchAbstractUserItem struct {
	value *KalturaESearchAbstractUserItem
	isSet bool
}

func (v NullableKalturaESearchAbstractUserItem) Get() *KalturaESearchAbstractUserItem {
	return v.value
}

func (v *NullableKalturaESearchAbstractUserItem) Set(val *KalturaESearchAbstractUserItem) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaESearchAbstractUserItem) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaESearchAbstractUserItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaESearchAbstractUserItem(val *KalturaESearchAbstractUserItem) *NullableKalturaESearchAbstractUserItem {
	return &NullableKalturaESearchAbstractUserItem{value: val, isSet: true}
}

func (v NullableKalturaESearchAbstractUserItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaESearchAbstractUserItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


