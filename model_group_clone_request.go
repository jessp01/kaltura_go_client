/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GroupCloneRequest struct for GroupCloneRequest
type GroupCloneRequest struct {
	NewGroupId string `json:"newGroupId"`
	NewGroupName *string `json:"newGroupName,omitempty"`
	OriginalGroupId string `json:"originalGroupId"`
}

// NewGroupCloneRequest instantiates a new GroupCloneRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupCloneRequest(newGroupId string, originalGroupId string) *GroupCloneRequest {
	this := GroupCloneRequest{}
	this.NewGroupId = newGroupId
	this.OriginalGroupId = originalGroupId
	return &this
}

// NewGroupCloneRequestWithDefaults instantiates a new GroupCloneRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupCloneRequestWithDefaults() *GroupCloneRequest {
	this := GroupCloneRequest{}
	return &this
}

// GetNewGroupId returns the NewGroupId field value
func (o *GroupCloneRequest) GetNewGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewGroupId
}

// GetNewGroupIdOk returns a tuple with the NewGroupId field value
// and a boolean to check if the value has been set.
func (o *GroupCloneRequest) GetNewGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewGroupId, true
}

// SetNewGroupId sets field value
func (o *GroupCloneRequest) SetNewGroupId(v string) {
	o.NewGroupId = v
}

// GetNewGroupName returns the NewGroupName field value if set, zero value otherwise.
func (o *GroupCloneRequest) GetNewGroupName() string {
	if o == nil || o.NewGroupName == nil {
		var ret string
		return ret
	}
	return *o.NewGroupName
}

// GetNewGroupNameOk returns a tuple with the NewGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupCloneRequest) GetNewGroupNameOk() (*string, bool) {
	if o == nil || o.NewGroupName == nil {
		return nil, false
	}
	return o.NewGroupName, true
}

// HasNewGroupName returns a boolean if a field has been set.
func (o *GroupCloneRequest) HasNewGroupName() bool {
	if o != nil && o.NewGroupName != nil {
		return true
	}

	return false
}

// SetNewGroupName gets a reference to the given string and assigns it to the NewGroupName field.
func (o *GroupCloneRequest) SetNewGroupName(v string) {
	o.NewGroupName = &v
}

// GetOriginalGroupId returns the OriginalGroupId field value
func (o *GroupCloneRequest) GetOriginalGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalGroupId
}

// GetOriginalGroupIdOk returns a tuple with the OriginalGroupId field value
// and a boolean to check if the value has been set.
func (o *GroupCloneRequest) GetOriginalGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalGroupId, true
}

// SetOriginalGroupId sets field value
func (o *GroupCloneRequest) SetOriginalGroupId(v string) {
	o.OriginalGroupId = v
}

func (o GroupCloneRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["newGroupId"] = o.NewGroupId
	}
	if o.NewGroupName != nil {
		toSerialize["newGroupName"] = o.NewGroupName
	}
	if true {
		toSerialize["originalGroupId"] = o.OriginalGroupId
	}
	return json.Marshal(toSerialize)
}

type NullableGroupCloneRequest struct {
	value *GroupCloneRequest
	isSet bool
}

func (v NullableGroupCloneRequest) Get() *GroupCloneRequest {
	return v.value
}

func (v *NullableGroupCloneRequest) Set(val *GroupCloneRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupCloneRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupCloneRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupCloneRequest(val *GroupCloneRequest) *NullableGroupCloneRequest {
	return &NullableGroupCloneRequest{value: val, isSet: true}
}

func (v NullableGroupCloneRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupCloneRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


