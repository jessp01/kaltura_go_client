/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaPlayReadyAnalogVideoOPIdHolder struct for KalturaPlayReadyAnalogVideoOPIdHolder
type KalturaPlayReadyAnalogVideoOPIdHolder struct {
	// Enum Type: `KalturaPlayReadyAnalogVideoOPId`  The type of the play enabler
	Type *string `json:"type,omitempty"`
}

// NewKalturaPlayReadyAnalogVideoOPIdHolder instantiates a new KalturaPlayReadyAnalogVideoOPIdHolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaPlayReadyAnalogVideoOPIdHolder() *KalturaPlayReadyAnalogVideoOPIdHolder {
	this := KalturaPlayReadyAnalogVideoOPIdHolder{}
	return &this
}

// NewKalturaPlayReadyAnalogVideoOPIdHolderWithDefaults instantiates a new KalturaPlayReadyAnalogVideoOPIdHolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaPlayReadyAnalogVideoOPIdHolderWithDefaults() *KalturaPlayReadyAnalogVideoOPIdHolder {
	this := KalturaPlayReadyAnalogVideoOPIdHolder{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KalturaPlayReadyAnalogVideoOPIdHolder) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KalturaPlayReadyAnalogVideoOPIdHolder) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KalturaPlayReadyAnalogVideoOPIdHolder) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *KalturaPlayReadyAnalogVideoOPIdHolder) SetType(v string) {
	o.Type = &v
}

func (o KalturaPlayReadyAnalogVideoOPIdHolder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaPlayReadyAnalogVideoOPIdHolder struct {
	value *KalturaPlayReadyAnalogVideoOPIdHolder
	isSet bool
}

func (v NullableKalturaPlayReadyAnalogVideoOPIdHolder) Get() *KalturaPlayReadyAnalogVideoOPIdHolder {
	return v.value
}

func (v *NullableKalturaPlayReadyAnalogVideoOPIdHolder) Set(val *KalturaPlayReadyAnalogVideoOPIdHolder) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaPlayReadyAnalogVideoOPIdHolder) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaPlayReadyAnalogVideoOPIdHolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaPlayReadyAnalogVideoOPIdHolder(val *KalturaPlayReadyAnalogVideoOPIdHolder) *NullableKalturaPlayReadyAnalogVideoOPIdHolder {
	return &NullableKalturaPlayReadyAnalogVideoOPIdHolder{value: val, isSet: true}
}

func (v NullableKalturaPlayReadyAnalogVideoOPIdHolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaPlayReadyAnalogVideoOPIdHolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


