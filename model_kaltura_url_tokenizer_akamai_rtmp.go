/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KalturaUrlTokenizerAkamaiRtmp struct for KalturaUrlTokenizerAkamaiRtmp
type KalturaUrlTokenizerAkamaiRtmp struct {
	KalturaUrlTokenizer
}

// NewKalturaUrlTokenizerAkamaiRtmp instantiates a new KalturaUrlTokenizerAkamaiRtmp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKalturaUrlTokenizerAkamaiRtmp() *KalturaUrlTokenizerAkamaiRtmp {
	this := KalturaUrlTokenizerAkamaiRtmp{}
	return &this
}

// NewKalturaUrlTokenizerAkamaiRtmpWithDefaults instantiates a new KalturaUrlTokenizerAkamaiRtmp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKalturaUrlTokenizerAkamaiRtmpWithDefaults() *KalturaUrlTokenizerAkamaiRtmp {
	this := KalturaUrlTokenizerAkamaiRtmp{}
	return &this
}

func (o KalturaUrlTokenizerAkamaiRtmp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedKalturaUrlTokenizer, errKalturaUrlTokenizer := json.Marshal(o.KalturaUrlTokenizer)
	if errKalturaUrlTokenizer != nil {
		return []byte{}, errKalturaUrlTokenizer
	}
	errKalturaUrlTokenizer = json.Unmarshal([]byte(serializedKalturaUrlTokenizer), &toSerialize)
	if errKalturaUrlTokenizer != nil {
		return []byte{}, errKalturaUrlTokenizer
	}
	return json.Marshal(toSerialize)
}

type NullableKalturaUrlTokenizerAkamaiRtmp struct {
	value *KalturaUrlTokenizerAkamaiRtmp
	isSet bool
}

func (v NullableKalturaUrlTokenizerAkamaiRtmp) Get() *KalturaUrlTokenizerAkamaiRtmp {
	return v.value
}

func (v *NullableKalturaUrlTokenizerAkamaiRtmp) Set(val *KalturaUrlTokenizerAkamaiRtmp) {
	v.value = val
	v.isSet = true
}

func (v NullableKalturaUrlTokenizerAkamaiRtmp) IsSet() bool {
	return v.isSet
}

func (v *NullableKalturaUrlTokenizerAkamaiRtmp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKalturaUrlTokenizerAkamaiRtmp(val *KalturaUrlTokenizerAkamaiRtmp) *NullableKalturaUrlTokenizerAkamaiRtmp {
	return &NullableKalturaUrlTokenizerAkamaiRtmp{value: val, isSet: true}
}

func (v NullableKalturaUrlTokenizerAkamaiRtmp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKalturaUrlTokenizerAkamaiRtmp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


