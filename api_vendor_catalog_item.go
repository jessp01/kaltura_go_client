/*
Kaltura VPaaS

The Kaltura VPaaS API

API version: 18.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
)


// VendorCatalogItemApiService VendorCatalogItemApi service
type VendorCatalogItemApiService service

type ApiVendorCatalogItemAddRequest struct {
	ctx context.Context
	ApiService *VendorCatalogItemApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VendorCatalogItemAddRequest
}

func (r ApiVendorCatalogItemAddRequest) Ks(ks string) ApiVendorCatalogItemAddRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVendorCatalogItemAddRequest) Format(format int32) ApiVendorCatalogItemAddRequest {
	r.format = &format
	return r
}

func (r ApiVendorCatalogItemAddRequest) ClientTag(clientTag string) ApiVendorCatalogItemAddRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVendorCatalogItemAddRequest) PartnerId(partnerId int32) ApiVendorCatalogItemAddRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVendorCatalogItemAddRequest) Body(body VendorCatalogItemAddRequest) ApiVendorCatalogItemAddRequest {
	r.body = &body
	return r
}

func (r ApiVendorCatalogItemAddRequest) Execute() (*KalturaVendorCatalogItem, *http.Response, error) {
	return r.ApiService.VendorCatalogItemAddExecute(r)
}

/*
VendorCatalogItemAdd Method for VendorCatalogItemAdd

Allows you to add an service catalog item

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVendorCatalogItemAddRequest
*/
func (a *VendorCatalogItemApiService) VendorCatalogItemAdd(ctx context.Context) ApiVendorCatalogItemAddRequest {
	return ApiVendorCatalogItemAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaVendorCatalogItem
func (a *VendorCatalogItemApiService) VendorCatalogItemAddExecute(r ApiVendorCatalogItemAddRequest) (*KalturaVendorCatalogItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaVendorCatalogItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VendorCatalogItemApiService.VendorCatalogItemAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/reach_vendorcatalogitem/action/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVendorCatalogItemAddFromBulkUploadRequest struct {
	ctx context.Context
	ApiService *VendorCatalogItemApiService
	fileData **os.File
	ks *string
	format *int32
	bulkUploadDataObjectType *string
	bulkUploadDataFileName *string
	bulkUploadDataObjectDataObjectType *string
	bulkUploadDataEmailRecipients *string
	bulkUploadDataNumOfErrorObjects *int32
	bulkUploadDataPrivileges *string
	bulkUploadVendorCatalogItemDataObjectType *string
}

func (r ApiVendorCatalogItemAddFromBulkUploadRequest) FileData(fileData *os.File) ApiVendorCatalogItemAddFromBulkUploadRequest {
	r.fileData = &fileData
	return r
}

func (r ApiVendorCatalogItemAddFromBulkUploadRequest) Ks(ks string) ApiVendorCatalogItemAddFromBulkUploadRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVendorCatalogItemAddFromBulkUploadRequest) Format(format int32) ApiVendorCatalogItemAddFromBulkUploadRequest {
	r.format = &format
	return r
}

func (r ApiVendorCatalogItemAddFromBulkUploadRequest) BulkUploadDataObjectType(bulkUploadDataObjectType string) ApiVendorCatalogItemAddFromBulkUploadRequest {
	r.bulkUploadDataObjectType = &bulkUploadDataObjectType
	return r
}

// Friendly name of the file, used to be recognized later in the logs.
func (r ApiVendorCatalogItemAddFromBulkUploadRequest) BulkUploadDataFileName(bulkUploadDataFileName string) ApiVendorCatalogItemAddFromBulkUploadRequest {
	r.bulkUploadDataFileName = &bulkUploadDataFileName
	return r
}

func (r ApiVendorCatalogItemAddFromBulkUploadRequest) BulkUploadDataObjectDataObjectType(bulkUploadDataObjectDataObjectType string) ApiVendorCatalogItemAddFromBulkUploadRequest {
	r.bulkUploadDataObjectDataObjectType = &bulkUploadDataObjectDataObjectType
	return r
}

// Recipients of the email for bulk upload success/failure
func (r ApiVendorCatalogItemAddFromBulkUploadRequest) BulkUploadDataEmailRecipients(bulkUploadDataEmailRecipients string) ApiVendorCatalogItemAddFromBulkUploadRequest {
	r.bulkUploadDataEmailRecipients = &bulkUploadDataEmailRecipients
	return r
}

// Number of objects that finished on error status
func (r ApiVendorCatalogItemAddFromBulkUploadRequest) BulkUploadDataNumOfErrorObjects(bulkUploadDataNumOfErrorObjects int32) ApiVendorCatalogItemAddFromBulkUploadRequest {
	r.bulkUploadDataNumOfErrorObjects = &bulkUploadDataNumOfErrorObjects
	return r
}

// privileges for the job
func (r ApiVendorCatalogItemAddFromBulkUploadRequest) BulkUploadDataPrivileges(bulkUploadDataPrivileges string) ApiVendorCatalogItemAddFromBulkUploadRequest {
	r.bulkUploadDataPrivileges = &bulkUploadDataPrivileges
	return r
}

func (r ApiVendorCatalogItemAddFromBulkUploadRequest) BulkUploadVendorCatalogItemDataObjectType(bulkUploadVendorCatalogItemDataObjectType string) ApiVendorCatalogItemAddFromBulkUploadRequest {
	r.bulkUploadVendorCatalogItemDataObjectType = &bulkUploadVendorCatalogItemDataObjectType
	return r
}

func (r ApiVendorCatalogItemAddFromBulkUploadRequest) Execute() (*KalturaBulkUpload, *http.Response, error) {
	return r.ApiService.VendorCatalogItemAddFromBulkUploadExecute(r)
}

/*
VendorCatalogItemAddFromBulkUpload Method for VendorCatalogItemAddFromBulkUpload

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVendorCatalogItemAddFromBulkUploadRequest
*/
func (a *VendorCatalogItemApiService) VendorCatalogItemAddFromBulkUpload(ctx context.Context) ApiVendorCatalogItemAddFromBulkUploadRequest {
	return ApiVendorCatalogItemAddFromBulkUploadRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaBulkUpload
func (a *VendorCatalogItemApiService) VendorCatalogItemAddFromBulkUploadExecute(r ApiVendorCatalogItemAddFromBulkUploadRequest) (*KalturaBulkUpload, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaBulkUpload
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VendorCatalogItemApiService.VendorCatalogItemAddFromBulkUpload")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/reach_vendorcatalogitem/action/addFromBulkUpload"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fileData == nil {
		return localVarReturnValue, nil, reportError("fileData is required and must be specified")
	}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.bulkUploadDataObjectType != nil {
		localVarQueryParams.Add("bulkUploadData[objectType]", parameterToString(*r.bulkUploadDataObjectType, ""))
	}
	if r.bulkUploadDataFileName != nil {
		localVarQueryParams.Add("bulkUploadData[fileName]", parameterToString(*r.bulkUploadDataFileName, ""))
	}
	if r.bulkUploadDataObjectDataObjectType != nil {
		localVarQueryParams.Add("bulkUploadData[objectData][objectType]", parameterToString(*r.bulkUploadDataObjectDataObjectType, ""))
	}
	if r.bulkUploadDataEmailRecipients != nil {
		localVarQueryParams.Add("bulkUploadData[emailRecipients]", parameterToString(*r.bulkUploadDataEmailRecipients, ""))
	}
	if r.bulkUploadDataNumOfErrorObjects != nil {
		localVarQueryParams.Add("bulkUploadData[numOfErrorObjects]", parameterToString(*r.bulkUploadDataNumOfErrorObjects, ""))
	}
	if r.bulkUploadDataPrivileges != nil {
		localVarQueryParams.Add("bulkUploadData[privileges]", parameterToString(*r.bulkUploadDataPrivileges, ""))
	}
	if r.bulkUploadVendorCatalogItemDataObjectType != nil {
		localVarQueryParams.Add("bulkUploadVendorCatalogItemData[objectType]", parameterToString(*r.bulkUploadVendorCatalogItemDataObjectType, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileDataLocalVarFormFileName string
	var fileDataLocalVarFileName     string
	var fileDataLocalVarFileBytes    []byte

	fileDataLocalVarFormFileName = "fileData"

	fileDataLocalVarFile := *r.fileData
	if fileDataLocalVarFile != nil {
		fbs, _ := ioutil.ReadAll(fileDataLocalVarFile)
		fileDataLocalVarFileBytes = fbs
		fileDataLocalVarFileName = fileDataLocalVarFile.Name()
		fileDataLocalVarFile.Close()
	}
	formFiles = append(formFiles, formFile{fileBytes: fileDataLocalVarFileBytes, fileName: fileDataLocalVarFileName, formFileName: fileDataLocalVarFormFileName})
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVendorCatalogItemDeleteRequest struct {
	ctx context.Context
	ApiService *VendorCatalogItemApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiVendorCatalogItemDeleteRequest) Ks(ks string) ApiVendorCatalogItemDeleteRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVendorCatalogItemDeleteRequest) Format(format int32) ApiVendorCatalogItemDeleteRequest {
	r.format = &format
	return r
}

func (r ApiVendorCatalogItemDeleteRequest) ClientTag(clientTag string) ApiVendorCatalogItemDeleteRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVendorCatalogItemDeleteRequest) PartnerId(partnerId int32) ApiVendorCatalogItemDeleteRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVendorCatalogItemDeleteRequest) Body(body AccessControlDeleteRequest) ApiVendorCatalogItemDeleteRequest {
	r.body = &body
	return r
}

func (r ApiVendorCatalogItemDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.VendorCatalogItemDeleteExecute(r)
}

/*
VendorCatalogItemDelete Method for VendorCatalogItemDelete

Delete vedor catalog item object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVendorCatalogItemDeleteRequest
*/
func (a *VendorCatalogItemApiService) VendorCatalogItemDelete(ctx context.Context) ApiVendorCatalogItemDeleteRequest {
	return ApiVendorCatalogItemDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VendorCatalogItemApiService) VendorCatalogItemDeleteExecute(r ApiVendorCatalogItemDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VendorCatalogItemApiService.VendorCatalogItemDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/reach_vendorcatalogitem/action/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVendorCatalogItemGetRequest struct {
	ctx context.Context
	ApiService *VendorCatalogItemApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *AccessControlDeleteRequest
}

func (r ApiVendorCatalogItemGetRequest) Ks(ks string) ApiVendorCatalogItemGetRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVendorCatalogItemGetRequest) Format(format int32) ApiVendorCatalogItemGetRequest {
	r.format = &format
	return r
}

func (r ApiVendorCatalogItemGetRequest) ClientTag(clientTag string) ApiVendorCatalogItemGetRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVendorCatalogItemGetRequest) PartnerId(partnerId int32) ApiVendorCatalogItemGetRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVendorCatalogItemGetRequest) Body(body AccessControlDeleteRequest) ApiVendorCatalogItemGetRequest {
	r.body = &body
	return r
}

func (r ApiVendorCatalogItemGetRequest) Execute() (*KalturaVendorCatalogItem, *http.Response, error) {
	return r.ApiService.VendorCatalogItemGetExecute(r)
}

/*
VendorCatalogItemGet Method for VendorCatalogItemGet

Retrieve specific catalog item by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVendorCatalogItemGetRequest
*/
func (a *VendorCatalogItemApiService) VendorCatalogItemGet(ctx context.Context) ApiVendorCatalogItemGetRequest {
	return ApiVendorCatalogItemGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaVendorCatalogItem
func (a *VendorCatalogItemApiService) VendorCatalogItemGetExecute(r ApiVendorCatalogItemGetRequest) (*KalturaVendorCatalogItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaVendorCatalogItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VendorCatalogItemApiService.VendorCatalogItemGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/reach_vendorcatalogitem/action/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVendorCatalogItemGetServeUrlRequest struct {
	ctx context.Context
	ApiService *VendorCatalogItemApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VendorCatalogItemGetServeUrlRequest
}

func (r ApiVendorCatalogItemGetServeUrlRequest) Ks(ks string) ApiVendorCatalogItemGetServeUrlRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVendorCatalogItemGetServeUrlRequest) Format(format int32) ApiVendorCatalogItemGetServeUrlRequest {
	r.format = &format
	return r
}

func (r ApiVendorCatalogItemGetServeUrlRequest) ClientTag(clientTag string) ApiVendorCatalogItemGetServeUrlRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVendorCatalogItemGetServeUrlRequest) PartnerId(partnerId int32) ApiVendorCatalogItemGetServeUrlRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVendorCatalogItemGetServeUrlRequest) Body(body VendorCatalogItemGetServeUrlRequest) ApiVendorCatalogItemGetServeUrlRequest {
	r.body = &body
	return r
}

func (r ApiVendorCatalogItemGetServeUrlRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.VendorCatalogItemGetServeUrlExecute(r)
}

/*
VendorCatalogItemGetServeUrl Method for VendorCatalogItemGetServeUrl

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVendorCatalogItemGetServeUrlRequest
*/
func (a *VendorCatalogItemApiService) VendorCatalogItemGetServeUrl(ctx context.Context) ApiVendorCatalogItemGetServeUrlRequest {
	return ApiVendorCatalogItemGetServeUrlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *VendorCatalogItemApiService) VendorCatalogItemGetServeUrlExecute(r ApiVendorCatalogItemGetServeUrlRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VendorCatalogItemApiService.VendorCatalogItemGetServeUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/reach_vendorcatalogitem/action/getServeUrl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVendorCatalogItemListRequest struct {
	ctx context.Context
	ApiService *VendorCatalogItemApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VendorCatalogItemListRequest
}

func (r ApiVendorCatalogItemListRequest) Ks(ks string) ApiVendorCatalogItemListRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVendorCatalogItemListRequest) Format(format int32) ApiVendorCatalogItemListRequest {
	r.format = &format
	return r
}

func (r ApiVendorCatalogItemListRequest) ClientTag(clientTag string) ApiVendorCatalogItemListRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVendorCatalogItemListRequest) PartnerId(partnerId int32) ApiVendorCatalogItemListRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVendorCatalogItemListRequest) Body(body VendorCatalogItemListRequest) ApiVendorCatalogItemListRequest {
	r.body = &body
	return r
}

func (r ApiVendorCatalogItemListRequest) Execute() (*KalturaVendorCatalogItemListResponse, *http.Response, error) {
	return r.ApiService.VendorCatalogItemListExecute(r)
}

/*
VendorCatalogItemList Method for VendorCatalogItemList

List KalturaVendorCatalogItem objects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVendorCatalogItemListRequest
*/
func (a *VendorCatalogItemApiService) VendorCatalogItemList(ctx context.Context) ApiVendorCatalogItemListRequest {
	return ApiVendorCatalogItemListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaVendorCatalogItemListResponse
func (a *VendorCatalogItemApiService) VendorCatalogItemListExecute(r ApiVendorCatalogItemListRequest) (*KalturaVendorCatalogItemListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaVendorCatalogItemListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VendorCatalogItemApiService.VendorCatalogItemList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/reach_vendorcatalogitem/action/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVendorCatalogItemServeRequest struct {
	ctx context.Context
	ApiService *VendorCatalogItemApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VendorCatalogItemGetServeUrlRequest
}

func (r ApiVendorCatalogItemServeRequest) Ks(ks string) ApiVendorCatalogItemServeRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVendorCatalogItemServeRequest) Format(format int32) ApiVendorCatalogItemServeRequest {
	r.format = &format
	return r
}

func (r ApiVendorCatalogItemServeRequest) ClientTag(clientTag string) ApiVendorCatalogItemServeRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVendorCatalogItemServeRequest) PartnerId(partnerId int32) ApiVendorCatalogItemServeRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVendorCatalogItemServeRequest) Body(body VendorCatalogItemGetServeUrlRequest) ApiVendorCatalogItemServeRequest {
	r.body = &body
	return r
}

func (r ApiVendorCatalogItemServeRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.VendorCatalogItemServeExecute(r)
}

/*
VendorCatalogItemServe Method for VendorCatalogItemServe

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVendorCatalogItemServeRequest
*/
func (a *VendorCatalogItemApiService) VendorCatalogItemServe(ctx context.Context) ApiVendorCatalogItemServeRequest {
	return ApiVendorCatalogItemServeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *VendorCatalogItemApiService) VendorCatalogItemServeExecute(r ApiVendorCatalogItemServeRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VendorCatalogItemApiService.VendorCatalogItemServe")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/reach_vendorcatalogitem/action/serve"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVendorCatalogItemUpdateRequest struct {
	ctx context.Context
	ApiService *VendorCatalogItemApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VendorCatalogItemUpdateRequest
}

func (r ApiVendorCatalogItemUpdateRequest) Ks(ks string) ApiVendorCatalogItemUpdateRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVendorCatalogItemUpdateRequest) Format(format int32) ApiVendorCatalogItemUpdateRequest {
	r.format = &format
	return r
}

func (r ApiVendorCatalogItemUpdateRequest) ClientTag(clientTag string) ApiVendorCatalogItemUpdateRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVendorCatalogItemUpdateRequest) PartnerId(partnerId int32) ApiVendorCatalogItemUpdateRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVendorCatalogItemUpdateRequest) Body(body VendorCatalogItemUpdateRequest) ApiVendorCatalogItemUpdateRequest {
	r.body = &body
	return r
}

func (r ApiVendorCatalogItemUpdateRequest) Execute() (*KalturaVendorCatalogItem, *http.Response, error) {
	return r.ApiService.VendorCatalogItemUpdateExecute(r)
}

/*
VendorCatalogItemUpdate Method for VendorCatalogItemUpdate

Update an existing vedor catalog item object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVendorCatalogItemUpdateRequest
*/
func (a *VendorCatalogItemApiService) VendorCatalogItemUpdate(ctx context.Context) ApiVendorCatalogItemUpdateRequest {
	return ApiVendorCatalogItemUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaVendorCatalogItem
func (a *VendorCatalogItemApiService) VendorCatalogItemUpdateExecute(r ApiVendorCatalogItemUpdateRequest) (*KalturaVendorCatalogItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaVendorCatalogItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VendorCatalogItemApiService.VendorCatalogItemUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/reach_vendorcatalogitem/action/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVendorCatalogItemUpdateStatusRequest struct {
	ctx context.Context
	ApiService *VendorCatalogItemApiService
	ks *string
	format *int32
	clientTag *string
	partnerId *int32
	body *VendorCatalogItemUpdateStatusRequest
}

func (r ApiVendorCatalogItemUpdateStatusRequest) Ks(ks string) ApiVendorCatalogItemUpdateStatusRequest {
	r.ks = &ks
	return r
}

// The format of the response
func (r ApiVendorCatalogItemUpdateStatusRequest) Format(format int32) ApiVendorCatalogItemUpdateStatusRequest {
	r.format = &format
	return r
}

func (r ApiVendorCatalogItemUpdateStatusRequest) ClientTag(clientTag string) ApiVendorCatalogItemUpdateStatusRequest {
	r.clientTag = &clientTag
	return r
}

func (r ApiVendorCatalogItemUpdateStatusRequest) PartnerId(partnerId int32) ApiVendorCatalogItemUpdateStatusRequest {
	r.partnerId = &partnerId
	return r
}

func (r ApiVendorCatalogItemUpdateStatusRequest) Body(body VendorCatalogItemUpdateStatusRequest) ApiVendorCatalogItemUpdateStatusRequest {
	r.body = &body
	return r
}

func (r ApiVendorCatalogItemUpdateStatusRequest) Execute() (*KalturaVendorCatalogItem, *http.Response, error) {
	return r.ApiService.VendorCatalogItemUpdateStatusExecute(r)
}

/*
VendorCatalogItemUpdateStatus Method for VendorCatalogItemUpdateStatus

Update vendor catalog item status by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVendorCatalogItemUpdateStatusRequest
*/
func (a *VendorCatalogItemApiService) VendorCatalogItemUpdateStatus(ctx context.Context) ApiVendorCatalogItemUpdateStatusRequest {
	return ApiVendorCatalogItemUpdateStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KalturaVendorCatalogItem
func (a *VendorCatalogItemApiService) VendorCatalogItemUpdateStatusExecute(r ApiVendorCatalogItemUpdateStatusRequest) (*KalturaVendorCatalogItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KalturaVendorCatalogItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VendorCatalogItemApiService.VendorCatalogItemUpdateStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/reach_vendorcatalogitem/action/updateStatus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ks != nil {
		localVarQueryParams.Add("ks", parameterToString(*r.ks, ""))
	}
	if r.format != nil {
		localVarQueryParams.Add("format", parameterToString(*r.format, ""))
	}
	if r.clientTag != nil {
		localVarQueryParams.Add("clientTag", parameterToString(*r.clientTag, ""))
	}
	if r.partnerId != nil {
		localVarQueryParams.Add("partnerId", parameterToString(*r.partnerId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ks"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("ks", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
